{
  "0xaa1c5a9a41a70c4916606655e55db0a80c549687fbc15f9de654cf22dc4e1f97": {
    "name": "PledgePool",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "PledgePool",
      "sourceName": "contracts/pledage/PledgePool.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_oracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_swapRouter",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "_feeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_multiSignature",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "ReentrancyGuardReentrantCall",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "SafeERC20FailedOperation",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "ClaimBorrow",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "ClaimLend",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "mintAmount",
              "type": "uint256"
            }
          ],
          "name": "DepositBorrow",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "mintAmount",
              "type": "uint256"
            }
          ],
          "name": "DepositLend",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "EmergencyBorrowWithdrawal",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "EmergencyLendWithdrawal",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "recieptor",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "Redeem",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "refund",
              "type": "uint256"
            }
          ],
          "name": "RefundBorrow",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "refund",
              "type": "uint256"
            }
          ],
          "name": "RefundLend",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "newLendFee",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "newBorrowFee",
              "type": "uint256"
            }
          ],
          "name": "SetFee",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "oldFeeAddress",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newFeeAddress",
              "type": "address"
            }
          ],
          "name": "SetFeeAddress",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "oldMinAmount",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "newMinAmount",
              "type": "uint256"
            }
          ],
          "name": "SetMinAmount",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "oldSwapAddress",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newSwapAddress",
              "type": "address"
            }
          ],
          "name": "SetSwapRouterAddress",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "oldState",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "newState",
              "type": "uint256"
            }
          ],
          "name": "StateChange",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "fromCoin",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "toCoin",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "fromValue",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "toValue",
              "type": "uint256"
            }
          ],
          "name": "Swap",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "burnAmount",
              "type": "uint256"
            }
          ],
          "name": "WithdrawBorrow",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "burnAmount",
              "type": "uint256"
            }
          ],
          "name": "WithdrawLend",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "PoolLength",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "borrowFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "checkoutFinish",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "checkoutLiquidation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "checkoutSettle",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "claimBorrow",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "claimLend",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_settleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_maxSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_martgageRate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_lendToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_borrowToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_spToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_jpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_autoLiquidateThreshold",
              "type": "uint256"
            }
          ],
          "name": "createPool",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakeAmount",
              "type": "uint256"
            }
          ],
          "name": "depositBorrow",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakeAmount",
              "type": "uint256"
            }
          ],
          "name": "depositLend",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "emergencyBorrowWithdrawal",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "emergencyLendWithdrawal",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "feeAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "finish",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getMultiSignatureAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "getPoolState",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "getUnderlyingPriceView",
          "outputs": [
            {
              "internalType": "uint256[2]",
              "name": "",
              "type": "uint256[2]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "globalPaused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lendFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "liquidate",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "minAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "multiSignaturePosition",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "oracle",
          "outputs": [
            {
              "internalType": "contract IBscPledgeOracle",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "poolBaseInfos",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "settleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lendSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "martgageRate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lendToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrowToken",
              "type": "address"
            },
            {
              "internalType": "enum PledgePool.PoolState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract IDebtToken",
              "name": "spCoin",
              "type": "address"
            },
            {
              "internalType": "contract IDebtToken",
              "name": "jpCoin",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "autoLiquidateThreshold",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "poolDataInfos",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "settleAmountLend",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "settleAmountBorrow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finishAmountLend",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finishAmountBorrow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationAmountLend",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationAmountBorrow",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "refundBorrow",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "refundLend",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_lendFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_borrowFee",
              "type": "uint256"
            }
          ],
          "name": "setFee",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_feeAddress",
              "type": "address"
            }
          ],
          "name": "setFeeAddress",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_minAmount",
              "type": "uint256"
            }
          ],
          "name": "setMinAmount",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "setPause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_swapRouter",
              "type": "address"
            }
          ],
          "name": "setSwapRouter",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            }
          ],
          "name": "settle",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "swapRouter",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "userBorrowInfo",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refundAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasNoRefund",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasNoClaim",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "userLendInfo",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refundAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasNoRefund",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasNoClaim",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_jpAmount",
              "type": "uint256"
            }
          ],
          "name": "withdrawBorrow",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_spAmount",
              "type": "uint256"
            }
          ],
          "name": "withdrawLend",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x608034620002ad57601f62003f1a38819003918201601f191683019291906001600160401b03841183851017620002b2578160809284926040968752833981010312620002ad576200005181620002c8565b906200006060208201620002c8565b818401516001600160a01b03808216949093909291859003620002ad576200008c6060859201620002c8565b600160005516801562000237577f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb475568056bc75e2d63100000600155826002549216928315620001e757811615620001935783156200013f57600480546001600160a01b031990811690941790556001600160a81b031990911660089190911b610100600160a81b031617600255600380549091169190911790556000600581905560065551613c3c9081620002de8239f35b845162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2066656541646472657373206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b845162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2073776170526f75746572206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b855162461bcd60e51b815260206004820152602360248201527f506c65646765506f6f6c203a206f7261636c65206973207a65726f206164647260448201526265737360e81b6064820152608490fd5b855162461bcd60e51b815260206004820152604360248201527f6d756c74695369676e6174757265436c69656e74203a204d756c7469706c652060448201527f7369676e617475726520636f6e74726163742061646472657373206973207a65606482015262726f2160e81b608482015260a490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620002ad5756fe6080604052600436101561001257600080fd5b60003560e01c80630d6abfc114612ba757806314c090cc14612b7c57806316f941b514612a005780631e107979146126ca57806338f2aa76146123c35780633ab4a445146121205780633c9fadc31461209f5780634127365714611fc65780634127535814611f9d578063415f124014611da0578063459b911c146119605780634aea0aec1461194257806352f7c988146118fc57806361a552dc146118d957806362faecf41461180e578063638c7e17146117c65780636abd7f29146117985780636c42fed2146115155780636de6ff3a146114f75780637dc0d1d0146114ce5780638705fcd41461140a578063897b0637146113755780638df828001461114f57806390590da014610f43578063981b48a614610ed95780639b2cb5d814610ebb5780639d71488e14610e80578063a62ff16414610c11578063b159751714610bd6578063bb176a6414610b51578063bf38b8f614610973578063c31c9c0714610946578063c9333756146108ff578063d353a1cb1461069c578063d431b1ac1461066b578063e271fa0c14610490578063e626648a146104725763eec8d506146101be57600080fd5b3461046d5760208060031936011261046d57600435906101dc612fb3565b6101eb60ff6002541615612ea5565b6102016101f783612c7b565b505442101561310c565b60ff600861020e84612c7b565b50015460a01c166005811015610431576001148015610447575b801561040b575b61023890613158565b61024182612c7b565b5061024b83612cf8565b509233600052600a8352604060002090600052825260406000209081549081156103c657600481015494549061028182876130ba565b1561038157600284019182549360ff851661033c57670de0b6b3a76400006102eb896102e66007956102e07fc3e20279d41b3ed21d277920877e5e5c6665bf6aca607046a3fe0fd2bd6bda7d9b9c9d6102db60019861327b565b613313565b926130ba565b613300565b04960191868355600160ff1980961617845501916001808060a01b03946103168887875416336131a4565b8254161790556103278154866130ad565b90555416926040519283523392a36001600055005b60405162461bcd60e51b815260048101889052601d60248201527f726566756e644c656e64203a20616c726561647920726566756e6465640000006044820152606490fd5b60405162461bcd60e51b815260048101869052601760248201527f726566756e644c656e64203a206e6f7420726566756e640000000000000000006044820152606490fd5b60405162461bcd60e51b815260048101859052601860248201527f726566756e644c656e64203a206e6f7420706c656467656400000000000000006044820152606490fd5b5060ff600861041984612c7b565b50015460a01c1660058110156104315760031461022f565b634e487b7160e01b600052602160045260246000fd5b5060ff600861045584612c7b565b50015460a01c16600581101561043157600214610228565b600080fd5b3461046d57600036600319011261046d576020600654604051908152f35b3461046d5760208060031936011261046d57600435906104ae612fb3565b6104bd60ff6002541615612ea5565b60ff60086104ca84612c7b565b50015460a01c1660058110156104315760046104e691146133c6565b6104ef82612c7b565b5091600583015415610613573360005260098252604060002090600052815260406000209182549081156105ce57600284019060ff8254166105895760080180547f5a06c7de92f1dc59e8cba872927d016c80ce5f0fb2295c898dfb7a2f08e43fb1936001600160a01b03939161056991908516336131a4565b600160ff1982541617905554169254916040519283523392a36001600055005b60405162461bcd60e51b815260048101859052601a60248201527f726566756e64426f72726f773a20616761696e20726566756e640000000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601960248201527f726566756e64426f72726f773a206e6f7420706c6564676564000000000000006044820152606490fd5b60405162461bcd60e51b815260048101839052602a60248201527f656d657267656e6379426f72726f775769746864726177616c203a206e6f74206044820152691dda5d1a191c985dd85b60b21b6064820152608490fd5b3461046d57600036600319011261046d57610684612d87565b60025460ff80821615169060ff191617600255600080f35b3461046d57602036600319011261046d576004356106b8612d87565b6106c181612c7b565b50906106cc81612cf8565b509060016106d982612c7b565b50015442106108ba576008830180549260ff8460a01c16600581101561043157600103610869576007850161078a60018060a01b039561075f8784541698662386f26fc1000061075860026301e1338061074161073c60018701548754906130ba565b6132e7565b049301549261075289548095613300565b90613300565b04906130ad565b97876305f5e10061077a61077460055461309c565b8c613300565b0492168860025460081c16613639565b919095878310610824576107e2600197846107f0948b60029c6003981160001461081957916107cf6107bf6107d494836130ba565b809388808c5416915416906131a4565b6130ba565b8a8701555b888601546130ba565b906006549086541690613412565b910155805460ff60a01b191660a184901b179055600080516020613be7833981519152600080a4005b50508a8701556107d9565b60405162461bcd60e51b815260206004820152601c60248201527f66696e6973683a20536c69707061676520697320746f6f2068696768000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526024808201527f66696e6973683a20706f6f6c207374617465206d7573742062652065786563756044820152633a34b7b760e11b6064820152608490fd5b60405162461bcd60e51b815260206004820152601a60248201527f66696e6973683a206c657373207468616e20656e642074696d650000000000006044820152606490fd5b3461046d5760208060031936011261046d5761091c6004356134ff565b604051916000835b6002821061093157604085f35b82806001928651815201940191019092610924565b3461046d57600036600319011261046d5760025460405160089190911c6001600160a01b03168152602090f35b3461046d5760208060031936011261046d5760043590610991612fb3565b6109a060ff6002541615612ea5565b60ff60086109ad84612c7b565b50015460a01c1660058110156104315760046109c991146133c6565b6109d282612c7b565b5091600483015415610af75733600052600a825260406000209060005281526040600020918254908115610aa457600284019060ff825416610a4c5760070180547f71d14c5f08cb34cbfb59c06ea5151aafbf742d0b6ed00fdb83addd9afb5c0fd0936001600160a01b03939161056991908516336131a4565b60405162461bcd60e51b815260048101859052602a60248201527f656d657267656e63794c656e645769746864726177616c203a20616c726561646044820152691e481c99599d5b99195960b21b6064820152608490fd5b60405162461bcd60e51b815260048101849052602560248201527f656d657267656e63794c656e645769746864726177616c203a206e6f7420706c604482015264195919d95960da1b6064820152608490fd5b60405162461bcd60e51b815260048101839052602c60248201527f656d657267656e63794c656e645769746864726177616c203a206c656e64537560448201526b70706c79206973207a65726f60a01b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b03610b72612ce2565b16600052600a60205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b0390f35b3461046d57602036600319011261046d5760ff6008610bf6600435612c7b565b50015460a01c16600581101561043157602090604051908152f35b3461046d5760208060031936011261046d57600435610c2e612fb3565b610c3d60ff6002541615612ea5565b610c496101f782612c7b565b60ff6008610c5683612c7b565b50015460a01c166005811015610431576001148015610e5a575b8015610e34575b610c8090613158565b610c8981612c7b565b5090610c9481612cf8565b5090336000526009845260406000209060005283526040600020906001600584015491015491610cc483836130ba565b15610def578054918215610daa57600282019384549360ff8516610d65579360019693670de0b6b3a7640000610d2a856102e68b966102e07f732816f48de550f238bd0d4f5b79819c7b24a49d6132928978e3cd36568dd5db9c996102db60089d61327b565b04970187905560ff19161790550180546001600160a01b039190610d529085908416336131a4565b5416926040519283523392a36001600055005b60405162461bcd60e51b815260048101899052601f60248201527f726566756e64426f72726f77203a20616c726561647920726566756e646564006044820152606490fd5b60405162461bcd60e51b815260048101879052601a60248201527f726566756e64426f72726f77203a206e6f7420706c65646765640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601960248201527f726566756e64426f72726f77203a206e6f7420726566756e64000000000000006044820152606490fd5b5060ff6008610e4283612c7b565b50015460a01c16600581101561043157600314610c77565b5060ff6008610e6883612c7b565b50015460a01c16600581101561043157600214610c70565b3461046d57600036600319011261046d5760206040517f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb478152f35b3461046d57600036600319011261046d576020600154604051908152f35b3461046d57602036600319011261046d5760043560085481101561046d57610f0260c091612cf8565b5080549060018101549060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b610f4c36612ccc565b610f54612fb3565b610f6360ff6002541615612ea5565b610f78610f6f83612c7b565b50544210612eff565b60ff6008610f8584612c7b565b50015460a01c16600581101561043157610f9f9015612f56565b610fa882612c7b565b509133600052600a602052604060002090600052602052604060002091600381015490610fdb60048201928354906130ba565b83116110ee5760070180546001600160a01b039290610ffd9085908516612fd6565b946001548611156110935760028101805461ffff191690558254841661107457611029815434906130ad565b90556110363482546130ad565b90555b54169160405191825260208201527f129e8c18c2f7baf99c7eb257934c21f038c72412803512dcf0a942a4562a82ea60403392a36001600055005b61107f8682546130ad565b905561108c8582546130ad565b9055611039565b60405162461bcd60e51b815260206004820152602d60248201527f6465706f7369744c656e643a20616d6f756e74206c657373207468616e206d6960448201526c1b9a5b5d5b4819195c1bdcda5d609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603360248201527f6465706f7369744c656e64203a207374616b65416d6f756e742069732067726560448201527261746572207468616e206d6178537570706c7960681b6064820152608490fd5b3461046d57602036600319011261046d5760043561116b612d87565b61117481612c7b565b509061117f81612cf8565b5061118982612c7b565b50544210611322576008830190815460ff8160a01c166005811015610431576112de576004850190815490811515806112d1575b1561129357505090600180958594936111d76000976134ff565b91602083016111f16111e9825161327b565b855190613313565b936112236006611218670de0b6b3a764000061121260058801998a54613300565b046132e7565b940193845490613313565b9354918483118b1461125f57505050508355549101555b805460ff60a01b191660a085901b179055600080516020613be78339815191528280a4005b61128b95506102db9394509061127b61128392848a55516132e7565b905190613313565b925490613300565b91015561123a565b60ff60a01b1916600160a21b179093555090815560059092015460019290920191909155600490600090600080516020613be78339815191528280a4005b50600587015415156111bd565b606460405162461bcd60e51b815260206004820152602060248201527f736574746c653a20706f6f6c207374617465206d757374206265204d415443486044820152fd5b60405162461bcd60e51b815260206004820152602560248201527f736574746c653a2074696d65206973206c657373207468616e20736574746c656044820152642074696d6560d81b6064820152608490fd5b3461046d57602036600319011261046d57600435611391612d87565b80156113c557806001547ffa6189b739625142c695478e9d0095a1cb9e6fad92ad8a727e0055a5cc85b06b600080a3600155005b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a206d696e416d6f756e74206973207a65726f00006044820152606490fd5b3461046d57602036600319011261046d57611423612ce2565b61142b612d87565b6001600160a01b0390811690811561147957816003549182167fd44190acf9d04bdb5d3a1aafff7e6dee8b40b93dfb8c5d3f0eea4b9f4539c3f7600080a36001600160a01b03191617600355005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2066656541646472657373206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57600036600319011261046d576004546040516001600160a01b039091168152602090f35b3461046d57600036600319011261046d576020600754604051908152f35b3461046d5760208060031936011261046d57600435611532612fb3565b61154160ff6002541615612ea5565b61154d6101f782612c7b565b60ff600861155a83612c7b565b50015460a01c166005811015610431576001148015611772575b801561174c575b61158490613158565b61158d81612c7b565b5061159782612cf8565b509133600052600a845260406000209060005283526040600020918254928315611707576002019260ff845460081c166116c257670de0b6b3a7640000916115ef6115e46115f69361327b565b600486015490613313565b9054613300565b60098301546040516340c10f1960e01b815233600482015292909104602483018190529391926001600160a01b03929186908590604490829060009088165af19182156116b6577f6f4dd2687b3c3bfa99d39742b01d6e0ad9604c48559791d5df4ff5df44b41dfd94600793611689575b50805461ff001916610100179055015460405193845216923392a36001600055005b6116a890883d8a116116af575b6116a08183612d65565b810190613362565b5087611667565b503d611696565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260048101869052601a60248201527f636c61696d4c656e64203a616c726561647920636c61696d65640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601e60248201527f636c61696d4c656e64203a63616e6e6f74206765742073705f746f6b656e00006044820152606490fd5b5060ff600861175a83612c7b565b50015460a01c1660058110156104315760031461157b565b5060ff600861178083612c7b565b50015460a01c16600581101561043157600214611574565b3461046d57602036600319011261046d57602060016117b8600435612c7b565b500154421015604051908152f35b3461046d57600036600319011261046d577f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb47546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d5760043561182b81612c7b565b5090600b670de0b6b3a764000061186861185e61185161184a86612cf8565b50956134ff565b61127b602082015161327b565b6001850154613300565b0491549201546305f5e100908101928184106118945760209361188a91613300565b0411604051908152f35b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606490fd5b3461046d57600036600319011261046d57602060ff600254166040519015158152f35b3461046d5761190a36612ccc565b90611913612d87565b80600555816006557f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5600080a3005b3461046d57600036600319011261046d576020600554604051908152f35b3461046d576101408060031936011261046d5760249060043590823560a4356001600160a01b0381169081900361046d5760c4356001600160a01b0381169081900361046d5760e4356001600160a01b038116929083900361046d57610104356001600160a01b038116949085900361046d576119db612d87565b86811115611d3f578415611cee578315611c9d57604051966101a0880188811067ffffffffffffffff821117611c8857604052875260208701526044356040870152606435606087015260006080870152600060a087015260843560c087015260e086015261010085015260006101208501528284015261016083015261012435610180830152600754600160401b811015611c7357806001611a819201600755612c7b565b929092611c5e57805183556020810151600184015560408101516002840155606081015160038401556080810151600484015560a0810151600584015560c08101516006840155600783019060018060a01b0360e082015116916bffffffffffffffffffffffff60a01b9283825416179055600884019160018060a01b036101008301511693835493610120840151946005861015611c49576001600160a81b03191690951760a09490941b60ff60a01b16939093179093559081015160098401805484166001600160a01b03928316179055610160820151600a850180549094169116179091556101800151600b919091015560405160c0810167ffffffffffffffff811182821017611c34576040526000815260208101600081526040820160008152606083016000815260808401916000835260a085019360008552600854600160401b811015611c1f57806001611bdf9201600855612cf8565b969096611c0a5751865551600186015551600285015551600384015551600483015551600590910155005b87634e487b7160e01b60005260006004526000fd5b87634e487b7160e01b60005260416004526000fd5b82634e487b7160e01b60005260416004526000fd5b88634e487b7160e01b60005260216004526000fd5b83634e487b7160e01b60005260006004526000fd5b83634e487b7160e01b60005260416004526000fd5b89634e487b7160e01b60005260416004526000fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a207370546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a206a70546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526034818a01527f637265617465506f6f6c203a20656e6454696d65206d7573742062652067726560448201527361746572207468616e20736574746c6554696d6560601b6064820152608490fd5b3461046d57602036600319011261046d57600435611dbc612d87565b611dc581612cf8565b5090611dd081612c7b565b509081549283421115611f47576008830190815460ff8160a01c16600581101561043157600103611ef257611ebd61073c6107e260039888611e80600596611e5689662386f26fc1000061075860019f60070196600160026301e13380611e49836107529460a01b039e8f8d54169d60018701546130ba565b0492015494548095613300565b93866305f5e100611e70611e6a8c5461309c565b88613300565b0492168760025460081c16613639565b919092808311600014611ee657916107cf611e9e611eaf94836130ba565b80938f8980915416915416906131a4565b6004870155888601546130ba565b910155805460ff60a01b191660a085901b179055600080516020613be7833981519152600080a4005b505060048701556107d9565b60405162461bcd60e51b815260206004820152602760248201527f6c69717569646174653a20706f6f6c207374617465206d75737420626520657860448201526632b1baba34b7b760c91b6064820152608490fd5b60405162461bcd60e51b815260206004820152602860248201527f6c69717569646174653a2074696d65206973206c657373207468616e20736574604482015267746c652074696d6560c01b6064820152608490fd5b3461046d57600036600319011261046d576003546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d57611fdf612ce2565b611fe7612d87565b6001600160a01b0390808216801561204a57600254928360081c167f4558149b3c5427365f76d4ff19bef30aba41f17e5e601d4661330d8d2b687627600080a3610100600160a81b031990911660089190911b610100600160a81b031617600255005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2073776170526f75746572206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b036120c0612ce2565b16600052600960205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b3461046d5760208060031936011261046d5760043561213d612fb3565b61214c60ff6002541615612ea5565b6121586101f782612c7b565b60ff600861216583612c7b565b50015460a01c16600581101561043157600114801561239d575b8015612377575b61218f90613158565b61219881612c7b565b50906121a381612cf8565b50903360005260098452604060002090600052835260406000208054908115612328576002019260ff845460081c166122e3576000906122066121fb6305f5e1006121f48754600686015490613300565b049461327b565b600583015490613313565b809361221c670de0b6b3a7640000928392613300565b600a8401546040516340c10f1960e01b81523360048201529290910460248301526001600160a01b03959194899186916044918391908a165af19081156116b6577f3ddafe3ebb4d0c818317027aabfa82dc9983942ceeb80523167e2de047b17fbd96600895612292936122c6575b5054613300565b04946122a58685600785015416336131a4565b805461ff001916610100179055015460405193845216923392a36001600055005b6122dc908b3d8d116116af576116a08183612d65565b508a61228b565b60405162461bcd60e51b815260048101869052601d60248201527f636c61696d426f72726f77203a20616c726561647920636c61696d65640000006044820152606490fd5b60405162461bcd60e51b815260048101869052602160248201527f636c61696d426f72726f77203a2063616e6e6f7420676574206a705f746f6b656044820152603760f91b6064820152608490fd5b5060ff600861238583612c7b565b50015460a01c16600581101561043157600314612186565b5060ff60086123ab83612c7b565b50015460a01c1660058110156104315760021461217f565b3461046d576123d136612ccc565b906123da612fb3565b6123e960ff6002541615612ea5565b60ff60086123f683612c7b565b50015460a01c1660058110156104315760021480156126a4575b6124199061337a565b61242c61242582612c7b565b5091612cf8565b5091801561265f576009820154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b039290919086908290604490829060009088165af180156116b657612642575b5061248c81546102db8561327b565b906008850160ff815460a01c16600581101561043157600214612589575b5460a01c60ff166005811015610431576003146124c9575b6001600055005b84544210612538576124ea6007926004670de0b6b3a7640000930154613300565b0493016124fb8483835416336131a4565b5416926040519283528201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a38080808080806124c2565b60405162461bcd60e51b8152600481018790526024808201527f77697468647261774c656e64203a206c657373207468616e20736574746c652060448201526374696d6560e01b6064820152608490fd5b600186015442106125fd5760ff90670de0b6b3a76400006125ae856002860154613300565b0485600789016125c28383835416336131a4565b541690604051908152878a8201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a390506124aa565b60405162461bcd60e51b815260048101889052601b60248201527f77697468647261774c656e64203a206e6f7420656e642074696d6500000000006044820152606490fd5b61265890863d88116116af576116a08183612d65565b508561247d565b60405162461bcd60e51b815260206004820152601f60248201527f77697468647261774c656e64203a207370416d6f756e74206973207a65726f006044820152606490fd5b5060ff60086126b283612c7b565b50015460a01c16600581101561043157600314612410565b3461046d576126d836612ccc565b6126e0612fb3565b6126ef60ff6002541615612ea5565b60ff60086126fc84612c7b565b50015460a01c1660058110156104315760021480156129da575b61271f9061337a565b61273261272b83612c7b565b5092612cf8565b5090801561298557600a830154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b0394929091908690829060449082906000908a165af180156116b657612968575b506127a76305f5e10061279d8454600685015490613300565b046102db8561327b565b6008820192835460ff8160a01c166005811015610431576002146128a9575b5083549260ff8460a01c166005811015610431576003146127e8576001600055005b5442106128565791670de0b6b3a764000061280c6128179360058997960154613300565b0495869116336131a4565b5416926040519283528201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a380808080808080806124c2565b60405162461bcd60e51b815260048101889052602560248201527f7769746864726177426f72726f77203a206c657373207468616e206d617463686044820152642074696d6560d81b6064820152608490fd5b60018401544210612917576128db8791670de0b6b3a76400006128d0866003870154613300565b0492839116336131a4565b868554169060405190815286898201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a3876127c6565b60405162461bcd60e51b815260048101899052602360248201527f7769746864726177426f72726f77203a206c657373207468616e20656e642074604482015262696d6560e81b6064820152608490fd5b61297e90863d88116116af576116a08183612d65565b5085612784565b60405162461bcd60e51b815260206004820152602760248201527f7769746864726177426f72726f773a20776974686472617720616d6f756e74206044820152666973207a65726f60c81b6064820152608490fd5b5060ff60086129e884612c7b565b50015460a01c16600581101561043157600314612716565b612a0936612ccc565b612a11612fb3565b612a2060ff6002541615612ea5565b612a2c610f6f83612c7b565b60ff6008612a3984612c7b565b50015460a01c16600581101561043157612a539015612f56565b612a5c82612c7b565b509133600052600960205260406000209060005260205260406000206008830160018060a01b0391612a918484845416612fd6565b948515612b295760028201805461ffff191690558254600592908516612b0957612abd815434906130ad565b905501612acb3482546130ad565b90555b54169160405191825260208201527f1d7b72e666a0b6217efe7cfa1b604ea5c7b39219563ce48b30c9da77045247a560403392a36001600055005b612b148682546130ad565b905501612b228482546130ad565b9055612ace565b60405162461bcd60e51b815260206004820152602560248201527f6465706f736974426f72726f773a206465706f73697420616d6f756e74206973604482015264207a65726f60d81b6064820152608490fd5b3461046d57602036600319011261046d576020612b9a600435612c7b565b5054421015604051908152f35b3461046d57602036600319011261046d5760043560075481101561046d57612bce90612c7b565b508054600182015460028301549260ff60038201546004830154600584015490600685015460018060a01b039283600788015416926008880154958560098a0154169b600b87600a8c0154169a01549a6040519c8d5260208d015260408c015260608b015260808a015260a089015260c088015260e0870152811661010086015260a01c16936005851015610431576101a094610120850152610140840152610160830152610180820152f35b600754811015612cb657600c906007600052027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b634e487b7160e01b600052603260045260246000fd5b604090600319011261046d576004359060243590565b600435906001600160a01b038216820361046d57565b600854811015612cb6576006906008600052027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b6060810190811067ffffffffffffffff821117612d4f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117612d4f57604052565b604051602090818101903360601b82523060601b603482015260288152612dad81612d33565b5190207f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb4754604051630f5d50b360e11b81526004810192909252600060248301528290829060449082906001600160a01b03165afa9081156116b657600091612e75575b5015612e1a5750565b6084906040519062461bcd60e51b82526004820152602e60248201527f6d756c74695369676e6174757265436c69656e74203a2054686973207478206960448201526d1cc81b9bdd08185c1c9c9bdd995960921b6064820152fd5b908282813d8311612e9e575b612e8b8183612d65565b81010312612e9b57505138612e11565b80fd5b503d612e81565b15612eac57565b60405162461bcd60e51b815260206004820152602560248201527f506c65646765506f6f6c203a205374616b6520686173206265656e2073757370604482015264195b99195960da1b6064820152608490fd5b15612f0657565b60405162461bcd60e51b815260206004820152602260248201527f506c65646765506f6f6c203a204c657373207468616e20736574746c652074696044820152616d6560f01b6064820152608490fd5b15612f5d57565b60405162461bcd60e51b815260206004820152602860248201527f73746174653a20506f6f6c20737461747573206973206e6f7420657175616c206044820152670e8de40dac2e8c6d60c31b6064820152608490fd5b600260005414612fc4576002600055565b604051633ee5aeb560e01b8152600490fd5b6001600160a01b031680612fea5750503490565b81612ff3575090565b6040516323b872dd60e01b60208201523360248201523060448201526064808201849052815260a081019167ffffffffffffffff831182841017612d4f5761303d92604052613040565b90565b906000602091828151910182855af1156116b6576000513d61309357506001600160a01b0381163b155b6130715750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b6001141561306a565b6305f5e10081019081106118945790565b9081019081106118945790565b9081039081116130c75790565b60405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606490fd5b1561311357565b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a20416674657220736574746c652074696d6500006044820152606490fd5b1561315f57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a206e6f74206d6174636820616e6420756e646f6e6500000000006044820152606490fd5b6001600160a01b039182169291908361320c578260008115613203575b6000808093819387871690f1156116b6577fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9916020915b6040519485521692a3565b506108fc6131c1565b60405163a9059cbb60e01b6020808301919091528383166001600160a01b03166024830152604480830186905282527fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9939092909161327690613270606482612d65565b87613040565b6131f8565b670de0b6b3a7640000908181029181159183041417156132985790565b60405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608490fd5b6305f5e100908181029181159183041417156132985790565b8181029181159183041417156132985790565b811561331d570490565b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206469766973696f6e206f766572666c6f7700000000006044820152606490fd5b9081602091031261046d5751801515810361046d5790565b1561338157565b60405162461bcd60e51b815260206004820152601960248201527f73746174653a2066696e697368206c69717569646174696f6e000000000000006044820152606490fd5b156133cd57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a207374617465206d75737420626520756e646f6e6500000000006044820152606490fd5b916305f5e10061342561303d9483613300565b04918280613435575b50506130ba565b60035461344b92906001600160a01b03166131a4565b388261342e565b805115612cb65760200190565b805160011015612cb65760400190565b8051821015612cb65760209160051b010190565b90602090818382031261046d57825167ffffffffffffffff9384821161046d570181601f8201121561046d578051938411612d4f578360051b90604051946134cd85840187612d65565b8552838086019282010192831161046d578301905b8282106134f0575050505090565b815181529083019083016134e2565b6040805167ffffffffffffffff9281830184811183821017612d4f5761352b9284918252369037612c7b565b509080519161353983612d33565b600283526020926008848201928436853760078101546001600160a01b039283929091831661356786613452565b520154166135748361345f565b52600454169083519283916304e59d2760e11b835260248301908760048501525180915260448301919060005b88828210613622575050505091818060009403915afa908115613617576000916135f6575b5081519384830190811185821017612d4f576135ee92526135e681613452565b51845261345f565b519082015290565b613611913d8091833e6136098183612d65565b810190613483565b386135c6565b82513d6000823e3d90fd5b8351855287955093840193909201916001016135a1565b9392909190600081156139115750600061368191613658848689613975565b9060405193849283926307c0329d60e21b84526004840152604060248401526044830190613919565b03816001600160a01b0389165afa80156116b6576136a7916000916138f8575b50613452565b51935b6001600160a01b03838116928315906136da9082156138e9575b8381169687159485156138da575b861695613975565b91600091156137e457505090601e4201918242116137b5576000916137249188604051809681958294637ff36ab560e01b8452886004850152608060248501526084840190613919565b90306044840152606483015203925af19081156116b6576000916137cb575b50915b61374f83613452565b5183516000199391908481019081116137b5577ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235916137906040928861346f565b5182519182526020820152a381519081019081116137b5576137b19161346f565b5190565b634e487b7160e01b600052601160045260246000fd5b6137de913d8091833e6136098183612d65565b38613743565b156138505750601e42018042116137b55761381d92876000809460405196879586948593632512eca560e11b8552309160048601613a93565b03925af19081156116b657600091613837575b5091613746565b61384a913d8091833e6136098183612d65565b38613830565b91601e4201918242116138c657918391888361388595604051968795869485936338ed173960e01b8552309160048601613a93565b03925af19182156138ba57809261389f575b505091613746565b6138b392503d8091833e6136098183612d65565b3880613897565b604051903d90823e3d90fd5b634e487b7160e01b84526011600452602484fd5b6138e48784613acd565b6136d2565b6138f38588613acd565b6136c4565b61390b913d8091833e6136098183612d65565b386136a1565b9050936136aa565b90815180825260208080930193019160005b828110613939575050505090565b83516001600160a01b03168552938101939281019260010161392b565b9081602091031261046d57516001600160a01b038116810361046d5790565b604080519294936001600160a01b0392831661399085612d33565b60028552602091833684880137859785811615600014613a8e575083516315ab88c960e31b81528381600481865afa908115613a8357600091613a66575b505b856139da88613452565b91169052808516613a58575090806004928451938480926315ab88c960e31b82525afa928315613a4e575090613a1b9291600092613a21575b50509261345f565b91169052565b613a409250803d10613a47575b613a388183612d65565b810190613956565b3880613a13565b503d613a2e565b513d6000823e3d90fd5b915050613a1b91509261345f565b613a7d9150843d8611613a4757613a388183612d65565b386139ce565b85513d6000823e3d90fd5b6139d0565b90608092613ab9919695949683526000602084015260a0604084015260a0830190613919565b6001600160a01b0390951660608201520152565b60405163095ea7b360e01b60208083019182526001600160a01b039094166024830152600019604480840191909152825267ffffffffffffffff92916080810184811182821017612d4f57604052600092839283809351925af1913d15613bdd573d908111613bc95760405190613b4d601f8201601f1916860183612d65565b81528091843d92013e5b81613b99575b5015613b665750565b6064906040519062461bcd60e51b82526004820152600c60248201526b2173616665417070726f766560a01b6044820152fd5b80518015925083908315613bb1575b50505038613b5d565b613bc19350820181019101613362565b388281613ba8565b634e487b7160e01b82526041600452602482fd5b50506060613b5756fe516112f3bf06e373fcea44db364769c04cc7ef4392e6de95d2b250720bcacefba26469706673582212205bc7ac1966f51929369415b8d7abd0aeed8de2823d02bbbd330b641d83c0931a64736f6c63430008140033",
      "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80630d6abfc114612ba757806314c090cc14612b7c57806316f941b514612a005780631e107979146126ca57806338f2aa76146123c35780633ab4a445146121205780633c9fadc31461209f5780634127365714611fc65780634127535814611f9d578063415f124014611da0578063459b911c146119605780634aea0aec1461194257806352f7c988146118fc57806361a552dc146118d957806362faecf41461180e578063638c7e17146117c65780636abd7f29146117985780636c42fed2146115155780636de6ff3a146114f75780637dc0d1d0146114ce5780638705fcd41461140a578063897b0637146113755780638df828001461114f57806390590da014610f43578063981b48a614610ed95780639b2cb5d814610ebb5780639d71488e14610e80578063a62ff16414610c11578063b159751714610bd6578063bb176a6414610b51578063bf38b8f614610973578063c31c9c0714610946578063c9333756146108ff578063d353a1cb1461069c578063d431b1ac1461066b578063e271fa0c14610490578063e626648a146104725763eec8d506146101be57600080fd5b3461046d5760208060031936011261046d57600435906101dc612fb3565b6101eb60ff6002541615612ea5565b6102016101f783612c7b565b505442101561310c565b60ff600861020e84612c7b565b50015460a01c166005811015610431576001148015610447575b801561040b575b61023890613158565b61024182612c7b565b5061024b83612cf8565b509233600052600a8352604060002090600052825260406000209081549081156103c657600481015494549061028182876130ba565b1561038157600284019182549360ff851661033c57670de0b6b3a76400006102eb896102e66007956102e07fc3e20279d41b3ed21d277920877e5e5c6665bf6aca607046a3fe0fd2bd6bda7d9b9c9d6102db60019861327b565b613313565b926130ba565b613300565b04960191868355600160ff1980961617845501916001808060a01b03946103168887875416336131a4565b8254161790556103278154866130ad565b90555416926040519283523392a36001600055005b60405162461bcd60e51b815260048101889052601d60248201527f726566756e644c656e64203a20616c726561647920726566756e6465640000006044820152606490fd5b60405162461bcd60e51b815260048101869052601760248201527f726566756e644c656e64203a206e6f7420726566756e640000000000000000006044820152606490fd5b60405162461bcd60e51b815260048101859052601860248201527f726566756e644c656e64203a206e6f7420706c656467656400000000000000006044820152606490fd5b5060ff600861041984612c7b565b50015460a01c1660058110156104315760031461022f565b634e487b7160e01b600052602160045260246000fd5b5060ff600861045584612c7b565b50015460a01c16600581101561043157600214610228565b600080fd5b3461046d57600036600319011261046d576020600654604051908152f35b3461046d5760208060031936011261046d57600435906104ae612fb3565b6104bd60ff6002541615612ea5565b60ff60086104ca84612c7b565b50015460a01c1660058110156104315760046104e691146133c6565b6104ef82612c7b565b5091600583015415610613573360005260098252604060002090600052815260406000209182549081156105ce57600284019060ff8254166105895760080180547f5a06c7de92f1dc59e8cba872927d016c80ce5f0fb2295c898dfb7a2f08e43fb1936001600160a01b03939161056991908516336131a4565b600160ff1982541617905554169254916040519283523392a36001600055005b60405162461bcd60e51b815260048101859052601a60248201527f726566756e64426f72726f773a20616761696e20726566756e640000000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601960248201527f726566756e64426f72726f773a206e6f7420706c6564676564000000000000006044820152606490fd5b60405162461bcd60e51b815260048101839052602a60248201527f656d657267656e6379426f72726f775769746864726177616c203a206e6f74206044820152691dda5d1a191c985dd85b60b21b6064820152608490fd5b3461046d57600036600319011261046d57610684612d87565b60025460ff80821615169060ff191617600255600080f35b3461046d57602036600319011261046d576004356106b8612d87565b6106c181612c7b565b50906106cc81612cf8565b509060016106d982612c7b565b50015442106108ba576008830180549260ff8460a01c16600581101561043157600103610869576007850161078a60018060a01b039561075f8784541698662386f26fc1000061075860026301e1338061074161073c60018701548754906130ba565b6132e7565b049301549261075289548095613300565b90613300565b04906130ad565b97876305f5e10061077a61077460055461309c565b8c613300565b0492168860025460081c16613639565b919095878310610824576107e2600197846107f0948b60029c6003981160001461081957916107cf6107bf6107d494836130ba565b809388808c5416915416906131a4565b6130ba565b8a8701555b888601546130ba565b906006549086541690613412565b910155805460ff60a01b191660a184901b179055600080516020613be7833981519152600080a4005b50508a8701556107d9565b60405162461bcd60e51b815260206004820152601c60248201527f66696e6973683a20536c69707061676520697320746f6f2068696768000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526024808201527f66696e6973683a20706f6f6c207374617465206d7573742062652065786563756044820152633a34b7b760e11b6064820152608490fd5b60405162461bcd60e51b815260206004820152601a60248201527f66696e6973683a206c657373207468616e20656e642074696d650000000000006044820152606490fd5b3461046d5760208060031936011261046d5761091c6004356134ff565b604051916000835b6002821061093157604085f35b82806001928651815201940191019092610924565b3461046d57600036600319011261046d5760025460405160089190911c6001600160a01b03168152602090f35b3461046d5760208060031936011261046d5760043590610991612fb3565b6109a060ff6002541615612ea5565b60ff60086109ad84612c7b565b50015460a01c1660058110156104315760046109c991146133c6565b6109d282612c7b565b5091600483015415610af75733600052600a825260406000209060005281526040600020918254908115610aa457600284019060ff825416610a4c5760070180547f71d14c5f08cb34cbfb59c06ea5151aafbf742d0b6ed00fdb83addd9afb5c0fd0936001600160a01b03939161056991908516336131a4565b60405162461bcd60e51b815260048101859052602a60248201527f656d657267656e63794c656e645769746864726177616c203a20616c726561646044820152691e481c99599d5b99195960b21b6064820152608490fd5b60405162461bcd60e51b815260048101849052602560248201527f656d657267656e63794c656e645769746864726177616c203a206e6f7420706c604482015264195919d95960da1b6064820152608490fd5b60405162461bcd60e51b815260048101839052602c60248201527f656d657267656e63794c656e645769746864726177616c203a206c656e64537560448201526b70706c79206973207a65726f60a01b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b03610b72612ce2565b16600052600a60205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b0390f35b3461046d57602036600319011261046d5760ff6008610bf6600435612c7b565b50015460a01c16600581101561043157602090604051908152f35b3461046d5760208060031936011261046d57600435610c2e612fb3565b610c3d60ff6002541615612ea5565b610c496101f782612c7b565b60ff6008610c5683612c7b565b50015460a01c166005811015610431576001148015610e5a575b8015610e34575b610c8090613158565b610c8981612c7b565b5090610c9481612cf8565b5090336000526009845260406000209060005283526040600020906001600584015491015491610cc483836130ba565b15610def578054918215610daa57600282019384549360ff8516610d65579360019693670de0b6b3a7640000610d2a856102e68b966102e07f732816f48de550f238bd0d4f5b79819c7b24a49d6132928978e3cd36568dd5db9c996102db60089d61327b565b04970187905560ff19161790550180546001600160a01b039190610d529085908416336131a4565b5416926040519283523392a36001600055005b60405162461bcd60e51b815260048101899052601f60248201527f726566756e64426f72726f77203a20616c726561647920726566756e646564006044820152606490fd5b60405162461bcd60e51b815260048101879052601a60248201527f726566756e64426f72726f77203a206e6f7420706c65646765640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601960248201527f726566756e64426f72726f77203a206e6f7420726566756e64000000000000006044820152606490fd5b5060ff6008610e4283612c7b565b50015460a01c16600581101561043157600314610c77565b5060ff6008610e6883612c7b565b50015460a01c16600581101561043157600214610c70565b3461046d57600036600319011261046d5760206040517f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb478152f35b3461046d57600036600319011261046d576020600154604051908152f35b3461046d57602036600319011261046d5760043560085481101561046d57610f0260c091612cf8565b5080549060018101549060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b610f4c36612ccc565b610f54612fb3565b610f6360ff6002541615612ea5565b610f78610f6f83612c7b565b50544210612eff565b60ff6008610f8584612c7b565b50015460a01c16600581101561043157610f9f9015612f56565b610fa882612c7b565b509133600052600a602052604060002090600052602052604060002091600381015490610fdb60048201928354906130ba565b83116110ee5760070180546001600160a01b039290610ffd9085908516612fd6565b946001548611156110935760028101805461ffff191690558254841661107457611029815434906130ad565b90556110363482546130ad565b90555b54169160405191825260208201527f129e8c18c2f7baf99c7eb257934c21f038c72412803512dcf0a942a4562a82ea60403392a36001600055005b61107f8682546130ad565b905561108c8582546130ad565b9055611039565b60405162461bcd60e51b815260206004820152602d60248201527f6465706f7369744c656e643a20616d6f756e74206c657373207468616e206d6960448201526c1b9a5b5d5b4819195c1bdcda5d609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603360248201527f6465706f7369744c656e64203a207374616b65416d6f756e742069732067726560448201527261746572207468616e206d6178537570706c7960681b6064820152608490fd5b3461046d57602036600319011261046d5760043561116b612d87565b61117481612c7b565b509061117f81612cf8565b5061118982612c7b565b50544210611322576008830190815460ff8160a01c166005811015610431576112de576004850190815490811515806112d1575b1561129357505090600180958594936111d76000976134ff565b91602083016111f16111e9825161327b565b855190613313565b936112236006611218670de0b6b3a764000061121260058801998a54613300565b046132e7565b940193845490613313565b9354918483118b1461125f57505050508355549101555b805460ff60a01b191660a085901b179055600080516020613be78339815191528280a4005b61128b95506102db9394509061127b61128392848a55516132e7565b905190613313565b925490613300565b91015561123a565b60ff60a01b1916600160a21b179093555090815560059092015460019290920191909155600490600090600080516020613be78339815191528280a4005b50600587015415156111bd565b606460405162461bcd60e51b815260206004820152602060248201527f736574746c653a20706f6f6c207374617465206d757374206265204d415443486044820152fd5b60405162461bcd60e51b815260206004820152602560248201527f736574746c653a2074696d65206973206c657373207468616e20736574746c656044820152642074696d6560d81b6064820152608490fd5b3461046d57602036600319011261046d57600435611391612d87565b80156113c557806001547ffa6189b739625142c695478e9d0095a1cb9e6fad92ad8a727e0055a5cc85b06b600080a3600155005b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a206d696e416d6f756e74206973207a65726f00006044820152606490fd5b3461046d57602036600319011261046d57611423612ce2565b61142b612d87565b6001600160a01b0390811690811561147957816003549182167fd44190acf9d04bdb5d3a1aafff7e6dee8b40b93dfb8c5d3f0eea4b9f4539c3f7600080a36001600160a01b03191617600355005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2066656541646472657373206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57600036600319011261046d576004546040516001600160a01b039091168152602090f35b3461046d57600036600319011261046d576020600754604051908152f35b3461046d5760208060031936011261046d57600435611532612fb3565b61154160ff6002541615612ea5565b61154d6101f782612c7b565b60ff600861155a83612c7b565b50015460a01c166005811015610431576001148015611772575b801561174c575b61158490613158565b61158d81612c7b565b5061159782612cf8565b509133600052600a845260406000209060005283526040600020918254928315611707576002019260ff845460081c166116c257670de0b6b3a7640000916115ef6115e46115f69361327b565b600486015490613313565b9054613300565b60098301546040516340c10f1960e01b815233600482015292909104602483018190529391926001600160a01b03929186908590604490829060009088165af19182156116b6577f6f4dd2687b3c3bfa99d39742b01d6e0ad9604c48559791d5df4ff5df44b41dfd94600793611689575b50805461ff001916610100179055015460405193845216923392a36001600055005b6116a890883d8a116116af575b6116a08183612d65565b810190613362565b5087611667565b503d611696565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260048101869052601a60248201527f636c61696d4c656e64203a616c726561647920636c61696d65640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601e60248201527f636c61696d4c656e64203a63616e6e6f74206765742073705f746f6b656e00006044820152606490fd5b5060ff600861175a83612c7b565b50015460a01c1660058110156104315760031461157b565b5060ff600861178083612c7b565b50015460a01c16600581101561043157600214611574565b3461046d57602036600319011261046d57602060016117b8600435612c7b565b500154421015604051908152f35b3461046d57600036600319011261046d577f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb47546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d5760043561182b81612c7b565b5090600b670de0b6b3a764000061186861185e61185161184a86612cf8565b50956134ff565b61127b602082015161327b565b6001850154613300565b0491549201546305f5e100908101928184106118945760209361188a91613300565b0411604051908152f35b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606490fd5b3461046d57600036600319011261046d57602060ff600254166040519015158152f35b3461046d5761190a36612ccc565b90611913612d87565b80600555816006557f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5600080a3005b3461046d57600036600319011261046d576020600554604051908152f35b3461046d576101408060031936011261046d5760249060043590823560a4356001600160a01b0381169081900361046d5760c4356001600160a01b0381169081900361046d5760e4356001600160a01b038116929083900361046d57610104356001600160a01b038116949085900361046d576119db612d87565b86811115611d3f578415611cee578315611c9d57604051966101a0880188811067ffffffffffffffff821117611c8857604052875260208701526044356040870152606435606087015260006080870152600060a087015260843560c087015260e086015261010085015260006101208501528284015261016083015261012435610180830152600754600160401b811015611c7357806001611a819201600755612c7b565b929092611c5e57805183556020810151600184015560408101516002840155606081015160038401556080810151600484015560a0810151600584015560c08101516006840155600783019060018060a01b0360e082015116916bffffffffffffffffffffffff60a01b9283825416179055600884019160018060a01b036101008301511693835493610120840151946005861015611c49576001600160a81b03191690951760a09490941b60ff60a01b16939093179093559081015160098401805484166001600160a01b03928316179055610160820151600a850180549094169116179091556101800151600b919091015560405160c0810167ffffffffffffffff811182821017611c34576040526000815260208101600081526040820160008152606083016000815260808401916000835260a085019360008552600854600160401b811015611c1f57806001611bdf9201600855612cf8565b969096611c0a5751865551600186015551600285015551600384015551600483015551600590910155005b87634e487b7160e01b60005260006004526000fd5b87634e487b7160e01b60005260416004526000fd5b82634e487b7160e01b60005260416004526000fd5b88634e487b7160e01b60005260216004526000fd5b83634e487b7160e01b60005260006004526000fd5b83634e487b7160e01b60005260416004526000fd5b89634e487b7160e01b60005260416004526000fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a207370546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a206a70546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526034818a01527f637265617465506f6f6c203a20656e6454696d65206d7573742062652067726560448201527361746572207468616e20736574746c6554696d6560601b6064820152608490fd5b3461046d57602036600319011261046d57600435611dbc612d87565b611dc581612cf8565b5090611dd081612c7b565b509081549283421115611f47576008830190815460ff8160a01c16600581101561043157600103611ef257611ebd61073c6107e260039888611e80600596611e5689662386f26fc1000061075860019f60070196600160026301e13380611e49836107529460a01b039e8f8d54169d60018701546130ba565b0492015494548095613300565b93866305f5e100611e70611e6a8c5461309c565b88613300565b0492168760025460081c16613639565b919092808311600014611ee657916107cf611e9e611eaf94836130ba565b80938f8980915416915416906131a4565b6004870155888601546130ba565b910155805460ff60a01b191660a085901b179055600080516020613be7833981519152600080a4005b505060048701556107d9565b60405162461bcd60e51b815260206004820152602760248201527f6c69717569646174653a20706f6f6c207374617465206d75737420626520657860448201526632b1baba34b7b760c91b6064820152608490fd5b60405162461bcd60e51b815260206004820152602860248201527f6c69717569646174653a2074696d65206973206c657373207468616e20736574604482015267746c652074696d6560c01b6064820152608490fd5b3461046d57600036600319011261046d576003546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d57611fdf612ce2565b611fe7612d87565b6001600160a01b0390808216801561204a57600254928360081c167f4558149b3c5427365f76d4ff19bef30aba41f17e5e601d4661330d8d2b687627600080a3610100600160a81b031990911660089190911b610100600160a81b031617600255005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2073776170526f75746572206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b036120c0612ce2565b16600052600960205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b3461046d5760208060031936011261046d5760043561213d612fb3565b61214c60ff6002541615612ea5565b6121586101f782612c7b565b60ff600861216583612c7b565b50015460a01c16600581101561043157600114801561239d575b8015612377575b61218f90613158565b61219881612c7b565b50906121a381612cf8565b50903360005260098452604060002090600052835260406000208054908115612328576002019260ff845460081c166122e3576000906122066121fb6305f5e1006121f48754600686015490613300565b049461327b565b600583015490613313565b809361221c670de0b6b3a7640000928392613300565b600a8401546040516340c10f1960e01b81523360048201529290910460248301526001600160a01b03959194899186916044918391908a165af19081156116b6577f3ddafe3ebb4d0c818317027aabfa82dc9983942ceeb80523167e2de047b17fbd96600895612292936122c6575b5054613300565b04946122a58685600785015416336131a4565b805461ff001916610100179055015460405193845216923392a36001600055005b6122dc908b3d8d116116af576116a08183612d65565b508a61228b565b60405162461bcd60e51b815260048101869052601d60248201527f636c61696d426f72726f77203a20616c726561647920636c61696d65640000006044820152606490fd5b60405162461bcd60e51b815260048101869052602160248201527f636c61696d426f72726f77203a2063616e6e6f7420676574206a705f746f6b656044820152603760f91b6064820152608490fd5b5060ff600861238583612c7b565b50015460a01c16600581101561043157600314612186565b5060ff60086123ab83612c7b565b50015460a01c1660058110156104315760021461217f565b3461046d576123d136612ccc565b906123da612fb3565b6123e960ff6002541615612ea5565b60ff60086123f683612c7b565b50015460a01c1660058110156104315760021480156126a4575b6124199061337a565b61242c61242582612c7b565b5091612cf8565b5091801561265f576009820154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b039290919086908290604490829060009088165af180156116b657612642575b5061248c81546102db8561327b565b906008850160ff815460a01c16600581101561043157600214612589575b5460a01c60ff166005811015610431576003146124c9575b6001600055005b84544210612538576124ea6007926004670de0b6b3a7640000930154613300565b0493016124fb8483835416336131a4565b5416926040519283528201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a38080808080806124c2565b60405162461bcd60e51b8152600481018790526024808201527f77697468647261774c656e64203a206c657373207468616e20736574746c652060448201526374696d6560e01b6064820152608490fd5b600186015442106125fd5760ff90670de0b6b3a76400006125ae856002860154613300565b0485600789016125c28383835416336131a4565b541690604051908152878a8201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a390506124aa565b60405162461bcd60e51b815260048101889052601b60248201527f77697468647261774c656e64203a206e6f7420656e642074696d6500000000006044820152606490fd5b61265890863d88116116af576116a08183612d65565b508561247d565b60405162461bcd60e51b815260206004820152601f60248201527f77697468647261774c656e64203a207370416d6f756e74206973207a65726f006044820152606490fd5b5060ff60086126b283612c7b565b50015460a01c16600581101561043157600314612410565b3461046d576126d836612ccc565b6126e0612fb3565b6126ef60ff6002541615612ea5565b60ff60086126fc84612c7b565b50015460a01c1660058110156104315760021480156129da575b61271f9061337a565b61273261272b83612c7b565b5092612cf8565b5090801561298557600a830154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b0394929091908690829060449082906000908a165af180156116b657612968575b506127a76305f5e10061279d8454600685015490613300565b046102db8561327b565b6008820192835460ff8160a01c166005811015610431576002146128a9575b5083549260ff8460a01c166005811015610431576003146127e8576001600055005b5442106128565791670de0b6b3a764000061280c6128179360058997960154613300565b0495869116336131a4565b5416926040519283528201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a380808080808080806124c2565b60405162461bcd60e51b815260048101889052602560248201527f7769746864726177426f72726f77203a206c657373207468616e206d617463686044820152642074696d6560d81b6064820152608490fd5b60018401544210612917576128db8791670de0b6b3a76400006128d0866003870154613300565b0492839116336131a4565b868554169060405190815286898201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a3876127c6565b60405162461bcd60e51b815260048101899052602360248201527f7769746864726177426f72726f77203a206c657373207468616e20656e642074604482015262696d6560e81b6064820152608490fd5b61297e90863d88116116af576116a08183612d65565b5085612784565b60405162461bcd60e51b815260206004820152602760248201527f7769746864726177426f72726f773a20776974686472617720616d6f756e74206044820152666973207a65726f60c81b6064820152608490fd5b5060ff60086129e884612c7b565b50015460a01c16600581101561043157600314612716565b612a0936612ccc565b612a11612fb3565b612a2060ff6002541615612ea5565b612a2c610f6f83612c7b565b60ff6008612a3984612c7b565b50015460a01c16600581101561043157612a539015612f56565b612a5c82612c7b565b509133600052600960205260406000209060005260205260406000206008830160018060a01b0391612a918484845416612fd6565b948515612b295760028201805461ffff191690558254600592908516612b0957612abd815434906130ad565b905501612acb3482546130ad565b90555b54169160405191825260208201527f1d7b72e666a0b6217efe7cfa1b604ea5c7b39219563ce48b30c9da77045247a560403392a36001600055005b612b148682546130ad565b905501612b228482546130ad565b9055612ace565b60405162461bcd60e51b815260206004820152602560248201527f6465706f736974426f72726f773a206465706f73697420616d6f756e74206973604482015264207a65726f60d81b6064820152608490fd5b3461046d57602036600319011261046d576020612b9a600435612c7b565b5054421015604051908152f35b3461046d57602036600319011261046d5760043560075481101561046d57612bce90612c7b565b508054600182015460028301549260ff60038201546004830154600584015490600685015460018060a01b039283600788015416926008880154958560098a0154169b600b87600a8c0154169a01549a6040519c8d5260208d015260408c015260608b015260808a015260a089015260c088015260e0870152811661010086015260a01c16936005851015610431576101a094610120850152610140840152610160830152610180820152f35b600754811015612cb657600c906007600052027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b634e487b7160e01b600052603260045260246000fd5b604090600319011261046d576004359060243590565b600435906001600160a01b038216820361046d57565b600854811015612cb6576006906008600052027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b6060810190811067ffffffffffffffff821117612d4f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117612d4f57604052565b604051602090818101903360601b82523060601b603482015260288152612dad81612d33565b5190207f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb4754604051630f5d50b360e11b81526004810192909252600060248301528290829060449082906001600160a01b03165afa9081156116b657600091612e75575b5015612e1a5750565b6084906040519062461bcd60e51b82526004820152602e60248201527f6d756c74695369676e6174757265436c69656e74203a2054686973207478206960448201526d1cc81b9bdd08185c1c9c9bdd995960921b6064820152fd5b908282813d8311612e9e575b612e8b8183612d65565b81010312612e9b57505138612e11565b80fd5b503d612e81565b15612eac57565b60405162461bcd60e51b815260206004820152602560248201527f506c65646765506f6f6c203a205374616b6520686173206265656e2073757370604482015264195b99195960da1b6064820152608490fd5b15612f0657565b60405162461bcd60e51b815260206004820152602260248201527f506c65646765506f6f6c203a204c657373207468616e20736574746c652074696044820152616d6560f01b6064820152608490fd5b15612f5d57565b60405162461bcd60e51b815260206004820152602860248201527f73746174653a20506f6f6c20737461747573206973206e6f7420657175616c206044820152670e8de40dac2e8c6d60c31b6064820152608490fd5b600260005414612fc4576002600055565b604051633ee5aeb560e01b8152600490fd5b6001600160a01b031680612fea5750503490565b81612ff3575090565b6040516323b872dd60e01b60208201523360248201523060448201526064808201849052815260a081019167ffffffffffffffff831182841017612d4f5761303d92604052613040565b90565b906000602091828151910182855af1156116b6576000513d61309357506001600160a01b0381163b155b6130715750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b6001141561306a565b6305f5e10081019081106118945790565b9081019081106118945790565b9081039081116130c75790565b60405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606490fd5b1561311357565b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a20416674657220736574746c652074696d6500006044820152606490fd5b1561315f57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a206e6f74206d6174636820616e6420756e646f6e6500000000006044820152606490fd5b6001600160a01b039182169291908361320c578260008115613203575b6000808093819387871690f1156116b6577fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9916020915b6040519485521692a3565b506108fc6131c1565b60405163a9059cbb60e01b6020808301919091528383166001600160a01b03166024830152604480830186905282527fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9939092909161327690613270606482612d65565b87613040565b6131f8565b670de0b6b3a7640000908181029181159183041417156132985790565b60405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608490fd5b6305f5e100908181029181159183041417156132985790565b8181029181159183041417156132985790565b811561331d570490565b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206469766973696f6e206f766572666c6f7700000000006044820152606490fd5b9081602091031261046d5751801515810361046d5790565b1561338157565b60405162461bcd60e51b815260206004820152601960248201527f73746174653a2066696e697368206c69717569646174696f6e000000000000006044820152606490fd5b156133cd57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a207374617465206d75737420626520756e646f6e6500000000006044820152606490fd5b916305f5e10061342561303d9483613300565b04918280613435575b50506130ba565b60035461344b92906001600160a01b03166131a4565b388261342e565b805115612cb65760200190565b805160011015612cb65760400190565b8051821015612cb65760209160051b010190565b90602090818382031261046d57825167ffffffffffffffff9384821161046d570181601f8201121561046d578051938411612d4f578360051b90604051946134cd85840187612d65565b8552838086019282010192831161046d578301905b8282106134f0575050505090565b815181529083019083016134e2565b6040805167ffffffffffffffff9281830184811183821017612d4f5761352b9284918252369037612c7b565b509080519161353983612d33565b600283526020926008848201928436853760078101546001600160a01b039283929091831661356786613452565b520154166135748361345f565b52600454169083519283916304e59d2760e11b835260248301908760048501525180915260448301919060005b88828210613622575050505091818060009403915afa908115613617576000916135f6575b5081519384830190811185821017612d4f576135ee92526135e681613452565b51845261345f565b519082015290565b613611913d8091833e6136098183612d65565b810190613483565b386135c6565b82513d6000823e3d90fd5b8351855287955093840193909201916001016135a1565b9392909190600081156139115750600061368191613658848689613975565b9060405193849283926307c0329d60e21b84526004840152604060248401526044830190613919565b03816001600160a01b0389165afa80156116b6576136a7916000916138f8575b50613452565b51935b6001600160a01b03838116928315906136da9082156138e9575b8381169687159485156138da575b861695613975565b91600091156137e457505090601e4201918242116137b5576000916137249188604051809681958294637ff36ab560e01b8452886004850152608060248501526084840190613919565b90306044840152606483015203925af19081156116b6576000916137cb575b50915b61374f83613452565b5183516000199391908481019081116137b5577ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235916137906040928861346f565b5182519182526020820152a381519081019081116137b5576137b19161346f565b5190565b634e487b7160e01b600052601160045260246000fd5b6137de913d8091833e6136098183612d65565b38613743565b156138505750601e42018042116137b55761381d92876000809460405196879586948593632512eca560e11b8552309160048601613a93565b03925af19081156116b657600091613837575b5091613746565b61384a913d8091833e6136098183612d65565b38613830565b91601e4201918242116138c657918391888361388595604051968795869485936338ed173960e01b8552309160048601613a93565b03925af19182156138ba57809261389f575b505091613746565b6138b392503d8091833e6136098183612d65565b3880613897565b604051903d90823e3d90fd5b634e487b7160e01b84526011600452602484fd5b6138e48784613acd565b6136d2565b6138f38588613acd565b6136c4565b61390b913d8091833e6136098183612d65565b386136a1565b9050936136aa565b90815180825260208080930193019160005b828110613939575050505090565b83516001600160a01b03168552938101939281019260010161392b565b9081602091031261046d57516001600160a01b038116810361046d5790565b604080519294936001600160a01b0392831661399085612d33565b60028552602091833684880137859785811615600014613a8e575083516315ab88c960e31b81528381600481865afa908115613a8357600091613a66575b505b856139da88613452565b91169052808516613a58575090806004928451938480926315ab88c960e31b82525afa928315613a4e575090613a1b9291600092613a21575b50509261345f565b91169052565b613a409250803d10613a47575b613a388183612d65565b810190613956565b3880613a13565b503d613a2e565b513d6000823e3d90fd5b915050613a1b91509261345f565b613a7d9150843d8611613a4757613a388183612d65565b386139ce565b85513d6000823e3d90fd5b6139d0565b90608092613ab9919695949683526000602084015260a0604084015260a0830190613919565b6001600160a01b0390951660608201520152565b60405163095ea7b360e01b60208083019182526001600160a01b039094166024830152600019604480840191909152825267ffffffffffffffff92916080810184811182821017612d4f57604052600092839283809351925af1913d15613bdd573d908111613bc95760405190613b4d601f8201601f1916860183612d65565b81528091843d92013e5b81613b99575b5015613b665750565b6064906040519062461bcd60e51b82526004820152600c60248201526b2173616665417070726f766560a01b6044820152fd5b80518015925083908315613bb1575b50505038613b5d565b613bc19350820181019101613362565b388281613ba8565b634e487b7160e01b82526041600452602482fd5b50506060613b5756fe516112f3bf06e373fcea44db364769c04cc7ef4392e6de95d2b250720bcacefba26469706673582212205bc7ac1966f51929369415b8d7abd0aeed8de2823d02bbbd330b641d83c0931a64736f6c63430008140033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "errors": {
          "ReentrancyGuardReentrantCall()": [
            {
              "details": "Unauthorized reentrant call."
            }
          ],
          "SafeERC20FailedOperation(address)": [
            {
              "details": "An operation with an ERC-20 token failed."
            }
          ]
        },
        "kind": "dev",
        "methods": {
          "checkoutLiquidation(uint256)": {
            "details": "检查清算条件,",
            "params": {
              "_pid": "是池子的索引"
            }
          },
          "claimBorrow(uint256)": {
            "details": "借款人接收 sp_token 和贷款资金",
            "params": {
              "_pid": "是池状态 | 函数           | 状态要求     | 时间要求 | 操作类型   | 代币处理 | 使用场景    | `claimBorrow` | EXECUTION/FINISH/LIQUIDATION | 结算后   | 领取贷款  | 铸造 JP 代币+转出借款| 获得借款资金  "
            }
          },
          "claimLend(uint256)": {
            "details": "存款人接收 sp_token,主要功能是让存款人领取 sp_token",
            "params": {
              "_pid": "是池索引  | 函数 | 角色 | 操作 | 目的 | | claimLend | 出借人 | 获得SP代币 | 获得资金凭证 |"
            }
          },
          "createPool(uint256,uint256,uint256,uint256,uint256,address,address,address,address,uint256)": {
            "details": "创建一个新的借贷池。函数接收一系列参数， 包括结算时间、结束时间、利率、最大供应量、抵押率、存入代币、借出代币、SP代币、JP代币和自动清算阈值。  Can only be called by the owner."
          },
          "depositBorrow(uint256,uint256)": {
            "details": "借款人质押操作",
            "params": {
              "_pid": "是池子索引",
              "_stakeAmount": "是用户质押的数量"
            }
          },
          "depositLend(uint256,uint256)": {
            "details": "出借人执行存款操作，将资金存入借贷池",
            "params": {
              "_pid": "是池索引 | 函数 | 状态要求 | 时间要求 | 操作类型 | 代币处理 | 使用场景 | | `depositLend` | MATCH | 结算前 | 存入资金 | 转入池中 | 提供借贷资金 |",
              "_stakeAmount": "是用户的质押金额"
            }
          },
          "emergencyBorrowWithdrawal(uint256)": {
            "details": "紧急借款提取",
            "params": {
              "_pid": "是池子的索引"
            }
          },
          "emergencyLendWithdrawal(uint256)": {
            "details": "出借人紧急提取存款，用于处理池异常情况",
            "params": {
              "_pid": "是池索引"
            }
          },
          "finish(uint256)": {
            "details": "完成一个借贷池的操作，包括计算利息、执行交换操作、赎回费用和更新池子状态等步骤。",
            "params": {
              "_pid": "是池子的索引"
            }
          },
          "liquidate(uint256)": {
            "details": "清算",
            "params": {
              "_pid": "是池子的索引"
            }
          },
          "refundBorrow(uint256)": {
            "details": "退还给借款人的超额抵押品",
            "params": {
              "_pid": "是池状态"
            }
          },
          "refundLend(uint256)": {
            "details": "退还过量存款给存款人",
            "params": {
              "_pid": "是池索引"
            }
          },
          "setFeeAddress(address)": {
            "details": "Set up the address to receive the handling fee"
          },
          "withdrawBorrow(uint256,uint256)": {
            "details": "借款人赎回质押",
            "params": {
              "_jpAmount": "是用户销毁JPtoken的数量",
              "_pid": "是池状态"
            }
          },
          "withdrawLend(uint256,uint256)": {
            "details": "存款人取回本金和利息",
            "params": {
              "_pid": "是池索引",
              "_spAmount": "是销毁的sp数量 | 函数 | 状态要求 | 提取金额 | 是否计算利息 | 使用场景 | | `withdrawLend` | FINISH/LIQUIDATION | 按SP代币比例 | ✅ 计算利息 | 正常到期提取或者清算提取 |"
            }
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "abi_decode_address_fromMemory": {
              "entryPoint": 712,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            }
          },
          "generatedSources": [],
          "linkReferences": {},
          "object": "608034620002ad57601f62003f1a38819003918201601f191683019291906001600160401b03841183851017620002b2578160809284926040968752833981010312620002ad576200005181620002c8565b906200006060208201620002c8565b818401516001600160a01b03808216949093909291859003620002ad576200008c6060859201620002c8565b600160005516801562000237577f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb475568056bc75e2d63100000600155826002549216928315620001e757811615620001935783156200013f57600480546001600160a01b031990811690941790556001600160a81b031990911660089190911b610100600160a81b031617600255600380549091169190911790556000600581905560065551613c3c9081620002de8239f35b845162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2066656541646472657373206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b845162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2073776170526f75746572206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b855162461bcd60e51b815260206004820152602360248201527f506c65646765506f6f6c203a206f7261636c65206973207a65726f206164647260448201526265737360e81b6064820152608490fd5b855162461bcd60e51b815260206004820152604360248201527f6d756c74695369676e6174757265436c69656e74203a204d756c7469706c652060448201527f7369676e617475726520636f6e74726163742061646472657373206973207a65606482015262726f2160e81b608482015260a490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620002ad5756fe6080604052600436101561001257600080fd5b60003560e01c80630d6abfc114612ba757806314c090cc14612b7c57806316f941b514612a005780631e107979146126ca57806338f2aa76146123c35780633ab4a445146121205780633c9fadc31461209f5780634127365714611fc65780634127535814611f9d578063415f124014611da0578063459b911c146119605780634aea0aec1461194257806352f7c988146118fc57806361a552dc146118d957806362faecf41461180e578063638c7e17146117c65780636abd7f29146117985780636c42fed2146115155780636de6ff3a146114f75780637dc0d1d0146114ce5780638705fcd41461140a578063897b0637146113755780638df828001461114f57806390590da014610f43578063981b48a614610ed95780639b2cb5d814610ebb5780639d71488e14610e80578063a62ff16414610c11578063b159751714610bd6578063bb176a6414610b51578063bf38b8f614610973578063c31c9c0714610946578063c9333756146108ff578063d353a1cb1461069c578063d431b1ac1461066b578063e271fa0c14610490578063e626648a146104725763eec8d506146101be57600080fd5b3461046d5760208060031936011261046d57600435906101dc612fb3565b6101eb60ff6002541615612ea5565b6102016101f783612c7b565b505442101561310c565b60ff600861020e84612c7b565b50015460a01c166005811015610431576001148015610447575b801561040b575b61023890613158565b61024182612c7b565b5061024b83612cf8565b509233600052600a8352604060002090600052825260406000209081549081156103c657600481015494549061028182876130ba565b1561038157600284019182549360ff851661033c57670de0b6b3a76400006102eb896102e66007956102e07fc3e20279d41b3ed21d277920877e5e5c6665bf6aca607046a3fe0fd2bd6bda7d9b9c9d6102db60019861327b565b613313565b926130ba565b613300565b04960191868355600160ff1980961617845501916001808060a01b03946103168887875416336131a4565b8254161790556103278154866130ad565b90555416926040519283523392a36001600055005b60405162461bcd60e51b815260048101889052601d60248201527f726566756e644c656e64203a20616c726561647920726566756e6465640000006044820152606490fd5b60405162461bcd60e51b815260048101869052601760248201527f726566756e644c656e64203a206e6f7420726566756e640000000000000000006044820152606490fd5b60405162461bcd60e51b815260048101859052601860248201527f726566756e644c656e64203a206e6f7420706c656467656400000000000000006044820152606490fd5b5060ff600861041984612c7b565b50015460a01c1660058110156104315760031461022f565b634e487b7160e01b600052602160045260246000fd5b5060ff600861045584612c7b565b50015460a01c16600581101561043157600214610228565b600080fd5b3461046d57600036600319011261046d576020600654604051908152f35b3461046d5760208060031936011261046d57600435906104ae612fb3565b6104bd60ff6002541615612ea5565b60ff60086104ca84612c7b565b50015460a01c1660058110156104315760046104e691146133c6565b6104ef82612c7b565b5091600583015415610613573360005260098252604060002090600052815260406000209182549081156105ce57600284019060ff8254166105895760080180547f5a06c7de92f1dc59e8cba872927d016c80ce5f0fb2295c898dfb7a2f08e43fb1936001600160a01b03939161056991908516336131a4565b600160ff1982541617905554169254916040519283523392a36001600055005b60405162461bcd60e51b815260048101859052601a60248201527f726566756e64426f72726f773a20616761696e20726566756e640000000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601960248201527f726566756e64426f72726f773a206e6f7420706c6564676564000000000000006044820152606490fd5b60405162461bcd60e51b815260048101839052602a60248201527f656d657267656e6379426f72726f775769746864726177616c203a206e6f74206044820152691dda5d1a191c985dd85b60b21b6064820152608490fd5b3461046d57600036600319011261046d57610684612d87565b60025460ff80821615169060ff191617600255600080f35b3461046d57602036600319011261046d576004356106b8612d87565b6106c181612c7b565b50906106cc81612cf8565b509060016106d982612c7b565b50015442106108ba576008830180549260ff8460a01c16600581101561043157600103610869576007850161078a60018060a01b039561075f8784541698662386f26fc1000061075860026301e1338061074161073c60018701548754906130ba565b6132e7565b049301549261075289548095613300565b90613300565b04906130ad565b97876305f5e10061077a61077460055461309c565b8c613300565b0492168860025460081c16613639565b919095878310610824576107e2600197846107f0948b60029c6003981160001461081957916107cf6107bf6107d494836130ba565b809388808c5416915416906131a4565b6130ba565b8a8701555b888601546130ba565b906006549086541690613412565b910155805460ff60a01b191660a184901b179055600080516020613be7833981519152600080a4005b50508a8701556107d9565b60405162461bcd60e51b815260206004820152601c60248201527f66696e6973683a20536c69707061676520697320746f6f2068696768000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526024808201527f66696e6973683a20706f6f6c207374617465206d7573742062652065786563756044820152633a34b7b760e11b6064820152608490fd5b60405162461bcd60e51b815260206004820152601a60248201527f66696e6973683a206c657373207468616e20656e642074696d650000000000006044820152606490fd5b3461046d5760208060031936011261046d5761091c6004356134ff565b604051916000835b6002821061093157604085f35b82806001928651815201940191019092610924565b3461046d57600036600319011261046d5760025460405160089190911c6001600160a01b03168152602090f35b3461046d5760208060031936011261046d5760043590610991612fb3565b6109a060ff6002541615612ea5565b60ff60086109ad84612c7b565b50015460a01c1660058110156104315760046109c991146133c6565b6109d282612c7b565b5091600483015415610af75733600052600a825260406000209060005281526040600020918254908115610aa457600284019060ff825416610a4c5760070180547f71d14c5f08cb34cbfb59c06ea5151aafbf742d0b6ed00fdb83addd9afb5c0fd0936001600160a01b03939161056991908516336131a4565b60405162461bcd60e51b815260048101859052602a60248201527f656d657267656e63794c656e645769746864726177616c203a20616c726561646044820152691e481c99599d5b99195960b21b6064820152608490fd5b60405162461bcd60e51b815260048101849052602560248201527f656d657267656e63794c656e645769746864726177616c203a206e6f7420706c604482015264195919d95960da1b6064820152608490fd5b60405162461bcd60e51b815260048101839052602c60248201527f656d657267656e63794c656e645769746864726177616c203a206c656e64537560448201526b70706c79206973207a65726f60a01b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b03610b72612ce2565b16600052600a60205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b0390f35b3461046d57602036600319011261046d5760ff6008610bf6600435612c7b565b50015460a01c16600581101561043157602090604051908152f35b3461046d5760208060031936011261046d57600435610c2e612fb3565b610c3d60ff6002541615612ea5565b610c496101f782612c7b565b60ff6008610c5683612c7b565b50015460a01c166005811015610431576001148015610e5a575b8015610e34575b610c8090613158565b610c8981612c7b565b5090610c9481612cf8565b5090336000526009845260406000209060005283526040600020906001600584015491015491610cc483836130ba565b15610def578054918215610daa57600282019384549360ff8516610d65579360019693670de0b6b3a7640000610d2a856102e68b966102e07f732816f48de550f238bd0d4f5b79819c7b24a49d6132928978e3cd36568dd5db9c996102db60089d61327b565b04970187905560ff19161790550180546001600160a01b039190610d529085908416336131a4565b5416926040519283523392a36001600055005b60405162461bcd60e51b815260048101899052601f60248201527f726566756e64426f72726f77203a20616c726561647920726566756e646564006044820152606490fd5b60405162461bcd60e51b815260048101879052601a60248201527f726566756e64426f72726f77203a206e6f7420706c65646765640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601960248201527f726566756e64426f72726f77203a206e6f7420726566756e64000000000000006044820152606490fd5b5060ff6008610e4283612c7b565b50015460a01c16600581101561043157600314610c77565b5060ff6008610e6883612c7b565b50015460a01c16600581101561043157600214610c70565b3461046d57600036600319011261046d5760206040517f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb478152f35b3461046d57600036600319011261046d576020600154604051908152f35b3461046d57602036600319011261046d5760043560085481101561046d57610f0260c091612cf8565b5080549060018101549060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b610f4c36612ccc565b610f54612fb3565b610f6360ff6002541615612ea5565b610f78610f6f83612c7b565b50544210612eff565b60ff6008610f8584612c7b565b50015460a01c16600581101561043157610f9f9015612f56565b610fa882612c7b565b509133600052600a602052604060002090600052602052604060002091600381015490610fdb60048201928354906130ba565b83116110ee5760070180546001600160a01b039290610ffd9085908516612fd6565b946001548611156110935760028101805461ffff191690558254841661107457611029815434906130ad565b90556110363482546130ad565b90555b54169160405191825260208201527f129e8c18c2f7baf99c7eb257934c21f038c72412803512dcf0a942a4562a82ea60403392a36001600055005b61107f8682546130ad565b905561108c8582546130ad565b9055611039565b60405162461bcd60e51b815260206004820152602d60248201527f6465706f7369744c656e643a20616d6f756e74206c657373207468616e206d6960448201526c1b9a5b5d5b4819195c1bdcda5d609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603360248201527f6465706f7369744c656e64203a207374616b65416d6f756e742069732067726560448201527261746572207468616e206d6178537570706c7960681b6064820152608490fd5b3461046d57602036600319011261046d5760043561116b612d87565b61117481612c7b565b509061117f81612cf8565b5061118982612c7b565b50544210611322576008830190815460ff8160a01c166005811015610431576112de576004850190815490811515806112d1575b1561129357505090600180958594936111d76000976134ff565b91602083016111f16111e9825161327b565b855190613313565b936112236006611218670de0b6b3a764000061121260058801998a54613300565b046132e7565b940193845490613313565b9354918483118b1461125f57505050508355549101555b805460ff60a01b191660a085901b179055600080516020613be78339815191528280a4005b61128b95506102db9394509061127b61128392848a55516132e7565b905190613313565b925490613300565b91015561123a565b60ff60a01b1916600160a21b179093555090815560059092015460019290920191909155600490600090600080516020613be78339815191528280a4005b50600587015415156111bd565b606460405162461bcd60e51b815260206004820152602060248201527f736574746c653a20706f6f6c207374617465206d757374206265204d415443486044820152fd5b60405162461bcd60e51b815260206004820152602560248201527f736574746c653a2074696d65206973206c657373207468616e20736574746c656044820152642074696d6560d81b6064820152608490fd5b3461046d57602036600319011261046d57600435611391612d87565b80156113c557806001547ffa6189b739625142c695478e9d0095a1cb9e6fad92ad8a727e0055a5cc85b06b600080a3600155005b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a206d696e416d6f756e74206973207a65726f00006044820152606490fd5b3461046d57602036600319011261046d57611423612ce2565b61142b612d87565b6001600160a01b0390811690811561147957816003549182167fd44190acf9d04bdb5d3a1aafff7e6dee8b40b93dfb8c5d3f0eea4b9f4539c3f7600080a36001600160a01b03191617600355005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2066656541646472657373206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57600036600319011261046d576004546040516001600160a01b039091168152602090f35b3461046d57600036600319011261046d576020600754604051908152f35b3461046d5760208060031936011261046d57600435611532612fb3565b61154160ff6002541615612ea5565b61154d6101f782612c7b565b60ff600861155a83612c7b565b50015460a01c166005811015610431576001148015611772575b801561174c575b61158490613158565b61158d81612c7b565b5061159782612cf8565b509133600052600a845260406000209060005283526040600020918254928315611707576002019260ff845460081c166116c257670de0b6b3a7640000916115ef6115e46115f69361327b565b600486015490613313565b9054613300565b60098301546040516340c10f1960e01b815233600482015292909104602483018190529391926001600160a01b03929186908590604490829060009088165af19182156116b6577f6f4dd2687b3c3bfa99d39742b01d6e0ad9604c48559791d5df4ff5df44b41dfd94600793611689575b50805461ff001916610100179055015460405193845216923392a36001600055005b6116a890883d8a116116af575b6116a08183612d65565b810190613362565b5087611667565b503d611696565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260048101869052601a60248201527f636c61696d4c656e64203a616c726561647920636c61696d65640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601e60248201527f636c61696d4c656e64203a63616e6e6f74206765742073705f746f6b656e00006044820152606490fd5b5060ff600861175a83612c7b565b50015460a01c1660058110156104315760031461157b565b5060ff600861178083612c7b565b50015460a01c16600581101561043157600214611574565b3461046d57602036600319011261046d57602060016117b8600435612c7b565b500154421015604051908152f35b3461046d57600036600319011261046d577f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb47546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d5760043561182b81612c7b565b5090600b670de0b6b3a764000061186861185e61185161184a86612cf8565b50956134ff565b61127b602082015161327b565b6001850154613300565b0491549201546305f5e100908101928184106118945760209361188a91613300565b0411604051908152f35b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606490fd5b3461046d57600036600319011261046d57602060ff600254166040519015158152f35b3461046d5761190a36612ccc565b90611913612d87565b80600555816006557f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5600080a3005b3461046d57600036600319011261046d576020600554604051908152f35b3461046d576101408060031936011261046d5760249060043590823560a4356001600160a01b0381169081900361046d5760c4356001600160a01b0381169081900361046d5760e4356001600160a01b038116929083900361046d57610104356001600160a01b038116949085900361046d576119db612d87565b86811115611d3f578415611cee578315611c9d57604051966101a0880188811067ffffffffffffffff821117611c8857604052875260208701526044356040870152606435606087015260006080870152600060a087015260843560c087015260e086015261010085015260006101208501528284015261016083015261012435610180830152600754600160401b811015611c7357806001611a819201600755612c7b565b929092611c5e57805183556020810151600184015560408101516002840155606081015160038401556080810151600484015560a0810151600584015560c08101516006840155600783019060018060a01b0360e082015116916bffffffffffffffffffffffff60a01b9283825416179055600884019160018060a01b036101008301511693835493610120840151946005861015611c49576001600160a81b03191690951760a09490941b60ff60a01b16939093179093559081015160098401805484166001600160a01b03928316179055610160820151600a850180549094169116179091556101800151600b919091015560405160c0810167ffffffffffffffff811182821017611c34576040526000815260208101600081526040820160008152606083016000815260808401916000835260a085019360008552600854600160401b811015611c1f57806001611bdf9201600855612cf8565b969096611c0a5751865551600186015551600285015551600384015551600483015551600590910155005b87634e487b7160e01b60005260006004526000fd5b87634e487b7160e01b60005260416004526000fd5b82634e487b7160e01b60005260416004526000fd5b88634e487b7160e01b60005260216004526000fd5b83634e487b7160e01b60005260006004526000fd5b83634e487b7160e01b60005260416004526000fd5b89634e487b7160e01b60005260416004526000fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a207370546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a206a70546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526034818a01527f637265617465506f6f6c203a20656e6454696d65206d7573742062652067726560448201527361746572207468616e20736574746c6554696d6560601b6064820152608490fd5b3461046d57602036600319011261046d57600435611dbc612d87565b611dc581612cf8565b5090611dd081612c7b565b509081549283421115611f47576008830190815460ff8160a01c16600581101561043157600103611ef257611ebd61073c6107e260039888611e80600596611e5689662386f26fc1000061075860019f60070196600160026301e13380611e49836107529460a01b039e8f8d54169d60018701546130ba565b0492015494548095613300565b93866305f5e100611e70611e6a8c5461309c565b88613300565b0492168760025460081c16613639565b919092808311600014611ee657916107cf611e9e611eaf94836130ba565b80938f8980915416915416906131a4565b6004870155888601546130ba565b910155805460ff60a01b191660a085901b179055600080516020613be7833981519152600080a4005b505060048701556107d9565b60405162461bcd60e51b815260206004820152602760248201527f6c69717569646174653a20706f6f6c207374617465206d75737420626520657860448201526632b1baba34b7b760c91b6064820152608490fd5b60405162461bcd60e51b815260206004820152602860248201527f6c69717569646174653a2074696d65206973206c657373207468616e20736574604482015267746c652074696d6560c01b6064820152608490fd5b3461046d57600036600319011261046d576003546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d57611fdf612ce2565b611fe7612d87565b6001600160a01b0390808216801561204a57600254928360081c167f4558149b3c5427365f76d4ff19bef30aba41f17e5e601d4661330d8d2b687627600080a3610100600160a81b031990911660089190911b610100600160a81b031617600255005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2073776170526f75746572206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b036120c0612ce2565b16600052600960205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b3461046d5760208060031936011261046d5760043561213d612fb3565b61214c60ff6002541615612ea5565b6121586101f782612c7b565b60ff600861216583612c7b565b50015460a01c16600581101561043157600114801561239d575b8015612377575b61218f90613158565b61219881612c7b565b50906121a381612cf8565b50903360005260098452604060002090600052835260406000208054908115612328576002019260ff845460081c166122e3576000906122066121fb6305f5e1006121f48754600686015490613300565b049461327b565b600583015490613313565b809361221c670de0b6b3a7640000928392613300565b600a8401546040516340c10f1960e01b81523360048201529290910460248301526001600160a01b03959194899186916044918391908a165af19081156116b6577f3ddafe3ebb4d0c818317027aabfa82dc9983942ceeb80523167e2de047b17fbd96600895612292936122c6575b5054613300565b04946122a58685600785015416336131a4565b805461ff001916610100179055015460405193845216923392a36001600055005b6122dc908b3d8d116116af576116a08183612d65565b508a61228b565b60405162461bcd60e51b815260048101869052601d60248201527f636c61696d426f72726f77203a20616c726561647920636c61696d65640000006044820152606490fd5b60405162461bcd60e51b815260048101869052602160248201527f636c61696d426f72726f77203a2063616e6e6f7420676574206a705f746f6b656044820152603760f91b6064820152608490fd5b5060ff600861238583612c7b565b50015460a01c16600581101561043157600314612186565b5060ff60086123ab83612c7b565b50015460a01c1660058110156104315760021461217f565b3461046d576123d136612ccc565b906123da612fb3565b6123e960ff6002541615612ea5565b60ff60086123f683612c7b565b50015460a01c1660058110156104315760021480156126a4575b6124199061337a565b61242c61242582612c7b565b5091612cf8565b5091801561265f576009820154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b039290919086908290604490829060009088165af180156116b657612642575b5061248c81546102db8561327b565b906008850160ff815460a01c16600581101561043157600214612589575b5460a01c60ff166005811015610431576003146124c9575b6001600055005b84544210612538576124ea6007926004670de0b6b3a7640000930154613300565b0493016124fb8483835416336131a4565b5416926040519283528201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a38080808080806124c2565b60405162461bcd60e51b8152600481018790526024808201527f77697468647261774c656e64203a206c657373207468616e20736574746c652060448201526374696d6560e01b6064820152608490fd5b600186015442106125fd5760ff90670de0b6b3a76400006125ae856002860154613300565b0485600789016125c28383835416336131a4565b541690604051908152878a8201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a390506124aa565b60405162461bcd60e51b815260048101889052601b60248201527f77697468647261774c656e64203a206e6f7420656e642074696d6500000000006044820152606490fd5b61265890863d88116116af576116a08183612d65565b508561247d565b60405162461bcd60e51b815260206004820152601f60248201527f77697468647261774c656e64203a207370416d6f756e74206973207a65726f006044820152606490fd5b5060ff60086126b283612c7b565b50015460a01c16600581101561043157600314612410565b3461046d576126d836612ccc565b6126e0612fb3565b6126ef60ff6002541615612ea5565b60ff60086126fc84612c7b565b50015460a01c1660058110156104315760021480156129da575b61271f9061337a565b61273261272b83612c7b565b5092612cf8565b5090801561298557600a830154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b0394929091908690829060449082906000908a165af180156116b657612968575b506127a76305f5e10061279d8454600685015490613300565b046102db8561327b565b6008820192835460ff8160a01c166005811015610431576002146128a9575b5083549260ff8460a01c166005811015610431576003146127e8576001600055005b5442106128565791670de0b6b3a764000061280c6128179360058997960154613300565b0495869116336131a4565b5416926040519283528201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a380808080808080806124c2565b60405162461bcd60e51b815260048101889052602560248201527f7769746864726177426f72726f77203a206c657373207468616e206d617463686044820152642074696d6560d81b6064820152608490fd5b60018401544210612917576128db8791670de0b6b3a76400006128d0866003870154613300565b0492839116336131a4565b868554169060405190815286898201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a3876127c6565b60405162461bcd60e51b815260048101899052602360248201527f7769746864726177426f72726f77203a206c657373207468616e20656e642074604482015262696d6560e81b6064820152608490fd5b61297e90863d88116116af576116a08183612d65565b5085612784565b60405162461bcd60e51b815260206004820152602760248201527f7769746864726177426f72726f773a20776974686472617720616d6f756e74206044820152666973207a65726f60c81b6064820152608490fd5b5060ff60086129e884612c7b565b50015460a01c16600581101561043157600314612716565b612a0936612ccc565b612a11612fb3565b612a2060ff6002541615612ea5565b612a2c610f6f83612c7b565b60ff6008612a3984612c7b565b50015460a01c16600581101561043157612a539015612f56565b612a5c82612c7b565b509133600052600960205260406000209060005260205260406000206008830160018060a01b0391612a918484845416612fd6565b948515612b295760028201805461ffff191690558254600592908516612b0957612abd815434906130ad565b905501612acb3482546130ad565b90555b54169160405191825260208201527f1d7b72e666a0b6217efe7cfa1b604ea5c7b39219563ce48b30c9da77045247a560403392a36001600055005b612b148682546130ad565b905501612b228482546130ad565b9055612ace565b60405162461bcd60e51b815260206004820152602560248201527f6465706f736974426f72726f773a206465706f73697420616d6f756e74206973604482015264207a65726f60d81b6064820152608490fd5b3461046d57602036600319011261046d576020612b9a600435612c7b565b5054421015604051908152f35b3461046d57602036600319011261046d5760043560075481101561046d57612bce90612c7b565b508054600182015460028301549260ff60038201546004830154600584015490600685015460018060a01b039283600788015416926008880154958560098a0154169b600b87600a8c0154169a01549a6040519c8d5260208d015260408c015260608b015260808a015260a089015260c088015260e0870152811661010086015260a01c16936005851015610431576101a094610120850152610140840152610160830152610180820152f35b600754811015612cb657600c906007600052027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b634e487b7160e01b600052603260045260246000fd5b604090600319011261046d576004359060243590565b600435906001600160a01b038216820361046d57565b600854811015612cb6576006906008600052027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b6060810190811067ffffffffffffffff821117612d4f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117612d4f57604052565b604051602090818101903360601b82523060601b603482015260288152612dad81612d33565b5190207f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb4754604051630f5d50b360e11b81526004810192909252600060248301528290829060449082906001600160a01b03165afa9081156116b657600091612e75575b5015612e1a5750565b6084906040519062461bcd60e51b82526004820152602e60248201527f6d756c74695369676e6174757265436c69656e74203a2054686973207478206960448201526d1cc81b9bdd08185c1c9c9bdd995960921b6064820152fd5b908282813d8311612e9e575b612e8b8183612d65565b81010312612e9b57505138612e11565b80fd5b503d612e81565b15612eac57565b60405162461bcd60e51b815260206004820152602560248201527f506c65646765506f6f6c203a205374616b6520686173206265656e2073757370604482015264195b99195960da1b6064820152608490fd5b15612f0657565b60405162461bcd60e51b815260206004820152602260248201527f506c65646765506f6f6c203a204c657373207468616e20736574746c652074696044820152616d6560f01b6064820152608490fd5b15612f5d57565b60405162461bcd60e51b815260206004820152602860248201527f73746174653a20506f6f6c20737461747573206973206e6f7420657175616c206044820152670e8de40dac2e8c6d60c31b6064820152608490fd5b600260005414612fc4576002600055565b604051633ee5aeb560e01b8152600490fd5b6001600160a01b031680612fea5750503490565b81612ff3575090565b6040516323b872dd60e01b60208201523360248201523060448201526064808201849052815260a081019167ffffffffffffffff831182841017612d4f5761303d92604052613040565b90565b906000602091828151910182855af1156116b6576000513d61309357506001600160a01b0381163b155b6130715750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b6001141561306a565b6305f5e10081019081106118945790565b9081019081106118945790565b9081039081116130c75790565b60405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606490fd5b1561311357565b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a20416674657220736574746c652074696d6500006044820152606490fd5b1561315f57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a206e6f74206d6174636820616e6420756e646f6e6500000000006044820152606490fd5b6001600160a01b039182169291908361320c578260008115613203575b6000808093819387871690f1156116b6577fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9916020915b6040519485521692a3565b506108fc6131c1565b60405163a9059cbb60e01b6020808301919091528383166001600160a01b03166024830152604480830186905282527fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9939092909161327690613270606482612d65565b87613040565b6131f8565b670de0b6b3a7640000908181029181159183041417156132985790565b60405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608490fd5b6305f5e100908181029181159183041417156132985790565b8181029181159183041417156132985790565b811561331d570490565b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206469766973696f6e206f766572666c6f7700000000006044820152606490fd5b9081602091031261046d5751801515810361046d5790565b1561338157565b60405162461bcd60e51b815260206004820152601960248201527f73746174653a2066696e697368206c69717569646174696f6e000000000000006044820152606490fd5b156133cd57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a207374617465206d75737420626520756e646f6e6500000000006044820152606490fd5b916305f5e10061342561303d9483613300565b04918280613435575b50506130ba565b60035461344b92906001600160a01b03166131a4565b388261342e565b805115612cb65760200190565b805160011015612cb65760400190565b8051821015612cb65760209160051b010190565b90602090818382031261046d57825167ffffffffffffffff9384821161046d570181601f8201121561046d578051938411612d4f578360051b90604051946134cd85840187612d65565b8552838086019282010192831161046d578301905b8282106134f0575050505090565b815181529083019083016134e2565b6040805167ffffffffffffffff9281830184811183821017612d4f5761352b9284918252369037612c7b565b509080519161353983612d33565b600283526020926008848201928436853760078101546001600160a01b039283929091831661356786613452565b520154166135748361345f565b52600454169083519283916304e59d2760e11b835260248301908760048501525180915260448301919060005b88828210613622575050505091818060009403915afa908115613617576000916135f6575b5081519384830190811185821017612d4f576135ee92526135e681613452565b51845261345f565b519082015290565b613611913d8091833e6136098183612d65565b810190613483565b386135c6565b82513d6000823e3d90fd5b8351855287955093840193909201916001016135a1565b9392909190600081156139115750600061368191613658848689613975565b9060405193849283926307c0329d60e21b84526004840152604060248401526044830190613919565b03816001600160a01b0389165afa80156116b6576136a7916000916138f8575b50613452565b51935b6001600160a01b03838116928315906136da9082156138e9575b8381169687159485156138da575b861695613975565b91600091156137e457505090601e4201918242116137b5576000916137249188604051809681958294637ff36ab560e01b8452886004850152608060248501526084840190613919565b90306044840152606483015203925af19081156116b6576000916137cb575b50915b61374f83613452565b5183516000199391908481019081116137b5577ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235916137906040928861346f565b5182519182526020820152a381519081019081116137b5576137b19161346f565b5190565b634e487b7160e01b600052601160045260246000fd5b6137de913d8091833e6136098183612d65565b38613743565b156138505750601e42018042116137b55761381d92876000809460405196879586948593632512eca560e11b8552309160048601613a93565b03925af19081156116b657600091613837575b5091613746565b61384a913d8091833e6136098183612d65565b38613830565b91601e4201918242116138c657918391888361388595604051968795869485936338ed173960e01b8552309160048601613a93565b03925af19182156138ba57809261389f575b505091613746565b6138b392503d8091833e6136098183612d65565b3880613897565b604051903d90823e3d90fd5b634e487b7160e01b84526011600452602484fd5b6138e48784613acd565b6136d2565b6138f38588613acd565b6136c4565b61390b913d8091833e6136098183612d65565b386136a1565b9050936136aa565b90815180825260208080930193019160005b828110613939575050505090565b83516001600160a01b03168552938101939281019260010161392b565b9081602091031261046d57516001600160a01b038116810361046d5790565b604080519294936001600160a01b0392831661399085612d33565b60028552602091833684880137859785811615600014613a8e575083516315ab88c960e31b81528381600481865afa908115613a8357600091613a66575b505b856139da88613452565b91169052808516613a58575090806004928451938480926315ab88c960e31b82525afa928315613a4e575090613a1b9291600092613a21575b50509261345f565b91169052565b613a409250803d10613a47575b613a388183612d65565b810190613956565b3880613a13565b503d613a2e565b513d6000823e3d90fd5b915050613a1b91509261345f565b613a7d9150843d8611613a4757613a388183612d65565b386139ce565b85513d6000823e3d90fd5b6139d0565b90608092613ab9919695949683526000602084015260a0604084015260a0830190613919565b6001600160a01b0390951660608201520152565b60405163095ea7b360e01b60208083019182526001600160a01b039094166024830152600019604480840191909152825267ffffffffffffffff92916080810184811182821017612d4f57604052600092839283809351925af1913d15613bdd573d908111613bc95760405190613b4d601f8201601f1916860183612d65565b81528091843d92013e5b81613b99575b5015613b665750565b6064906040519062461bcd60e51b82526004820152600c60248201526b2173616665417070726f766560a01b6044820152fd5b80518015925083908315613bb1575b50505038613b5d565b613bc19350820181019101613362565b388281613ba8565b634e487b7160e01b82526041600452602482fd5b50506060613b5756fe516112f3bf06e373fcea44db364769c04cc7ef4392e6de95d2b250720bcacefba26469706673582212205bc7ac1966f51929369415b8d7abd0aeed8de2823d02bbbd330b641d83c0931a64736f6c63430008140033",
          "opcodes": "PUSH1 0x80 CALLVALUE PUSH3 0x2AD JUMPI PUSH1 0x1F PUSH3 0x3F1A CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT DUP4 DUP6 LT OR PUSH3 0x2B2 JUMPI DUP2 PUSH1 0x80 SWAP3 DUP5 SWAP3 PUSH1 0x40 SWAP7 DUP8 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x2AD JUMPI PUSH3 0x51 DUP2 PUSH3 0x2C8 JUMP JUMPDEST SWAP1 PUSH3 0x60 PUSH1 0x20 DUP3 ADD PUSH3 0x2C8 JUMP JUMPDEST DUP2 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 SWAP2 DUP6 SWAP1 SUB PUSH3 0x2AD JUMPI PUSH3 0x8C PUSH1 0x60 DUP6 SWAP3 ADD PUSH3 0x2C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE AND DUP1 ISZERO PUSH3 0x237 JUMPI PUSH32 0x8DDDB57468CF5338EE155397AD1400A7A564308824F517D20A8A7C516523BB47 SSTORE PUSH9 0x56BC75E2D63100000 PUSH1 0x1 SSTORE DUP3 PUSH1 0x2 SLOAD SWAP3 AND SWAP3 DUP4 ISZERO PUSH3 0x1E7 JUMPI DUP2 AND ISZERO PUSH3 0x193 JUMPI DUP4 ISZERO PUSH3 0x13F JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP5 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB AND OR PUSH1 0x2 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x0 PUSH1 0x5 DUP2 SWAP1 SSTORE PUSH1 0x6 SSTORE MLOAD PUSH2 0x3C3C SWAP1 DUP2 PUSH3 0x2DE DUP3 CODECOPY RETURN JUMPDEST DUP5 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A2066656541646472657373206973207A65726F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x61646472657373 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP5 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A2073776170526F75746572206973207A65726F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x61646472657373 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A206F7261636C65206973207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x43 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D756C74695369676E6174757265436C69656E74203A204D756C7469706C6520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7369676E617475726520636F6E74726163742061646472657373206973207A65 PUSH1 0x64 DUP3 ADD MSTORE PUSH3 0x726F21 PUSH1 0xE8 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x2AD JUMPI JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD6ABFC1 EQ PUSH2 0x2BA7 JUMPI DUP1 PUSH4 0x14C090CC EQ PUSH2 0x2B7C JUMPI DUP1 PUSH4 0x16F941B5 EQ PUSH2 0x2A00 JUMPI DUP1 PUSH4 0x1E107979 EQ PUSH2 0x26CA JUMPI DUP1 PUSH4 0x38F2AA76 EQ PUSH2 0x23C3 JUMPI DUP1 PUSH4 0x3AB4A445 EQ PUSH2 0x2120 JUMPI DUP1 PUSH4 0x3C9FADC3 EQ PUSH2 0x209F JUMPI DUP1 PUSH4 0x41273657 EQ PUSH2 0x1FC6 JUMPI DUP1 PUSH4 0x41275358 EQ PUSH2 0x1F9D JUMPI DUP1 PUSH4 0x415F1240 EQ PUSH2 0x1DA0 JUMPI DUP1 PUSH4 0x459B911C EQ PUSH2 0x1960 JUMPI DUP1 PUSH4 0x4AEA0AEC EQ PUSH2 0x1942 JUMPI DUP1 PUSH4 0x52F7C988 EQ PUSH2 0x18FC JUMPI DUP1 PUSH4 0x61A552DC EQ PUSH2 0x18D9 JUMPI DUP1 PUSH4 0x62FAECF4 EQ PUSH2 0x180E JUMPI DUP1 PUSH4 0x638C7E17 EQ PUSH2 0x17C6 JUMPI DUP1 PUSH4 0x6ABD7F29 EQ PUSH2 0x1798 JUMPI DUP1 PUSH4 0x6C42FED2 EQ PUSH2 0x1515 JUMPI DUP1 PUSH4 0x6DE6FF3A EQ PUSH2 0x14F7 JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0x14CE JUMPI DUP1 PUSH4 0x8705FCD4 EQ PUSH2 0x140A JUMPI DUP1 PUSH4 0x897B0637 EQ PUSH2 0x1375 JUMPI DUP1 PUSH4 0x8DF82800 EQ PUSH2 0x114F JUMPI DUP1 PUSH4 0x90590DA0 EQ PUSH2 0xF43 JUMPI DUP1 PUSH4 0x981B48A6 EQ PUSH2 0xED9 JUMPI DUP1 PUSH4 0x9B2CB5D8 EQ PUSH2 0xEBB JUMPI DUP1 PUSH4 0x9D71488E EQ PUSH2 0xE80 JUMPI DUP1 PUSH4 0xA62FF164 EQ PUSH2 0xC11 JUMPI DUP1 PUSH4 0xB1597517 EQ PUSH2 0xBD6 JUMPI DUP1 PUSH4 0xBB176A64 EQ PUSH2 0xB51 JUMPI DUP1 PUSH4 0xBF38B8F6 EQ PUSH2 0x973 JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x946 JUMPI DUP1 PUSH4 0xC9333756 EQ PUSH2 0x8FF JUMPI DUP1 PUSH4 0xD353A1CB EQ PUSH2 0x69C JUMPI DUP1 PUSH4 0xD431B1AC EQ PUSH2 0x66B JUMPI DUP1 PUSH4 0xE271FA0C EQ PUSH2 0x490 JUMPI DUP1 PUSH4 0xE626648A EQ PUSH2 0x472 JUMPI PUSH4 0xEEC8D506 EQ PUSH2 0x1BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x1DC PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x1EB PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x1F7 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP SLOAD TIMESTAMP LT ISZERO PUSH2 0x310C JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x20E DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x447 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x40B JUMPI JUMPDEST PUSH2 0x238 SWAP1 PUSH2 0x3158 JUMP JUMPDEST PUSH2 0x241 DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP PUSH2 0x24B DUP4 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP3 CALLER PUSH1 0x0 MSTORE PUSH1 0xA DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x3C6 JUMPI PUSH1 0x4 DUP2 ADD SLOAD SWAP5 SLOAD SWAP1 PUSH2 0x281 DUP3 DUP8 PUSH2 0x30BA JUMP JUMPDEST ISZERO PUSH2 0x381 JUMPI PUSH1 0x2 DUP5 ADD SWAP2 DUP3 SLOAD SWAP4 PUSH1 0xFF DUP6 AND PUSH2 0x33C JUMPI PUSH8 0xDE0B6B3A7640000 PUSH2 0x2EB DUP10 PUSH2 0x2E6 PUSH1 0x7 SWAP6 PUSH2 0x2E0 PUSH32 0xC3E20279D41B3ED21D277920877E5E5C6665BF6ACA607046A3FE0FD2BD6BDA7D SWAP12 SWAP13 SWAP14 PUSH2 0x2DB PUSH1 0x1 SWAP9 PUSH2 0x327B JUMP JUMPDEST PUSH2 0x3313 JUMP JUMPDEST SWAP3 PUSH2 0x30BA JUMP JUMPDEST PUSH2 0x3300 JUMP JUMPDEST DIV SWAP7 ADD SWAP2 DUP7 DUP4 SSTORE PUSH1 0x1 PUSH1 0xFF NOT DUP1 SWAP7 AND OR DUP5 SSTORE ADD SWAP2 PUSH1 0x1 DUP1 DUP1 PUSH1 0xA0 SHL SUB SWAP5 PUSH2 0x316 DUP9 DUP8 DUP8 SLOAD AND CALLER PUSH2 0x31A4 JUMP JUMPDEST DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x327 DUP2 SLOAD DUP7 PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E644C656E64203A20616C726561647920726566756E646564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E644C656E64203A206E6F7420726566756E64000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E644C656E64203A206E6F7420706C65646765640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x419 DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x22F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x455 DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x4AE PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x4BD PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x4CA DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x4 PUSH2 0x4E6 SWAP2 EQ PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x4EF DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP2 PUSH1 0x5 DUP4 ADD SLOAD ISZERO PUSH2 0x613 JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x9 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x5CE JUMPI PUSH1 0x2 DUP5 ADD SWAP1 PUSH1 0xFF DUP3 SLOAD AND PUSH2 0x589 JUMPI PUSH1 0x8 ADD DUP1 SLOAD PUSH32 0x5A06C7DE92F1DC59E8CBA872927D016C80CE5F0FB2295C898DFB7A2F08E43FB1 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP2 PUSH2 0x569 SWAP2 SWAP1 DUP6 AND CALLER PUSH2 0x31A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE SLOAD AND SWAP3 SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E64426F72726F773A20616761696E20726566756E64000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E64426F72726F773A206E6F7420706C656467656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E6379426F72726F775769746864726177616C203A206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1DDA5D1A191C985DD85B PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH2 0x684 PUSH2 0x2D87 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO AND SWAP1 PUSH1 0xFF NOT AND OR PUSH1 0x2 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x6B8 PUSH2 0x2D87 JUMP JUMPDEST PUSH2 0x6C1 DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 PUSH2 0x6CC DUP2 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP1 PUSH1 0x1 PUSH2 0x6D9 DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD TIMESTAMP LT PUSH2 0x8BA JUMPI PUSH1 0x8 DUP4 ADD DUP1 SLOAD SWAP3 PUSH1 0xFF DUP5 PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x1 SUB PUSH2 0x869 JUMPI PUSH1 0x7 DUP6 ADD PUSH2 0x78A PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP6 PUSH2 0x75F DUP8 DUP5 SLOAD AND SWAP9 PUSH7 0x2386F26FC10000 PUSH2 0x758 PUSH1 0x2 PUSH4 0x1E13380 PUSH2 0x741 PUSH2 0x73C PUSH1 0x1 DUP8 ADD SLOAD DUP8 SLOAD SWAP1 PUSH2 0x30BA JUMP JUMPDEST PUSH2 0x32E7 JUMP JUMPDEST DIV SWAP4 ADD SLOAD SWAP3 PUSH2 0x752 DUP10 SLOAD DUP1 SWAP6 PUSH2 0x3300 JUMP JUMPDEST SWAP1 PUSH2 0x3300 JUMP JUMPDEST DIV SWAP1 PUSH2 0x30AD JUMP JUMPDEST SWAP8 DUP8 PUSH4 0x5F5E100 PUSH2 0x77A PUSH2 0x774 PUSH1 0x5 SLOAD PUSH2 0x309C JUMP JUMPDEST DUP13 PUSH2 0x3300 JUMP JUMPDEST DIV SWAP3 AND DUP9 PUSH1 0x2 SLOAD PUSH1 0x8 SHR AND PUSH2 0x3639 JUMP JUMPDEST SWAP2 SWAP1 SWAP6 DUP8 DUP4 LT PUSH2 0x824 JUMPI PUSH2 0x7E2 PUSH1 0x1 SWAP8 DUP5 PUSH2 0x7F0 SWAP5 DUP12 PUSH1 0x2 SWAP13 PUSH1 0x3 SWAP9 GT PUSH1 0x0 EQ PUSH2 0x819 JUMPI SWAP2 PUSH2 0x7CF PUSH2 0x7BF PUSH2 0x7D4 SWAP5 DUP4 PUSH2 0x30BA JUMP JUMPDEST DUP1 SWAP4 DUP9 DUP1 DUP13 SLOAD AND SWAP2 SLOAD AND SWAP1 PUSH2 0x31A4 JUMP JUMPDEST PUSH2 0x30BA JUMP JUMPDEST DUP11 DUP8 ADD SSTORE JUMPDEST DUP9 DUP7 ADD SLOAD PUSH2 0x30BA JUMP JUMPDEST SWAP1 PUSH1 0x6 SLOAD SWAP1 DUP7 SLOAD AND SWAP1 PUSH2 0x3412 JUMP JUMPDEST SWAP2 ADD SSTORE DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0xA1 DUP5 SWAP1 SHL OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 LOG4 STOP JUMPDEST POP POP DUP11 DUP8 ADD SSTORE PUSH2 0x7D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x66696E6973683A20536C69707061676520697320746F6F206869676800000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x66696E6973683A20706F6F6C207374617465206D757374206265206578656375 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x3A34B7B7 PUSH1 0xE1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x66696E6973683A206C657373207468616E20656E642074696D65000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH2 0x91C PUSH1 0x4 CALLDATALOAD PUSH2 0x34FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH1 0x0 DUP4 JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0x931 JUMPI PUSH1 0x40 DUP6 RETURN JUMPDEST DUP3 DUP1 PUSH1 0x1 SWAP3 DUP7 MLOAD DUP2 MSTORE ADD SWAP5 ADD SWAP2 ADD SWAP1 SWAP3 PUSH2 0x924 JUMP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x991 PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x9A0 PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x9AD DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x4 PUSH2 0x9C9 SWAP2 EQ PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x9D2 DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP2 PUSH1 0x4 DUP4 ADD SLOAD ISZERO PUSH2 0xAF7 JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0xA DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD SWAP1 DUP2 ISZERO PUSH2 0xAA4 JUMPI PUSH1 0x2 DUP5 ADD SWAP1 PUSH1 0xFF DUP3 SLOAD AND PUSH2 0xA4C JUMPI PUSH1 0x7 ADD DUP1 SLOAD PUSH32 0x71D14C5F08CB34CBFB59C06EA5151AAFBF742D0B6ED00FDB83ADDD9AFB5C0FD0 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP2 PUSH2 0x569 SWAP2 SWAP1 DUP6 AND CALLER PUSH2 0x31A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E63794C656E645769746864726177616C203A20616C72656164 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1E481C99599D5B991959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E63794C656E645769746864726177616C203A206E6F7420706C PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x195919D959 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E63794C656E645769746864726177616C203A206C656E645375 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x70706C79206973207A65726F PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB72 PUSH2 0x2CE2 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH2 0xBD2 PUSH1 0x2 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 ADD SLOAD PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0xFF DUP1 DUP5 PUSH1 0x8 SHR AND SWAP4 AND SWAP2 DUP6 SWAP3 PUSH1 0x60 SWAP3 SWAP6 SWAP5 SWAP2 SWAP6 PUSH1 0x80 DUP6 ADD SWAP7 DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0x40 DUP5 ADD MSTORE ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0xFF PUSH1 0x8 PUSH2 0xBF6 PUSH1 0x4 CALLDATALOAD PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xC2E PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0xC3D PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0xC49 PUSH2 0x1F7 DUP3 PUSH2 0x2C7B JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0xC56 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0xE5A JUMPI JUMPDEST DUP1 ISZERO PUSH2 0xE34 JUMPI JUMPDEST PUSH2 0xC80 SWAP1 PUSH2 0x3158 JUMP JUMPDEST PUSH2 0xC89 DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 PUSH2 0xC94 DUP2 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0x9 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x5 DUP5 ADD SLOAD SWAP2 ADD SLOAD SWAP2 PUSH2 0xCC4 DUP4 DUP4 PUSH2 0x30BA JUMP JUMPDEST ISZERO PUSH2 0xDEF JUMPI DUP1 SLOAD SWAP2 DUP3 ISZERO PUSH2 0xDAA JUMPI PUSH1 0x2 DUP3 ADD SWAP4 DUP5 SLOAD SWAP4 PUSH1 0xFF DUP6 AND PUSH2 0xD65 JUMPI SWAP4 PUSH1 0x1 SWAP7 SWAP4 PUSH8 0xDE0B6B3A7640000 PUSH2 0xD2A DUP6 PUSH2 0x2E6 DUP12 SWAP7 PUSH2 0x2E0 PUSH32 0x732816F48DE550F238BD0D4F5B79819C7B24A49D6132928978E3CD36568DD5DB SWAP13 SWAP10 PUSH2 0x2DB PUSH1 0x8 SWAP14 PUSH2 0x327B JUMP JUMPDEST DIV SWAP8 ADD DUP8 SWAP1 SSTORE PUSH1 0xFF NOT AND OR SWAP1 SSTORE ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 PUSH2 0xD52 SWAP1 DUP6 SWAP1 DUP5 AND CALLER PUSH2 0x31A4 JUMP JUMPDEST SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E64426F72726F77203A20616C726561647920726566756E64656400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E64426F72726F77203A206E6F7420706C6564676564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E64426F72726F77203A206E6F7420726566756E6400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0xE42 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0xC77 JUMP JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0xE68 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ PUSH2 0xC70 JUMP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x8DDDB57468CF5338EE155397AD1400A7A564308824F517D20A8A7C516523BB47 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x46D JUMPI PUSH2 0xF02 PUSH1 0xC0 SWAP2 PUSH2 0x2CF8 JUMP JUMPDEST POP DUP1 SLOAD SWAP1 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x3 DUP3 ADD SLOAD SWAP1 PUSH1 0x5 PUSH1 0x4 DUP5 ADD SLOAD SWAP4 ADD SLOAD SWAP4 PUSH1 0x40 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE RETURN JUMPDEST PUSH2 0xF4C CALLDATASIZE PUSH2 0x2CCC JUMP JUMPDEST PUSH2 0xF54 PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0xF63 PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0xF78 PUSH2 0xF6F DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP SLOAD TIMESTAMP LT PUSH2 0x2EFF JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0xF85 DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH2 0xF9F SWAP1 ISZERO PUSH2 0x2F56 JUMP JUMPDEST PUSH2 0xFA8 DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP2 CALLER PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x3 DUP2 ADD SLOAD SWAP1 PUSH2 0xFDB PUSH1 0x4 DUP3 ADD SWAP3 DUP4 SLOAD SWAP1 PUSH2 0x30BA JUMP JUMPDEST DUP4 GT PUSH2 0x10EE JUMPI PUSH1 0x7 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 PUSH2 0xFFD SWAP1 DUP6 SWAP1 DUP6 AND PUSH2 0x2FD6 JUMP JUMPDEST SWAP5 PUSH1 0x1 SLOAD DUP7 GT ISZERO PUSH2 0x1093 JUMPI PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE DUP3 SLOAD DUP5 AND PUSH2 0x1074 JUMPI PUSH2 0x1029 DUP2 SLOAD CALLVALUE SWAP1 PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x1036 CALLVALUE DUP3 SLOAD PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE JUMPDEST SLOAD AND SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x129E8C18C2F7BAF99C7EB257934C21F038C72412803512DCF0A942A4562A82EA PUSH1 0x40 CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH2 0x107F DUP7 DUP3 SLOAD PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x108C DUP6 DUP3 SLOAD PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x1039 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6465706F7369744C656E643A20616D6F756E74206C657373207468616E206D69 PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1B9A5B5D5B4819195C1BDCDA5D PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x33 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6465706F7369744C656E64203A207374616B65416D6F756E7420697320677265 PUSH1 0x44 DUP3 ADD MSTORE PUSH19 0x61746572207468616E206D6178537570706C79 PUSH1 0x68 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x116B PUSH2 0x2D87 JUMP JUMPDEST PUSH2 0x1174 DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 PUSH2 0x117F DUP2 PUSH2 0x2CF8 JUMP JUMPDEST POP PUSH2 0x1189 DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP SLOAD TIMESTAMP LT PUSH2 0x1322 JUMPI PUSH1 0x8 DUP4 ADD SWAP1 DUP2 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH2 0x12DE JUMPI PUSH1 0x4 DUP6 ADD SWAP1 DUP2 SLOAD SWAP1 DUP2 ISZERO ISZERO DUP1 PUSH2 0x12D1 JUMPI JUMPDEST ISZERO PUSH2 0x1293 JUMPI POP POP SWAP1 PUSH1 0x1 DUP1 SWAP6 DUP6 SWAP5 SWAP4 PUSH2 0x11D7 PUSH1 0x0 SWAP8 PUSH2 0x34FF JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x11F1 PUSH2 0x11E9 DUP3 MLOAD PUSH2 0x327B JUMP JUMPDEST DUP6 MLOAD SWAP1 PUSH2 0x3313 JUMP JUMPDEST SWAP4 PUSH2 0x1223 PUSH1 0x6 PUSH2 0x1218 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1212 PUSH1 0x5 DUP9 ADD SWAP10 DUP11 SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV PUSH2 0x32E7 JUMP JUMPDEST SWAP5 ADD SWAP4 DUP5 SLOAD SWAP1 PUSH2 0x3313 JUMP JUMPDEST SWAP4 SLOAD SWAP2 DUP5 DUP4 GT DUP12 EQ PUSH2 0x125F JUMPI POP POP POP POP DUP4 SSTORE SLOAD SWAP2 ADD SSTORE JUMPDEST DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0xA0 DUP6 SWAP1 SHL OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 DUP1 LOG4 STOP JUMPDEST PUSH2 0x128B SWAP6 POP PUSH2 0x2DB SWAP4 SWAP5 POP SWAP1 PUSH2 0x127B PUSH2 0x1283 SWAP3 DUP5 DUP11 SSTORE MLOAD PUSH2 0x32E7 JUMP JUMPDEST SWAP1 MLOAD SWAP1 PUSH2 0x3313 JUMP JUMPDEST SWAP3 SLOAD SWAP1 PUSH2 0x3300 JUMP JUMPDEST SWAP2 ADD SSTORE PUSH2 0x123A JUMP JUMPDEST PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA2 SHL OR SWAP1 SWAP4 SSTORE POP SWAP1 DUP2 SSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x4 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 DUP1 LOG4 STOP JUMPDEST POP PUSH1 0x5 DUP8 ADD SLOAD ISZERO ISZERO PUSH2 0x11BD JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574746C653A20706F6F6C207374617465206D757374206265204D41544348 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574746C653A2074696D65206973206C657373207468616E20736574746C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x2074696D65 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1391 PUSH2 0x2D87 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x13C5 JUMPI DUP1 PUSH1 0x1 SLOAD PUSH32 0xFA6189B739625142C695478E9D0095A1CB9E6FAD92AD8A727E0055A5CC85B06B PUSH1 0x0 DUP1 LOG3 PUSH1 0x1 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A206D696E416D6F756E74206973207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH2 0x1423 PUSH2 0x2CE2 JUMP JUMPDEST PUSH2 0x142B PUSH2 0x2D87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x1479 JUMPI DUP2 PUSH1 0x3 SLOAD SWAP2 DUP3 AND PUSH32 0xD44190ACF9D04BDB5D3A1AAFFF7E6DEE8B40B93DFB8C5D3F0EEA4B9F4539C3F7 PUSH1 0x0 DUP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND OR PUSH1 0x3 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A2066656541646472657373206973207A65726F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x61646472657373 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1532 PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x1541 PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0x154D PUSH2 0x1F7 DUP3 PUSH2 0x2C7B JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x155A DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x1772 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x174C JUMPI JUMPDEST PUSH2 0x1584 SWAP1 PUSH2 0x3158 JUMP JUMPDEST PUSH2 0x158D DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP PUSH2 0x1597 DUP3 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP2 CALLER PUSH1 0x0 MSTORE PUSH1 0xA DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD SWAP3 DUP4 ISZERO PUSH2 0x1707 JUMPI PUSH1 0x2 ADD SWAP3 PUSH1 0xFF DUP5 SLOAD PUSH1 0x8 SHR AND PUSH2 0x16C2 JUMPI PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x15EF PUSH2 0x15E4 PUSH2 0x15F6 SWAP4 PUSH2 0x327B JUMP JUMPDEST PUSH1 0x4 DUP7 ADD SLOAD SWAP1 PUSH2 0x3313 JUMP JUMPDEST SWAP1 SLOAD PUSH2 0x3300 JUMP JUMPDEST PUSH1 0x9 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 DIV PUSH1 0x24 DUP4 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP2 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP2 DUP7 SWAP1 DUP6 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP9 AND GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x16B6 JUMPI PUSH32 0x6F4DD2687B3C3BFA99D39742B01D6E0AD9604C48559791D5DF4FF5DF44B41DFD SWAP5 PUSH1 0x7 SWAP4 PUSH2 0x1689 JUMPI JUMPDEST POP DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE ADD SLOAD PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE AND SWAP3 CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH2 0x16A8 SWAP1 DUP9 RETURNDATASIZE DUP11 GT PUSH2 0x16AF JUMPI JUMPDEST PUSH2 0x16A0 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3362 JUMP JUMPDEST POP DUP8 PUSH2 0x1667 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1696 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636C61696D4C656E64203A616C726561647920636C61696D6564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636C61696D4C656E64203A63616E6E6F74206765742073705F746F6B656E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x175A DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x157B JUMP JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x1780 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ PUSH2 0x1574 JUMP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0x1 PUSH2 0x17B8 PUSH1 0x4 CALLDATALOAD PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD TIMESTAMP LT ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH32 0x8DDDB57468CF5338EE155397AD1400A7A564308824F517D20A8A7C516523BB47 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x182B DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 PUSH1 0xB PUSH8 0xDE0B6B3A7640000 PUSH2 0x1868 PUSH2 0x185E PUSH2 0x1851 PUSH2 0x184A DUP7 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP6 PUSH2 0x34FF JUMP JUMPDEST PUSH2 0x127B PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x327B JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV SWAP2 SLOAD SWAP3 ADD SLOAD PUSH4 0x5F5E100 SWAP1 DUP2 ADD SWAP3 DUP2 DUP5 LT PUSH2 0x1894 JUMPI PUSH1 0x20 SWAP4 PUSH2 0x188A SWAP2 PUSH2 0x3300 JUMP JUMPDEST DIV GT PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH2 0x190A CALLDATASIZE PUSH2 0x2CCC JUMP JUMPDEST SWAP1 PUSH2 0x1913 PUSH2 0x2D87 JUMP JUMPDEST DUP1 PUSH1 0x5 SSTORE DUP2 PUSH1 0x6 SSTORE PUSH32 0x32DC6A2D839EB179729A55633FDF1C41A1FC4739394154117005DB2B354B9B5 PUSH1 0x0 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH2 0x140 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x24 SWAP1 PUSH1 0x4 CALLDATALOAD SWAP1 DUP3 CALLDATALOAD PUSH1 0xA4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x46D JUMPI PUSH1 0xC4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x46D JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP3 SWAP1 DUP4 SWAP1 SUB PUSH2 0x46D JUMPI PUSH2 0x104 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP5 SWAP1 DUP6 SWAP1 SUB PUSH2 0x46D JUMPI PUSH2 0x19DB PUSH2 0x2D87 JUMP JUMPDEST DUP7 DUP2 GT ISZERO PUSH2 0x1D3F JUMPI DUP5 ISZERO PUSH2 0x1CEE JUMPI DUP4 ISZERO PUSH2 0x1C9D JUMPI PUSH1 0x40 MLOAD SWAP7 PUSH2 0x1A0 DUP9 ADD DUP9 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1C88 JUMPI PUSH1 0x40 MSTORE DUP8 MSTORE PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0xE0 DUP7 ADD MSTORE PUSH2 0x100 DUP6 ADD MSTORE PUSH1 0x0 PUSH2 0x120 DUP6 ADD MSTORE DUP3 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD MSTORE PUSH2 0x124 CALLDATALOAD PUSH2 0x180 DUP4 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x1C73 JUMPI DUP1 PUSH1 0x1 PUSH2 0x1A81 SWAP3 ADD PUSH1 0x7 SSTORE PUSH2 0x2C7B JUMP JUMPDEST SWAP3 SWAP1 SWAP3 PUSH2 0x1C5E JUMPI DUP1 MLOAD DUP4 SSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP5 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 DUP5 ADD SSTORE PUSH1 0x7 DUP4 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xE0 DUP3 ADD MLOAD AND SWAP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP3 DUP4 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x8 DUP5 ADD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x100 DUP4 ADD MLOAD AND SWAP4 DUP4 SLOAD SWAP4 PUSH2 0x120 DUP5 ADD MLOAD SWAP5 PUSH1 0x5 DUP7 LT ISZERO PUSH2 0x1C49 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SWAP6 OR PUSH1 0xA0 SWAP5 SWAP1 SWAP5 SHL PUSH1 0xFF PUSH1 0xA0 SHL AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP4 SSTORE SWAP1 DUP2 ADD MLOAD PUSH1 0x9 DUP5 ADD DUP1 SLOAD DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH2 0x160 DUP3 ADD MLOAD PUSH1 0xA DUP6 ADD DUP1 SLOAD SWAP1 SWAP5 AND SWAP2 AND OR SWAP1 SWAP2 SSTORE PUSH2 0x180 ADD MLOAD PUSH1 0xB SWAP2 SWAP1 SWAP2 ADD SSTORE PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR PUSH2 0x1C34 JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP4 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x80 DUP5 ADD SWAP2 PUSH1 0x0 DUP4 MSTORE PUSH1 0xA0 DUP6 ADD SWAP4 PUSH1 0x0 DUP6 MSTORE PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x1C1F JUMPI DUP1 PUSH1 0x1 PUSH2 0x1BDF SWAP3 ADD PUSH1 0x8 SSTORE PUSH2 0x2CF8 JUMP JUMPDEST SWAP7 SWAP1 SWAP7 PUSH2 0x1C0A JUMPI MLOAD DUP7 SSTORE MLOAD PUSH1 0x1 DUP7 ADD SSTORE MLOAD PUSH1 0x2 DUP6 ADD SSTORE MLOAD PUSH1 0x3 DUP5 ADD SSTORE MLOAD PUSH1 0x4 DUP4 ADD SSTORE MLOAD PUSH1 0x5 SWAP1 SWAP2 ADD SSTORE STOP JUMPDEST DUP8 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP8 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP3 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP10 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE DUP1 DUP10 ADD DUP10 SWAP1 MSTORE PUSH32 0x637265617465506F6F6C203A207370546F6B656E206973207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE DUP1 DUP10 ADD DUP10 SWAP1 MSTORE PUSH32 0x637265617465506F6F6C203A206A70546F6B656E206973207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 DUP2 DUP11 ADD MSTORE PUSH32 0x637265617465506F6F6C203A20656E6454696D65206D75737420626520677265 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x61746572207468616E20736574746C6554696D65 PUSH1 0x60 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1DBC PUSH2 0x2D87 JUMP JUMPDEST PUSH2 0x1DC5 DUP2 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP1 PUSH2 0x1DD0 DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 DUP2 SLOAD SWAP3 DUP4 TIMESTAMP GT ISZERO PUSH2 0x1F47 JUMPI PUSH1 0x8 DUP4 ADD SWAP1 DUP2 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x1 SUB PUSH2 0x1EF2 JUMPI PUSH2 0x1EBD PUSH2 0x73C PUSH2 0x7E2 PUSH1 0x3 SWAP9 DUP9 PUSH2 0x1E80 PUSH1 0x5 SWAP7 PUSH2 0x1E56 DUP10 PUSH7 0x2386F26FC10000 PUSH2 0x758 PUSH1 0x1 SWAP16 PUSH1 0x7 ADD SWAP7 PUSH1 0x1 PUSH1 0x2 PUSH4 0x1E13380 PUSH2 0x1E49 DUP4 PUSH2 0x752 SWAP5 PUSH1 0xA0 SHL SUB SWAP15 DUP16 DUP14 SLOAD AND SWAP14 PUSH1 0x1 DUP8 ADD SLOAD PUSH2 0x30BA JUMP JUMPDEST DIV SWAP3 ADD SLOAD SWAP5 SLOAD DUP1 SWAP6 PUSH2 0x3300 JUMP JUMPDEST SWAP4 DUP7 PUSH4 0x5F5E100 PUSH2 0x1E70 PUSH2 0x1E6A DUP13 SLOAD PUSH2 0x309C JUMP JUMPDEST DUP9 PUSH2 0x3300 JUMP JUMPDEST DIV SWAP3 AND DUP8 PUSH1 0x2 SLOAD PUSH1 0x8 SHR AND PUSH2 0x3639 JUMP JUMPDEST SWAP2 SWAP1 SWAP3 DUP1 DUP4 GT PUSH1 0x0 EQ PUSH2 0x1EE6 JUMPI SWAP2 PUSH2 0x7CF PUSH2 0x1E9E PUSH2 0x1EAF SWAP5 DUP4 PUSH2 0x30BA JUMP JUMPDEST DUP1 SWAP4 DUP16 DUP10 DUP1 SWAP2 SLOAD AND SWAP2 SLOAD AND SWAP1 PUSH2 0x31A4 JUMP JUMPDEST PUSH1 0x4 DUP8 ADD SSTORE DUP9 DUP7 ADD SLOAD PUSH2 0x30BA JUMP JUMPDEST SWAP2 ADD SSTORE DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0xA0 DUP6 SWAP1 SHL OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 LOG4 STOP JUMPDEST POP POP PUSH1 0x4 DUP8 ADD SSTORE PUSH2 0x7D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6C69717569646174653A20706F6F6C207374617465206D757374206265206578 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32B1BABA34B7B7 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6C69717569646174653A2074696D65206973206C657373207468616E20736574 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x746C652074696D65 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH2 0x1FDF PUSH2 0x2CE2 JUMP JUMPDEST PUSH2 0x1FE7 PUSH2 0x2D87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP1 DUP3 AND DUP1 ISZERO PUSH2 0x204A JUMPI PUSH1 0x2 SLOAD SWAP3 DUP4 PUSH1 0x8 SHR AND PUSH32 0x4558149B3C5427365F76D4FF19BEF30ABA41F17E5E601D4661330D8D2B687627 PUSH1 0x0 DUP1 LOG3 PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB AND OR PUSH1 0x2 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A2073776170526F75746572206973207A65726F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x61646472657373 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x20C0 PUSH2 0x2CE2 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH2 0xBD2 PUSH1 0x2 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 ADD SLOAD PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0xFF DUP1 DUP5 PUSH1 0x8 SHR AND SWAP4 AND SWAP2 DUP6 SWAP3 PUSH1 0x60 SWAP3 SWAP6 SWAP5 SWAP2 SWAP6 PUSH1 0x80 DUP6 ADD SWAP7 DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0x40 DUP5 ADD MSTORE ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x213D PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x214C PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0x2158 PUSH2 0x1F7 DUP3 PUSH2 0x2C7B JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x2165 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x239D JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x2377 JUMPI JUMPDEST PUSH2 0x218F SWAP1 PUSH2 0x3158 JUMP JUMPDEST PUSH2 0x2198 DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 PUSH2 0x21A3 DUP2 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0x9 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x2328 JUMPI PUSH1 0x2 ADD SWAP3 PUSH1 0xFF DUP5 SLOAD PUSH1 0x8 SHR AND PUSH2 0x22E3 JUMPI PUSH1 0x0 SWAP1 PUSH2 0x2206 PUSH2 0x21FB PUSH4 0x5F5E100 PUSH2 0x21F4 DUP8 SLOAD PUSH1 0x6 DUP7 ADD SLOAD SWAP1 PUSH2 0x3300 JUMP JUMPDEST DIV SWAP5 PUSH2 0x327B JUMP JUMPDEST PUSH1 0x5 DUP4 ADD SLOAD SWAP1 PUSH2 0x3313 JUMP JUMPDEST DUP1 SWAP4 PUSH2 0x221C PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 SWAP3 PUSH2 0x3300 JUMP JUMPDEST PUSH1 0xA DUP5 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 DIV PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP2 SWAP5 DUP10 SWAP2 DUP7 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 SWAP1 DUP11 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x16B6 JUMPI PUSH32 0x3DDAFE3EBB4D0C818317027AABFA82DC9983942CEEB80523167E2DE047B17FBD SWAP7 PUSH1 0x8 SWAP6 PUSH2 0x2292 SWAP4 PUSH2 0x22C6 JUMPI JUMPDEST POP SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV SWAP5 PUSH2 0x22A5 DUP7 DUP6 PUSH1 0x7 DUP6 ADD SLOAD AND CALLER PUSH2 0x31A4 JUMP JUMPDEST DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE ADD SLOAD PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE AND SWAP3 CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH2 0x22DC SWAP1 DUP12 RETURNDATASIZE DUP14 GT PUSH2 0x16AF JUMPI PUSH2 0x16A0 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST POP DUP11 PUSH2 0x228B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636C61696D426F72726F77203A20616C726561647920636C61696D6564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636C61696D426F72726F77203A2063616E6E6F7420676574206A705F746F6B65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x2385 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x2186 JUMP JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x23AB DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ PUSH2 0x217F JUMP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH2 0x23D1 CALLDATASIZE PUSH2 0x2CCC JUMP JUMPDEST SWAP1 PUSH2 0x23DA PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x23E9 PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x23F6 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ DUP1 ISZERO PUSH2 0x26A4 JUMPI JUMPDEST PUSH2 0x2419 SWAP1 PUSH2 0x337A JUMP JUMPDEST PUSH2 0x242C PUSH2 0x2425 DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP2 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP2 DUP1 ISZERO PUSH2 0x265F JUMPI PUSH1 0x9 DUP3 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x20 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP2 SWAP1 DUP7 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP9 AND GAS CALL DUP1 ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x2642 JUMPI JUMPDEST POP PUSH2 0x248C DUP2 SLOAD PUSH2 0x2DB DUP6 PUSH2 0x327B JUMP JUMPDEST SWAP1 PUSH1 0x8 DUP6 ADD PUSH1 0xFF DUP2 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ PUSH2 0x2589 JUMPI JUMPDEST SLOAD PUSH1 0xA0 SHR PUSH1 0xFF AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x24C9 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST DUP5 SLOAD TIMESTAMP LT PUSH2 0x2538 JUMPI PUSH2 0x24EA PUSH1 0x7 SWAP3 PUSH1 0x4 PUSH8 0xDE0B6B3A7640000 SWAP4 ADD SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV SWAP4 ADD PUSH2 0x24FB DUP5 DUP4 DUP4 SLOAD AND CALLER PUSH2 0x31A4 JUMP JUMPDEST SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD MSTORE PUSH32 0x690F32CCF3E832D5FF975D781039BC2AFFEBEE9C973939C9B710091B87954C9D PUSH1 0x40 CALLER SWAP3 LOG3 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x24C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x77697468647261774C656E64203A206C657373207468616E20736574746C6520 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x74696D65 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP7 ADD SLOAD TIMESTAMP LT PUSH2 0x25FD JUMPI PUSH1 0xFF SWAP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x25AE DUP6 PUSH1 0x2 DUP7 ADD SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV DUP6 PUSH1 0x7 DUP10 ADD PUSH2 0x25C2 DUP4 DUP4 DUP4 SLOAD AND CALLER PUSH2 0x31A4 JUMP JUMPDEST SLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE DUP8 DUP11 DUP3 ADD MSTORE PUSH32 0x690F32CCF3E832D5FF975D781039BC2AFFEBEE9C973939C9B710091B87954C9D PUSH1 0x40 CALLER SWAP3 LOG3 SWAP1 POP PUSH2 0x24AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77697468647261774C656E64203A206E6F7420656E642074696D650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x2658 SWAP1 DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x16AF JUMPI PUSH2 0x16A0 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST POP DUP6 PUSH2 0x247D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77697468647261774C656E64203A207370416D6F756E74206973207A65726F00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x26B2 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x2410 JUMP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH2 0x26D8 CALLDATASIZE PUSH2 0x2CCC JUMP JUMPDEST PUSH2 0x26E0 PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x26EF PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x26FC DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ DUP1 ISZERO PUSH2 0x29DA JUMPI JUMPDEST PUSH2 0x271F SWAP1 PUSH2 0x337A JUMP JUMPDEST PUSH2 0x2732 PUSH2 0x272B DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP3 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP1 DUP1 ISZERO PUSH2 0x2985 JUMPI PUSH1 0xA DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x20 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP3 SWAP1 SWAP2 SWAP1 DUP7 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP11 AND GAS CALL DUP1 ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x2968 JUMPI JUMPDEST POP PUSH2 0x27A7 PUSH4 0x5F5E100 PUSH2 0x279D DUP5 SLOAD PUSH1 0x6 DUP6 ADD SLOAD SWAP1 PUSH2 0x3300 JUMP JUMPDEST DIV PUSH2 0x2DB DUP6 PUSH2 0x327B JUMP JUMPDEST PUSH1 0x8 DUP3 ADD SWAP3 DUP4 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ PUSH2 0x28A9 JUMPI JUMPDEST POP DUP4 SLOAD SWAP3 PUSH1 0xFF DUP5 PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x27E8 JUMPI PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST SLOAD TIMESTAMP LT PUSH2 0x2856 JUMPI SWAP2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x280C PUSH2 0x2817 SWAP4 PUSH1 0x5 DUP10 SWAP8 SWAP7 ADD SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV SWAP6 DUP7 SWAP2 AND CALLER PUSH2 0x31A4 JUMP JUMPDEST SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD MSTORE PUSH32 0xF5E74952C2F9259A748F3AA9A6C4534A6F46A5966E5BAABDB6BD337F05234A8 PUSH1 0x40 CALLER SWAP3 LOG3 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x24C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7769746864726177426F72726F77203A206C657373207468616E206D61746368 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x2074696D65 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD TIMESTAMP LT PUSH2 0x2917 JUMPI PUSH2 0x28DB DUP8 SWAP2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x28D0 DUP7 PUSH1 0x3 DUP8 ADD SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV SWAP3 DUP4 SWAP2 AND CALLER PUSH2 0x31A4 JUMP JUMPDEST DUP7 DUP6 SLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE DUP7 DUP10 DUP3 ADD MSTORE PUSH32 0xF5E74952C2F9259A748F3AA9A6C4534A6F46A5966E5BAABDB6BD337F05234A8 PUSH1 0x40 CALLER SWAP3 LOG3 DUP8 PUSH2 0x27C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7769746864726177426F72726F77203A206C657373207468616E20656E642074 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x696D65 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x297E SWAP1 DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x16AF JUMPI PUSH2 0x16A0 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST POP DUP6 PUSH2 0x2784 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7769746864726177426F72726F773A20776974686472617720616D6F756E7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x6973207A65726F PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x29E8 DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x2716 JUMP JUMPDEST PUSH2 0x2A09 CALLDATASIZE PUSH2 0x2CCC JUMP JUMPDEST PUSH2 0x2A11 PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x2A20 PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0x2A2C PUSH2 0xF6F DUP4 PUSH2 0x2C7B JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x2A39 DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH2 0x2A53 SWAP1 ISZERO PUSH2 0x2F56 JUMP JUMPDEST PUSH2 0x2A5C DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP2 CALLER PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x8 DUP4 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x2A91 DUP5 DUP5 DUP5 SLOAD AND PUSH2 0x2FD6 JUMP JUMPDEST SWAP5 DUP6 ISZERO PUSH2 0x2B29 JUMPI PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE DUP3 SLOAD PUSH1 0x5 SWAP3 SWAP1 DUP6 AND PUSH2 0x2B09 JUMPI PUSH2 0x2ABD DUP2 SLOAD CALLVALUE SWAP1 PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE ADD PUSH2 0x2ACB CALLVALUE DUP3 SLOAD PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE JUMPDEST SLOAD AND SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x1D7B72E666A0B6217EFE7CFA1B604EA5C7B39219563CE48B30C9DA77045247A5 PUSH1 0x40 CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH2 0x2B14 DUP7 DUP3 SLOAD PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE ADD PUSH2 0x2B22 DUP5 DUP3 SLOAD PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x2ACE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6465706F736974426F72726F773A206465706F73697420616D6F756E74206973 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH2 0x2B9A PUSH1 0x4 CALLDATALOAD PUSH2 0x2C7B JUMP JUMPDEST POP SLOAD TIMESTAMP LT ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0x46D JUMPI PUSH2 0x2BCE SWAP1 PUSH2 0x2C7B JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP3 PUSH1 0xFF PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD SWAP1 PUSH1 0x6 DUP6 ADD SLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 PUSH1 0x7 DUP9 ADD SLOAD AND SWAP3 PUSH1 0x8 DUP9 ADD SLOAD SWAP6 DUP6 PUSH1 0x9 DUP11 ADD SLOAD AND SWAP12 PUSH1 0xB DUP8 PUSH1 0xA DUP13 ADD SLOAD AND SWAP11 ADD SLOAD SWAP11 PUSH1 0x40 MLOAD SWAP13 DUP14 MSTORE PUSH1 0x20 DUP14 ADD MSTORE PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD MSTORE PUSH1 0x80 DUP11 ADD MSTORE PUSH1 0xA0 DUP10 ADD MSTORE PUSH1 0xC0 DUP9 ADD MSTORE PUSH1 0xE0 DUP8 ADD MSTORE DUP2 AND PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0xA0 SHR AND SWAP4 PUSH1 0x5 DUP6 LT ISZERO PUSH2 0x431 JUMPI PUSH2 0x1A0 SWAP5 PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD MSTORE PUSH2 0x180 DUP3 ADD MSTORE RETURN JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0x2CB6 JUMPI PUSH1 0xC SWAP1 PUSH1 0x7 PUSH1 0x0 MSTORE MUL PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C688 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x46D JUMPI JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x2CB6 JUMPI PUSH1 0x6 SWAP1 PUSH1 0x8 PUSH1 0x0 MSTORE MUL PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2D4F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2D4F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 SWAP1 DUP2 DUP2 ADD SWAP1 CALLER PUSH1 0x60 SHL DUP3 MSTORE ADDRESS PUSH1 0x60 SHL PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x28 DUP2 MSTORE PUSH2 0x2DAD DUP2 PUSH2 0x2D33 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH32 0x8DDDB57468CF5338EE155397AD1400A7A564308824F517D20A8A7C516523BB47 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF5D50B3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 PUSH1 0x24 DUP4 ADD MSTORE DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x16B6 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2E75 JUMPI JUMPDEST POP ISZERO PUSH2 0x2E1A JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D756C74695369676E6174757265436C69656E74203A20546869732074782069 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x1CC81B9BDD08185C1C9C9BDD9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP3 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2E9E JUMPI JUMPDEST PUSH2 0x2E8B DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x2E9B JUMPI POP MLOAD CODESIZE PUSH2 0x2E11 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x2E81 JUMP JUMPDEST ISZERO PUSH2 0x2EAC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A205374616B6520686173206265656E2073757370 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x195B991959 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2F06 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A204C657373207468616E20736574746C65207469 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6D65 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2F5D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73746174653A20506F6F6C20737461747573206973206E6F7420657175616C20 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xE8DE40DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ PUSH2 0x2FC4 JUMPI PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x2FEA JUMPI POP POP CALLVALUE SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x2FF3 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP2 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT DUP3 DUP5 LT OR PUSH2 0x2D4F JUMPI PUSH2 0x303D SWAP3 PUSH1 0x40 MSTORE PUSH2 0x3040 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 PUSH1 0x20 SWAP2 DUP3 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL ISZERO PUSH2 0x16B6 JUMPI PUSH1 0x0 MLOAD RETURNDATASIZE PUSH2 0x3093 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE ISZERO JUMPDEST PUSH2 0x3071 JUMPI POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0x306A JUMP JUMPDEST PUSH4 0x5F5E100 DUP2 ADD SWAP1 DUP2 LT PUSH2 0x1894 JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP2 ADD SWAP1 DUP2 LT PUSH2 0x1894 JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP2 SUB SWAP1 DUP2 GT PUSH2 0x30C7 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3113 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A20416674657220736574746C652074696D650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x315F JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73746174653A206E6F74206D6174636820616E6420756E646F6E650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 SWAP2 SWAP1 DUP4 PUSH2 0x320C JUMPI DUP3 PUSH1 0x0 DUP2 ISZERO PUSH2 0x3203 JUMPI JUMPDEST PUSH1 0x0 DUP1 DUP1 SWAP4 DUP2 SWAP4 DUP8 DUP8 AND SWAP1 CALL ISZERO PUSH2 0x16B6 JUMPI PUSH32 0xD12200EFA34901B99367694174C3B0D32C99585FDF37C7C26892136DDD0836D9 SWAP2 PUSH1 0x20 SWAP2 JUMPDEST PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND SWAP3 LOG3 JUMP JUMPDEST POP PUSH2 0x8FC PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP3 MSTORE PUSH32 0xD12200EFA34901B99367694174C3B0D32C99585FDF37C7C26892136DDD0836D9 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 PUSH2 0x3276 SWAP1 PUSH2 0x3270 PUSH1 0x64 DUP3 PUSH2 0x2D65 JUMP JUMPDEST DUP8 PUSH2 0x3040 JUMP JUMPDEST PUSH2 0x31F8 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 ISZERO SWAP2 DUP4 DIV EQ OR ISZERO PUSH2 0x3298 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D756C7469706C69636174696F6E206F766572666C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x5F5E100 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 ISZERO SWAP2 DUP4 DIV EQ OR ISZERO PUSH2 0x3298 JUMPI SWAP1 JUMP JUMPDEST DUP2 DUP2 MUL SWAP2 DUP2 ISZERO SWAP2 DUP4 DIV EQ OR ISZERO PUSH2 0x3298 JUMPI SWAP1 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x331D JUMPI DIV SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x46D JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x46D JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3381 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73746174653A2066696E697368206C69717569646174696F6E00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x33CD JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73746174653A207374617465206D75737420626520756E646F6E650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 PUSH4 0x5F5E100 PUSH2 0x3425 PUSH2 0x303D SWAP5 DUP4 PUSH2 0x3300 JUMP JUMPDEST DIV SWAP2 DUP3 DUP1 PUSH2 0x3435 JUMPI JUMPDEST POP POP PUSH2 0x30BA JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x344B SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x31A4 JUMP JUMPDEST CODESIZE DUP3 PUSH2 0x342E JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x2CB6 JUMPI PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 LT ISZERO PUSH2 0x2CB6 JUMPI PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x2CB6 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP4 DUP3 SUB SLT PUSH2 0x46D JUMPI DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP5 DUP3 GT PUSH2 0x46D JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x46D JUMPI DUP1 MLOAD SWAP4 DUP5 GT PUSH2 0x2D4F JUMPI DUP4 PUSH1 0x5 SHL SWAP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x34CD DUP6 DUP5 ADD DUP8 PUSH2 0x2D65 JUMP JUMPDEST DUP6 MSTORE DUP4 DUP1 DUP7 ADD SWAP3 DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x46D JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x34F0 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x34E2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP2 DUP4 ADD DUP5 DUP2 GT DUP4 DUP3 LT OR PUSH2 0x2D4F JUMPI PUSH2 0x352B SWAP3 DUP5 SWAP2 DUP3 MSTORE CALLDATASIZE SWAP1 CALLDATACOPY PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 DUP1 MLOAD SWAP2 PUSH2 0x3539 DUP4 PUSH2 0x2D33 JUMP JUMPDEST PUSH1 0x2 DUP4 MSTORE PUSH1 0x20 SWAP3 PUSH1 0x8 DUP5 DUP3 ADD SWAP3 DUP5 CALLDATASIZE DUP6 CALLDATACOPY PUSH1 0x7 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 SWAP3 SWAP1 SWAP2 DUP4 AND PUSH2 0x3567 DUP7 PUSH2 0x3452 JUMP JUMPDEST MSTORE ADD SLOAD AND PUSH2 0x3574 DUP4 PUSH2 0x345F JUMP JUMPDEST MSTORE PUSH1 0x4 SLOAD AND SWAP1 DUP4 MLOAD SWAP3 DUP4 SWAP2 PUSH4 0x4E59D27 PUSH1 0xE1 SHL DUP4 MSTORE PUSH1 0x24 DUP4 ADD SWAP1 DUP8 PUSH1 0x4 DUP6 ADD MSTORE MLOAD DUP1 SWAP2 MSTORE PUSH1 0x44 DUP4 ADD SWAP2 SWAP1 PUSH1 0x0 JUMPDEST DUP9 DUP3 DUP3 LT PUSH2 0x3622 JUMPI POP POP POP POP SWAP2 DUP2 DUP1 PUSH1 0x0 SWAP5 SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x3617 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x35F6 JUMPI JUMPDEST POP DUP2 MLOAD SWAP4 DUP5 DUP4 ADD SWAP1 DUP2 GT DUP6 DUP3 LT OR PUSH2 0x2D4F JUMPI PUSH2 0x35EE SWAP3 MSTORE PUSH2 0x35E6 DUP2 PUSH2 0x3452 JUMP JUMPDEST MLOAD DUP5 MSTORE PUSH2 0x345F JUMP JUMPDEST MLOAD SWAP1 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x3611 SWAP2 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x3609 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3483 JUMP JUMPDEST CODESIZE PUSH2 0x35C6 JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP8 SWAP6 POP SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x35A1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x0 DUP2 ISZERO PUSH2 0x3911 JUMPI POP PUSH1 0x0 PUSH2 0x3681 SWAP2 PUSH2 0x3658 DUP5 DUP7 DUP10 PUSH2 0x3975 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP3 DUP4 SWAP3 PUSH4 0x7C0329D PUSH1 0xE2 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0x3919 JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x36A7 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x38F8 JUMPI JUMPDEST POP PUSH2 0x3452 JUMP JUMPDEST MLOAD SWAP4 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP3 DUP4 ISZERO SWAP1 PUSH2 0x36DA SWAP1 DUP3 ISZERO PUSH2 0x38E9 JUMPI JUMPDEST DUP4 DUP2 AND SWAP7 DUP8 ISZERO SWAP5 DUP6 ISZERO PUSH2 0x38DA JUMPI JUMPDEST DUP7 AND SWAP6 PUSH2 0x3975 JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP2 ISZERO PUSH2 0x37E4 JUMPI POP POP SWAP1 PUSH1 0x1E TIMESTAMP ADD SWAP2 DUP3 TIMESTAMP GT PUSH2 0x37B5 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3724 SWAP2 DUP9 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0x7FF36AB5 PUSH1 0xE0 SHL DUP5 MSTORE DUP9 PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x80 PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x84 DUP5 ADD SWAP1 PUSH2 0x3919 JUMP JUMPDEST SWAP1 ADDRESS PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD MSTORE SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x16B6 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x37CB JUMPI JUMPDEST POP SWAP2 JUMPDEST PUSH2 0x374F DUP4 PUSH2 0x3452 JUMP JUMPDEST MLOAD DUP4 MLOAD PUSH1 0x0 NOT SWAP4 SWAP2 SWAP1 DUP5 DUP2 ADD SWAP1 DUP2 GT PUSH2 0x37B5 JUMPI PUSH32 0xFA2DDA1CC1B86E41239702756B13EFFBC1A092B5C57E3AD320FBE4F3B13FE235 SWAP2 PUSH2 0x3790 PUSH1 0x40 SWAP3 DUP9 PUSH2 0x346F JUMP JUMPDEST MLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG3 DUP2 MLOAD SWAP1 DUP2 ADD SWAP1 DUP2 GT PUSH2 0x37B5 JUMPI PUSH2 0x37B1 SWAP2 PUSH2 0x346F JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x37DE SWAP2 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x3609 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST CODESIZE PUSH2 0x3743 JUMP JUMPDEST ISZERO PUSH2 0x3850 JUMPI POP PUSH1 0x1E TIMESTAMP ADD DUP1 TIMESTAMP GT PUSH2 0x37B5 JUMPI PUSH2 0x381D SWAP3 DUP8 PUSH1 0x0 DUP1 SWAP5 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH4 0x2512ECA5 PUSH1 0xE1 SHL DUP6 MSTORE ADDRESS SWAP2 PUSH1 0x4 DUP7 ADD PUSH2 0x3A93 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x16B6 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3837 JUMPI JUMPDEST POP SWAP2 PUSH2 0x3746 JUMP JUMPDEST PUSH2 0x384A SWAP2 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x3609 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST CODESIZE PUSH2 0x3830 JUMP JUMPDEST SWAP2 PUSH1 0x1E TIMESTAMP ADD SWAP2 DUP3 TIMESTAMP GT PUSH2 0x38C6 JUMPI SWAP2 DUP4 SWAP2 DUP9 DUP4 PUSH2 0x3885 SWAP6 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH4 0x38ED1739 PUSH1 0xE0 SHL DUP6 MSTORE ADDRESS SWAP2 PUSH1 0x4 DUP7 ADD PUSH2 0x3A93 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x38BA JUMPI DUP1 SWAP3 PUSH2 0x389F JUMPI JUMPDEST POP POP SWAP2 PUSH2 0x3746 JUMP JUMPDEST PUSH2 0x38B3 SWAP3 POP RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x3609 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x3897 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH2 0x38E4 DUP8 DUP5 PUSH2 0x3ACD JUMP JUMPDEST PUSH2 0x36D2 JUMP JUMPDEST PUSH2 0x38F3 DUP6 DUP9 PUSH2 0x3ACD JUMP JUMPDEST PUSH2 0x36C4 JUMP JUMPDEST PUSH2 0x390B SWAP2 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x3609 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST CODESIZE PUSH2 0x36A1 JUMP JUMPDEST SWAP1 POP SWAP4 PUSH2 0x36AA JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x3939 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x392B JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x46D JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x46D JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH2 0x3990 DUP6 PUSH2 0x2D33 JUMP JUMPDEST PUSH1 0x2 DUP6 MSTORE PUSH1 0x20 SWAP2 DUP4 CALLDATASIZE DUP5 DUP9 ADD CALLDATACOPY DUP6 SWAP8 DUP6 DUP2 AND ISZERO PUSH1 0x0 EQ PUSH2 0x3A8E JUMPI POP DUP4 MLOAD PUSH4 0x15AB88C9 PUSH1 0xE3 SHL DUP2 MSTORE DUP4 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x3A83 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3A66 JUMPI JUMPDEST POP JUMPDEST DUP6 PUSH2 0x39DA DUP9 PUSH2 0x3452 JUMP JUMPDEST SWAP2 AND SWAP1 MSTORE DUP1 DUP6 AND PUSH2 0x3A58 JUMPI POP SWAP1 DUP1 PUSH1 0x4 SWAP3 DUP5 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x15AB88C9 PUSH1 0xE3 SHL DUP3 MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x3A4E JUMPI POP SWAP1 PUSH2 0x3A1B SWAP3 SWAP2 PUSH1 0x0 SWAP3 PUSH2 0x3A21 JUMPI JUMPDEST POP POP SWAP3 PUSH2 0x345F JUMP JUMPDEST SWAP2 AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x3A40 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x3A47 JUMPI JUMPDEST PUSH2 0x3A38 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3956 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x3A13 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3A2E JUMP JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP POP PUSH2 0x3A1B SWAP2 POP SWAP3 PUSH2 0x345F JUMP JUMPDEST PUSH2 0x3A7D SWAP2 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x3A47 JUMPI PUSH2 0x3A38 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST CODESIZE PUSH2 0x39CE JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x39D0 JUMP JUMPDEST SWAP1 PUSH1 0x80 SWAP3 PUSH2 0x3AB9 SWAP2 SWAP7 SWAP6 SWAP5 SWAP7 DUP4 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD SWAP1 PUSH2 0x3919 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP6 AND PUSH1 0x60 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 NOT PUSH1 0x44 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 SWAP2 PUSH1 0x80 DUP2 ADD DUP5 DUP2 GT DUP3 DUP3 LT OR PUSH2 0x2D4F JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 DUP1 SWAP4 MLOAD SWAP3 GAS CALL SWAP2 RETURNDATASIZE ISZERO PUSH2 0x3BDD JUMPI RETURNDATASIZE SWAP1 DUP2 GT PUSH2 0x3BC9 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3B4D PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP7 ADD DUP4 PUSH2 0x2D65 JUMP JUMPDEST DUP2 MSTORE DUP1 SWAP2 DUP5 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST DUP2 PUSH2 0x3B99 JUMPI JUMPDEST POP ISZERO PUSH2 0x3B66 JUMPI POP JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x2173616665417070726F7665 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 MLOAD DUP1 ISZERO SWAP3 POP DUP4 SWAP1 DUP4 ISZERO PUSH2 0x3BB1 JUMPI JUMPDEST POP POP POP CODESIZE PUSH2 0x3B5D JUMP JUMPDEST PUSH2 0x3BC1 SWAP4 POP DUP3 ADD DUP2 ADD SWAP2 ADD PUSH2 0x3362 JUMP JUMPDEST CODESIZE DUP3 DUP2 PUSH2 0x3BA8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST POP POP PUSH1 0x60 PUSH2 0x3B57 JUMP INVALID MLOAD PUSH2 0x12F3 0xBF MOD 0xE3 PUSH20 0xFCEA44DB364769C04CC7EF4392E6DE95D2B25072 SIGNEXTEND 0xCA 0xCE 0xFB LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0xC7 0xAC NOT PUSH7 0xF51929369415B8 0xD7 0xAB 0xD0 0xAE 0xED DUP14 0xE2 DUP3 RETURNDATASIZE MUL 0xBB 0xBD CALLER SIGNEXTEND PUSH5 0x1D83C0931A PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
          "sourceMap": "566:45426:31:-:0;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;;-1:-1:-1;;;;;566:45426:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;566:45426:31;;;;;;;;;;;;;;;;;;;;:::i;:::-;;-1:-1:-1;566:45426:31;;1549:28:27;;566:45426:31;;1176:39:27;3992:58;1866:6:31;566:45426;;;2339:5;566:45426;;;8315:21;;;566:45426;;;;8393:25;566:45426;;8479:25;;566:45426;;8557:32;566:45426;;-1:-1:-1;;;;;;566:45426:31;;;;;;;;-1:-1:-1;;;;;;566:45426:31;;;;;;;;-1:-1:-1;;;;;566:45426:31;;2339:5;566:45426;8631:22;566:45426;;;;;;;;;;;-1:-1:-1;8663:9:31;566:45426;;;8682:11;566:45426;;;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;-1:-1:-1;566:45426:31;;;;;;-1:-1:-1;566:45426:31;;;;;-1:-1:-1;566:45426:31;;;;-1:-1:-1;;;;;566:45426:31;;;;;;:::o"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "abi_decode_address": {
              "entryPoint": 11490,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_address_fromMemory": {
              "entryPoint": 14678,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_array_uint256_dyn_fromMemory": {
              "entryPoint": 13443,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_bool_fromMemory": {
              "entryPoint": 13154,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_uint256t_uint256": {
              "entryPoint": 11468,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 2
            },
            "abi_encode_address_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_array_address_dyn": {
              "entryPoint": 14617,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_uint256_rational_by_array_address_dyn_address_uint256": {
              "entryPoint": 14995,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_uint256_uint256_bool_bool": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "finalize_allocation": {
              "entryPoint": 11621,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "finalize_allocation_104508": {
              "entryPoint": 11571,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "fun_callOptionalReturn": {
              "entryPoint": 12352,
              "id": 1313,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "fun_checkMultiSignature": {
              "entryPoint": 11655,
              "id": 9181,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "fun_getPayableAmount": {
              "entryPoint": 12246,
              "id": 8491,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_getSwapPath": {
              "entryPoint": 14709,
              "id": 12660,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "fun_getUnderlyingPriceView": {
              "entryPoint": 13567,
              "id": 12599,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_nonReentrantBefore": {
              "entryPoint": 12211,
              "id": 2778,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "fun_redeem": {
              "entryPoint": 12708,
              "id": 8537,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "fun_redeemFees": {
              "entryPoint": 13330,
              "id": 12527,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "fun_safeAdd": {
              "entryPoint": 12461,
              "id": 9900,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_safeAdd_67865": {
              "entryPoint": 12444,
              "id": 9900,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_safeApprove": {
              "entryPoint": 15053,
              "id": 12963,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "fun_safeDiv": {
              "entryPoint": 13075,
              "id": 9978,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_safeMul": {
              "entryPoint": 13056,
              "id": 9952,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_safeMul_67837": {
              "entryPoint": 12923,
              "id": 9952,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_safeMul_67862": {
              "entryPoint": 13031,
              "id": 9952,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_safeSub": {
              "entryPoint": 12474,
              "id": 9926,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_sellExactAmount": {
              "entryPoint": 13881,
              "id": 12748,
              "parameterSlots": 4,
              "returnSlots": 2
            },
            "memory_array_index_access_uint256_dyn": {
              "entryPoint": 13423,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "memory_array_index_access_uint256_dyn_68454": {
              "entryPoint": 13394,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "memory_array_index_access_uint256_dyn_68455": {
              "entryPoint": 13407,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "require_helper_stringliteral_1a04": {
              "entryPoint": 12556,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "require_helper_stringliteral_2e4f": {
              "entryPoint": 12632,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "require_helper_stringliteral_6c7c": {
              "entryPoint": 13178,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "require_helper_stringliteral_8b52": {
              "entryPoint": 12118,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "require_helper_stringliteral_8bfb": {
              "entryPoint": 11941,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "require_helper_stringliteral_a230": {
              "entryPoint": 12031,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "require_helper_stringliteral_d0f5": {
              "entryPoint": 13254,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "storage_array_index_access_struct_PoolBaseInfo_dyn": {
              "entryPoint": 11387,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 2
            },
            "storage_array_index_access_struct_PoolDataInfo_dyn": {
              "entryPoint": 11512,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 2
            }
          },
          "generatedSources": [],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "6080604052600436101561001257600080fd5b60003560e01c80630d6abfc114612ba757806314c090cc14612b7c57806316f941b514612a005780631e107979146126ca57806338f2aa76146123c35780633ab4a445146121205780633c9fadc31461209f5780634127365714611fc65780634127535814611f9d578063415f124014611da0578063459b911c146119605780634aea0aec1461194257806352f7c988146118fc57806361a552dc146118d957806362faecf41461180e578063638c7e17146117c65780636abd7f29146117985780636c42fed2146115155780636de6ff3a146114f75780637dc0d1d0146114ce5780638705fcd41461140a578063897b0637146113755780638df828001461114f57806390590da014610f43578063981b48a614610ed95780639b2cb5d814610ebb5780639d71488e14610e80578063a62ff16414610c11578063b159751714610bd6578063bb176a6414610b51578063bf38b8f614610973578063c31c9c0714610946578063c9333756146108ff578063d353a1cb1461069c578063d431b1ac1461066b578063e271fa0c14610490578063e626648a146104725763eec8d506146101be57600080fd5b3461046d5760208060031936011261046d57600435906101dc612fb3565b6101eb60ff6002541615612ea5565b6102016101f783612c7b565b505442101561310c565b60ff600861020e84612c7b565b50015460a01c166005811015610431576001148015610447575b801561040b575b61023890613158565b61024182612c7b565b5061024b83612cf8565b509233600052600a8352604060002090600052825260406000209081549081156103c657600481015494549061028182876130ba565b1561038157600284019182549360ff851661033c57670de0b6b3a76400006102eb896102e66007956102e07fc3e20279d41b3ed21d277920877e5e5c6665bf6aca607046a3fe0fd2bd6bda7d9b9c9d6102db60019861327b565b613313565b926130ba565b613300565b04960191868355600160ff1980961617845501916001808060a01b03946103168887875416336131a4565b8254161790556103278154866130ad565b90555416926040519283523392a36001600055005b60405162461bcd60e51b815260048101889052601d60248201527f726566756e644c656e64203a20616c726561647920726566756e6465640000006044820152606490fd5b60405162461bcd60e51b815260048101869052601760248201527f726566756e644c656e64203a206e6f7420726566756e640000000000000000006044820152606490fd5b60405162461bcd60e51b815260048101859052601860248201527f726566756e644c656e64203a206e6f7420706c656467656400000000000000006044820152606490fd5b5060ff600861041984612c7b565b50015460a01c1660058110156104315760031461022f565b634e487b7160e01b600052602160045260246000fd5b5060ff600861045584612c7b565b50015460a01c16600581101561043157600214610228565b600080fd5b3461046d57600036600319011261046d576020600654604051908152f35b3461046d5760208060031936011261046d57600435906104ae612fb3565b6104bd60ff6002541615612ea5565b60ff60086104ca84612c7b565b50015460a01c1660058110156104315760046104e691146133c6565b6104ef82612c7b565b5091600583015415610613573360005260098252604060002090600052815260406000209182549081156105ce57600284019060ff8254166105895760080180547f5a06c7de92f1dc59e8cba872927d016c80ce5f0fb2295c898dfb7a2f08e43fb1936001600160a01b03939161056991908516336131a4565b600160ff1982541617905554169254916040519283523392a36001600055005b60405162461bcd60e51b815260048101859052601a60248201527f726566756e64426f72726f773a20616761696e20726566756e640000000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601960248201527f726566756e64426f72726f773a206e6f7420706c6564676564000000000000006044820152606490fd5b60405162461bcd60e51b815260048101839052602a60248201527f656d657267656e6379426f72726f775769746864726177616c203a206e6f74206044820152691dda5d1a191c985dd85b60b21b6064820152608490fd5b3461046d57600036600319011261046d57610684612d87565b60025460ff80821615169060ff191617600255600080f35b3461046d57602036600319011261046d576004356106b8612d87565b6106c181612c7b565b50906106cc81612cf8565b509060016106d982612c7b565b50015442106108ba576008830180549260ff8460a01c16600581101561043157600103610869576007850161078a60018060a01b039561075f8784541698662386f26fc1000061075860026301e1338061074161073c60018701548754906130ba565b6132e7565b049301549261075289548095613300565b90613300565b04906130ad565b97876305f5e10061077a61077460055461309c565b8c613300565b0492168860025460081c16613639565b919095878310610824576107e2600197846107f0948b60029c6003981160001461081957916107cf6107bf6107d494836130ba565b809388808c5416915416906131a4565b6130ba565b8a8701555b888601546130ba565b906006549086541690613412565b910155805460ff60a01b191660a184901b179055600080516020613be7833981519152600080a4005b50508a8701556107d9565b60405162461bcd60e51b815260206004820152601c60248201527f66696e6973683a20536c69707061676520697320746f6f2068696768000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526024808201527f66696e6973683a20706f6f6c207374617465206d7573742062652065786563756044820152633a34b7b760e11b6064820152608490fd5b60405162461bcd60e51b815260206004820152601a60248201527f66696e6973683a206c657373207468616e20656e642074696d650000000000006044820152606490fd5b3461046d5760208060031936011261046d5761091c6004356134ff565b604051916000835b6002821061093157604085f35b82806001928651815201940191019092610924565b3461046d57600036600319011261046d5760025460405160089190911c6001600160a01b03168152602090f35b3461046d5760208060031936011261046d5760043590610991612fb3565b6109a060ff6002541615612ea5565b60ff60086109ad84612c7b565b50015460a01c1660058110156104315760046109c991146133c6565b6109d282612c7b565b5091600483015415610af75733600052600a825260406000209060005281526040600020918254908115610aa457600284019060ff825416610a4c5760070180547f71d14c5f08cb34cbfb59c06ea5151aafbf742d0b6ed00fdb83addd9afb5c0fd0936001600160a01b03939161056991908516336131a4565b60405162461bcd60e51b815260048101859052602a60248201527f656d657267656e63794c656e645769746864726177616c203a20616c726561646044820152691e481c99599d5b99195960b21b6064820152608490fd5b60405162461bcd60e51b815260048101849052602560248201527f656d657267656e63794c656e645769746864726177616c203a206e6f7420706c604482015264195919d95960da1b6064820152608490fd5b60405162461bcd60e51b815260048101839052602c60248201527f656d657267656e63794c656e645769746864726177616c203a206c656e64537560448201526b70706c79206973207a65726f60a01b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b03610b72612ce2565b16600052600a60205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b0390f35b3461046d57602036600319011261046d5760ff6008610bf6600435612c7b565b50015460a01c16600581101561043157602090604051908152f35b3461046d5760208060031936011261046d57600435610c2e612fb3565b610c3d60ff6002541615612ea5565b610c496101f782612c7b565b60ff6008610c5683612c7b565b50015460a01c166005811015610431576001148015610e5a575b8015610e34575b610c8090613158565b610c8981612c7b565b5090610c9481612cf8565b5090336000526009845260406000209060005283526040600020906001600584015491015491610cc483836130ba565b15610def578054918215610daa57600282019384549360ff8516610d65579360019693670de0b6b3a7640000610d2a856102e68b966102e07f732816f48de550f238bd0d4f5b79819c7b24a49d6132928978e3cd36568dd5db9c996102db60089d61327b565b04970187905560ff19161790550180546001600160a01b039190610d529085908416336131a4565b5416926040519283523392a36001600055005b60405162461bcd60e51b815260048101899052601f60248201527f726566756e64426f72726f77203a20616c726561647920726566756e646564006044820152606490fd5b60405162461bcd60e51b815260048101879052601a60248201527f726566756e64426f72726f77203a206e6f7420706c65646765640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601960248201527f726566756e64426f72726f77203a206e6f7420726566756e64000000000000006044820152606490fd5b5060ff6008610e4283612c7b565b50015460a01c16600581101561043157600314610c77565b5060ff6008610e6883612c7b565b50015460a01c16600581101561043157600214610c70565b3461046d57600036600319011261046d5760206040517f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb478152f35b3461046d57600036600319011261046d576020600154604051908152f35b3461046d57602036600319011261046d5760043560085481101561046d57610f0260c091612cf8565b5080549060018101549060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b610f4c36612ccc565b610f54612fb3565b610f6360ff6002541615612ea5565b610f78610f6f83612c7b565b50544210612eff565b60ff6008610f8584612c7b565b50015460a01c16600581101561043157610f9f9015612f56565b610fa882612c7b565b509133600052600a602052604060002090600052602052604060002091600381015490610fdb60048201928354906130ba565b83116110ee5760070180546001600160a01b039290610ffd9085908516612fd6565b946001548611156110935760028101805461ffff191690558254841661107457611029815434906130ad565b90556110363482546130ad565b90555b54169160405191825260208201527f129e8c18c2f7baf99c7eb257934c21f038c72412803512dcf0a942a4562a82ea60403392a36001600055005b61107f8682546130ad565b905561108c8582546130ad565b9055611039565b60405162461bcd60e51b815260206004820152602d60248201527f6465706f7369744c656e643a20616d6f756e74206c657373207468616e206d6960448201526c1b9a5b5d5b4819195c1bdcda5d609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603360248201527f6465706f7369744c656e64203a207374616b65416d6f756e742069732067726560448201527261746572207468616e206d6178537570706c7960681b6064820152608490fd5b3461046d57602036600319011261046d5760043561116b612d87565b61117481612c7b565b509061117f81612cf8565b5061118982612c7b565b50544210611322576008830190815460ff8160a01c166005811015610431576112de576004850190815490811515806112d1575b1561129357505090600180958594936111d76000976134ff565b91602083016111f16111e9825161327b565b855190613313565b936112236006611218670de0b6b3a764000061121260058801998a54613300565b046132e7565b940193845490613313565b9354918483118b1461125f57505050508355549101555b805460ff60a01b191660a085901b179055600080516020613be78339815191528280a4005b61128b95506102db9394509061127b61128392848a55516132e7565b905190613313565b925490613300565b91015561123a565b60ff60a01b1916600160a21b179093555090815560059092015460019290920191909155600490600090600080516020613be78339815191528280a4005b50600587015415156111bd565b606460405162461bcd60e51b815260206004820152602060248201527f736574746c653a20706f6f6c207374617465206d757374206265204d415443486044820152fd5b60405162461bcd60e51b815260206004820152602560248201527f736574746c653a2074696d65206973206c657373207468616e20736574746c656044820152642074696d6560d81b6064820152608490fd5b3461046d57602036600319011261046d57600435611391612d87565b80156113c557806001547ffa6189b739625142c695478e9d0095a1cb9e6fad92ad8a727e0055a5cc85b06b600080a3600155005b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a206d696e416d6f756e74206973207a65726f00006044820152606490fd5b3461046d57602036600319011261046d57611423612ce2565b61142b612d87565b6001600160a01b0390811690811561147957816003549182167fd44190acf9d04bdb5d3a1aafff7e6dee8b40b93dfb8c5d3f0eea4b9f4539c3f7600080a36001600160a01b03191617600355005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2066656541646472657373206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57600036600319011261046d576004546040516001600160a01b039091168152602090f35b3461046d57600036600319011261046d576020600754604051908152f35b3461046d5760208060031936011261046d57600435611532612fb3565b61154160ff6002541615612ea5565b61154d6101f782612c7b565b60ff600861155a83612c7b565b50015460a01c166005811015610431576001148015611772575b801561174c575b61158490613158565b61158d81612c7b565b5061159782612cf8565b509133600052600a845260406000209060005283526040600020918254928315611707576002019260ff845460081c166116c257670de0b6b3a7640000916115ef6115e46115f69361327b565b600486015490613313565b9054613300565b60098301546040516340c10f1960e01b815233600482015292909104602483018190529391926001600160a01b03929186908590604490829060009088165af19182156116b6577f6f4dd2687b3c3bfa99d39742b01d6e0ad9604c48559791d5df4ff5df44b41dfd94600793611689575b50805461ff001916610100179055015460405193845216923392a36001600055005b6116a890883d8a116116af575b6116a08183612d65565b810190613362565b5087611667565b503d611696565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260048101869052601a60248201527f636c61696d4c656e64203a616c726561647920636c61696d65640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601e60248201527f636c61696d4c656e64203a63616e6e6f74206765742073705f746f6b656e00006044820152606490fd5b5060ff600861175a83612c7b565b50015460a01c1660058110156104315760031461157b565b5060ff600861178083612c7b565b50015460a01c16600581101561043157600214611574565b3461046d57602036600319011261046d57602060016117b8600435612c7b565b500154421015604051908152f35b3461046d57600036600319011261046d577f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb47546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d5760043561182b81612c7b565b5090600b670de0b6b3a764000061186861185e61185161184a86612cf8565b50956134ff565b61127b602082015161327b565b6001850154613300565b0491549201546305f5e100908101928184106118945760209361188a91613300565b0411604051908152f35b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606490fd5b3461046d57600036600319011261046d57602060ff600254166040519015158152f35b3461046d5761190a36612ccc565b90611913612d87565b80600555816006557f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5600080a3005b3461046d57600036600319011261046d576020600554604051908152f35b3461046d576101408060031936011261046d5760249060043590823560a4356001600160a01b0381169081900361046d5760c4356001600160a01b0381169081900361046d5760e4356001600160a01b038116929083900361046d57610104356001600160a01b038116949085900361046d576119db612d87565b86811115611d3f578415611cee578315611c9d57604051966101a0880188811067ffffffffffffffff821117611c8857604052875260208701526044356040870152606435606087015260006080870152600060a087015260843560c087015260e086015261010085015260006101208501528284015261016083015261012435610180830152600754600160401b811015611c7357806001611a819201600755612c7b565b929092611c5e57805183556020810151600184015560408101516002840155606081015160038401556080810151600484015560a0810151600584015560c08101516006840155600783019060018060a01b0360e082015116916bffffffffffffffffffffffff60a01b9283825416179055600884019160018060a01b036101008301511693835493610120840151946005861015611c49576001600160a81b03191690951760a09490941b60ff60a01b16939093179093559081015160098401805484166001600160a01b03928316179055610160820151600a850180549094169116179091556101800151600b919091015560405160c0810167ffffffffffffffff811182821017611c34576040526000815260208101600081526040820160008152606083016000815260808401916000835260a085019360008552600854600160401b811015611c1f57806001611bdf9201600855612cf8565b969096611c0a5751865551600186015551600285015551600384015551600483015551600590910155005b87634e487b7160e01b60005260006004526000fd5b87634e487b7160e01b60005260416004526000fd5b82634e487b7160e01b60005260416004526000fd5b88634e487b7160e01b60005260216004526000fd5b83634e487b7160e01b60005260006004526000fd5b83634e487b7160e01b60005260416004526000fd5b89634e487b7160e01b60005260416004526000fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a207370546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a206a70546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526034818a01527f637265617465506f6f6c203a20656e6454696d65206d7573742062652067726560448201527361746572207468616e20736574746c6554696d6560601b6064820152608490fd5b3461046d57602036600319011261046d57600435611dbc612d87565b611dc581612cf8565b5090611dd081612c7b565b509081549283421115611f47576008830190815460ff8160a01c16600581101561043157600103611ef257611ebd61073c6107e260039888611e80600596611e5689662386f26fc1000061075860019f60070196600160026301e13380611e49836107529460a01b039e8f8d54169d60018701546130ba565b0492015494548095613300565b93866305f5e100611e70611e6a8c5461309c565b88613300565b0492168760025460081c16613639565b919092808311600014611ee657916107cf611e9e611eaf94836130ba565b80938f8980915416915416906131a4565b6004870155888601546130ba565b910155805460ff60a01b191660a085901b179055600080516020613be7833981519152600080a4005b505060048701556107d9565b60405162461bcd60e51b815260206004820152602760248201527f6c69717569646174653a20706f6f6c207374617465206d75737420626520657860448201526632b1baba34b7b760c91b6064820152608490fd5b60405162461bcd60e51b815260206004820152602860248201527f6c69717569646174653a2074696d65206973206c657373207468616e20736574604482015267746c652074696d6560c01b6064820152608490fd5b3461046d57600036600319011261046d576003546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d57611fdf612ce2565b611fe7612d87565b6001600160a01b0390808216801561204a57600254928360081c167f4558149b3c5427365f76d4ff19bef30aba41f17e5e601d4661330d8d2b687627600080a3610100600160a81b031990911660089190911b610100600160a81b031617600255005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2073776170526f75746572206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b036120c0612ce2565b16600052600960205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b3461046d5760208060031936011261046d5760043561213d612fb3565b61214c60ff6002541615612ea5565b6121586101f782612c7b565b60ff600861216583612c7b565b50015460a01c16600581101561043157600114801561239d575b8015612377575b61218f90613158565b61219881612c7b565b50906121a381612cf8565b50903360005260098452604060002090600052835260406000208054908115612328576002019260ff845460081c166122e3576000906122066121fb6305f5e1006121f48754600686015490613300565b049461327b565b600583015490613313565b809361221c670de0b6b3a7640000928392613300565b600a8401546040516340c10f1960e01b81523360048201529290910460248301526001600160a01b03959194899186916044918391908a165af19081156116b6577f3ddafe3ebb4d0c818317027aabfa82dc9983942ceeb80523167e2de047b17fbd96600895612292936122c6575b5054613300565b04946122a58685600785015416336131a4565b805461ff001916610100179055015460405193845216923392a36001600055005b6122dc908b3d8d116116af576116a08183612d65565b508a61228b565b60405162461bcd60e51b815260048101869052601d60248201527f636c61696d426f72726f77203a20616c726561647920636c61696d65640000006044820152606490fd5b60405162461bcd60e51b815260048101869052602160248201527f636c61696d426f72726f77203a2063616e6e6f7420676574206a705f746f6b656044820152603760f91b6064820152608490fd5b5060ff600861238583612c7b565b50015460a01c16600581101561043157600314612186565b5060ff60086123ab83612c7b565b50015460a01c1660058110156104315760021461217f565b3461046d576123d136612ccc565b906123da612fb3565b6123e960ff6002541615612ea5565b60ff60086123f683612c7b565b50015460a01c1660058110156104315760021480156126a4575b6124199061337a565b61242c61242582612c7b565b5091612cf8565b5091801561265f576009820154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b039290919086908290604490829060009088165af180156116b657612642575b5061248c81546102db8561327b565b906008850160ff815460a01c16600581101561043157600214612589575b5460a01c60ff166005811015610431576003146124c9575b6001600055005b84544210612538576124ea6007926004670de0b6b3a7640000930154613300565b0493016124fb8483835416336131a4565b5416926040519283528201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a38080808080806124c2565b60405162461bcd60e51b8152600481018790526024808201527f77697468647261774c656e64203a206c657373207468616e20736574746c652060448201526374696d6560e01b6064820152608490fd5b600186015442106125fd5760ff90670de0b6b3a76400006125ae856002860154613300565b0485600789016125c28383835416336131a4565b541690604051908152878a8201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a390506124aa565b60405162461bcd60e51b815260048101889052601b60248201527f77697468647261774c656e64203a206e6f7420656e642074696d6500000000006044820152606490fd5b61265890863d88116116af576116a08183612d65565b508561247d565b60405162461bcd60e51b815260206004820152601f60248201527f77697468647261774c656e64203a207370416d6f756e74206973207a65726f006044820152606490fd5b5060ff60086126b283612c7b565b50015460a01c16600581101561043157600314612410565b3461046d576126d836612ccc565b6126e0612fb3565b6126ef60ff6002541615612ea5565b60ff60086126fc84612c7b565b50015460a01c1660058110156104315760021480156129da575b61271f9061337a565b61273261272b83612c7b565b5092612cf8565b5090801561298557600a830154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b0394929091908690829060449082906000908a165af180156116b657612968575b506127a76305f5e10061279d8454600685015490613300565b046102db8561327b565b6008820192835460ff8160a01c166005811015610431576002146128a9575b5083549260ff8460a01c166005811015610431576003146127e8576001600055005b5442106128565791670de0b6b3a764000061280c6128179360058997960154613300565b0495869116336131a4565b5416926040519283528201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a380808080808080806124c2565b60405162461bcd60e51b815260048101889052602560248201527f7769746864726177426f72726f77203a206c657373207468616e206d617463686044820152642074696d6560d81b6064820152608490fd5b60018401544210612917576128db8791670de0b6b3a76400006128d0866003870154613300565b0492839116336131a4565b868554169060405190815286898201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a3876127c6565b60405162461bcd60e51b815260048101899052602360248201527f7769746864726177426f72726f77203a206c657373207468616e20656e642074604482015262696d6560e81b6064820152608490fd5b61297e90863d88116116af576116a08183612d65565b5085612784565b60405162461bcd60e51b815260206004820152602760248201527f7769746864726177426f72726f773a20776974686472617720616d6f756e74206044820152666973207a65726f60c81b6064820152608490fd5b5060ff60086129e884612c7b565b50015460a01c16600581101561043157600314612716565b612a0936612ccc565b612a11612fb3565b612a2060ff6002541615612ea5565b612a2c610f6f83612c7b565b60ff6008612a3984612c7b565b50015460a01c16600581101561043157612a539015612f56565b612a5c82612c7b565b509133600052600960205260406000209060005260205260406000206008830160018060a01b0391612a918484845416612fd6565b948515612b295760028201805461ffff191690558254600592908516612b0957612abd815434906130ad565b905501612acb3482546130ad565b90555b54169160405191825260208201527f1d7b72e666a0b6217efe7cfa1b604ea5c7b39219563ce48b30c9da77045247a560403392a36001600055005b612b148682546130ad565b905501612b228482546130ad565b9055612ace565b60405162461bcd60e51b815260206004820152602560248201527f6465706f736974426f72726f773a206465706f73697420616d6f756e74206973604482015264207a65726f60d81b6064820152608490fd5b3461046d57602036600319011261046d576020612b9a600435612c7b565b5054421015604051908152f35b3461046d57602036600319011261046d5760043560075481101561046d57612bce90612c7b565b508054600182015460028301549260ff60038201546004830154600584015490600685015460018060a01b039283600788015416926008880154958560098a0154169b600b87600a8c0154169a01549a6040519c8d5260208d015260408c015260608b015260808a015260a089015260c088015260e0870152811661010086015260a01c16936005851015610431576101a094610120850152610140840152610160830152610180820152f35b600754811015612cb657600c906007600052027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b634e487b7160e01b600052603260045260246000fd5b604090600319011261046d576004359060243590565b600435906001600160a01b038216820361046d57565b600854811015612cb6576006906008600052027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b6060810190811067ffffffffffffffff821117612d4f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117612d4f57604052565b604051602090818101903360601b82523060601b603482015260288152612dad81612d33565b5190207f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb4754604051630f5d50b360e11b81526004810192909252600060248301528290829060449082906001600160a01b03165afa9081156116b657600091612e75575b5015612e1a5750565b6084906040519062461bcd60e51b82526004820152602e60248201527f6d756c74695369676e6174757265436c69656e74203a2054686973207478206960448201526d1cc81b9bdd08185c1c9c9bdd995960921b6064820152fd5b908282813d8311612e9e575b612e8b8183612d65565b81010312612e9b57505138612e11565b80fd5b503d612e81565b15612eac57565b60405162461bcd60e51b815260206004820152602560248201527f506c65646765506f6f6c203a205374616b6520686173206265656e2073757370604482015264195b99195960da1b6064820152608490fd5b15612f0657565b60405162461bcd60e51b815260206004820152602260248201527f506c65646765506f6f6c203a204c657373207468616e20736574746c652074696044820152616d6560f01b6064820152608490fd5b15612f5d57565b60405162461bcd60e51b815260206004820152602860248201527f73746174653a20506f6f6c20737461747573206973206e6f7420657175616c206044820152670e8de40dac2e8c6d60c31b6064820152608490fd5b600260005414612fc4576002600055565b604051633ee5aeb560e01b8152600490fd5b6001600160a01b031680612fea5750503490565b81612ff3575090565b6040516323b872dd60e01b60208201523360248201523060448201526064808201849052815260a081019167ffffffffffffffff831182841017612d4f5761303d92604052613040565b90565b906000602091828151910182855af1156116b6576000513d61309357506001600160a01b0381163b155b6130715750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b6001141561306a565b6305f5e10081019081106118945790565b9081019081106118945790565b9081039081116130c75790565b60405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606490fd5b1561311357565b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a20416674657220736574746c652074696d6500006044820152606490fd5b1561315f57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a206e6f74206d6174636820616e6420756e646f6e6500000000006044820152606490fd5b6001600160a01b039182169291908361320c578260008115613203575b6000808093819387871690f1156116b6577fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9916020915b6040519485521692a3565b506108fc6131c1565b60405163a9059cbb60e01b6020808301919091528383166001600160a01b03166024830152604480830186905282527fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9939092909161327690613270606482612d65565b87613040565b6131f8565b670de0b6b3a7640000908181029181159183041417156132985790565b60405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608490fd5b6305f5e100908181029181159183041417156132985790565b8181029181159183041417156132985790565b811561331d570490565b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206469766973696f6e206f766572666c6f7700000000006044820152606490fd5b9081602091031261046d5751801515810361046d5790565b1561338157565b60405162461bcd60e51b815260206004820152601960248201527f73746174653a2066696e697368206c69717569646174696f6e000000000000006044820152606490fd5b156133cd57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a207374617465206d75737420626520756e646f6e6500000000006044820152606490fd5b916305f5e10061342561303d9483613300565b04918280613435575b50506130ba565b60035461344b92906001600160a01b03166131a4565b388261342e565b805115612cb65760200190565b805160011015612cb65760400190565b8051821015612cb65760209160051b010190565b90602090818382031261046d57825167ffffffffffffffff9384821161046d570181601f8201121561046d578051938411612d4f578360051b90604051946134cd85840187612d65565b8552838086019282010192831161046d578301905b8282106134f0575050505090565b815181529083019083016134e2565b6040805167ffffffffffffffff9281830184811183821017612d4f5761352b9284918252369037612c7b565b509080519161353983612d33565b600283526020926008848201928436853760078101546001600160a01b039283929091831661356786613452565b520154166135748361345f565b52600454169083519283916304e59d2760e11b835260248301908760048501525180915260448301919060005b88828210613622575050505091818060009403915afa908115613617576000916135f6575b5081519384830190811185821017612d4f576135ee92526135e681613452565b51845261345f565b519082015290565b613611913d8091833e6136098183612d65565b810190613483565b386135c6565b82513d6000823e3d90fd5b8351855287955093840193909201916001016135a1565b9392909190600081156139115750600061368191613658848689613975565b9060405193849283926307c0329d60e21b84526004840152604060248401526044830190613919565b03816001600160a01b0389165afa80156116b6576136a7916000916138f8575b50613452565b51935b6001600160a01b03838116928315906136da9082156138e9575b8381169687159485156138da575b861695613975565b91600091156137e457505090601e4201918242116137b5576000916137249188604051809681958294637ff36ab560e01b8452886004850152608060248501526084840190613919565b90306044840152606483015203925af19081156116b6576000916137cb575b50915b61374f83613452565b5183516000199391908481019081116137b5577ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235916137906040928861346f565b5182519182526020820152a381519081019081116137b5576137b19161346f565b5190565b634e487b7160e01b600052601160045260246000fd5b6137de913d8091833e6136098183612d65565b38613743565b156138505750601e42018042116137b55761381d92876000809460405196879586948593632512eca560e11b8552309160048601613a93565b03925af19081156116b657600091613837575b5091613746565b61384a913d8091833e6136098183612d65565b38613830565b91601e4201918242116138c657918391888361388595604051968795869485936338ed173960e01b8552309160048601613a93565b03925af19182156138ba57809261389f575b505091613746565b6138b392503d8091833e6136098183612d65565b3880613897565b604051903d90823e3d90fd5b634e487b7160e01b84526011600452602484fd5b6138e48784613acd565b6136d2565b6138f38588613acd565b6136c4565b61390b913d8091833e6136098183612d65565b386136a1565b9050936136aa565b90815180825260208080930193019160005b828110613939575050505090565b83516001600160a01b03168552938101939281019260010161392b565b9081602091031261046d57516001600160a01b038116810361046d5790565b604080519294936001600160a01b0392831661399085612d33565b60028552602091833684880137859785811615600014613a8e575083516315ab88c960e31b81528381600481865afa908115613a8357600091613a66575b505b856139da88613452565b91169052808516613a58575090806004928451938480926315ab88c960e31b82525afa928315613a4e575090613a1b9291600092613a21575b50509261345f565b91169052565b613a409250803d10613a47575b613a388183612d65565b810190613956565b3880613a13565b503d613a2e565b513d6000823e3d90fd5b915050613a1b91509261345f565b613a7d9150843d8611613a4757613a388183612d65565b386139ce565b85513d6000823e3d90fd5b6139d0565b90608092613ab9919695949683526000602084015260a0604084015260a0830190613919565b6001600160a01b0390951660608201520152565b60405163095ea7b360e01b60208083019182526001600160a01b039094166024830152600019604480840191909152825267ffffffffffffffff92916080810184811182821017612d4f57604052600092839283809351925af1913d15613bdd573d908111613bc95760405190613b4d601f8201601f1916860183612d65565b81528091843d92013e5b81613b99575b5015613b665750565b6064906040519062461bcd60e51b82526004820152600c60248201526b2173616665417070726f766560a01b6044820152fd5b80518015925083908315613bb1575b50505038613b5d565b613bc19350820181019101613362565b388281613ba8565b634e487b7160e01b82526041600452602482fd5b50506060613b5756fe516112f3bf06e373fcea44db364769c04cc7ef4392e6de95d2b250720bcacefba26469706673582212205bc7ac1966f51929369415b8d7abd0aeed8de2823d02bbbd330b641d83c0931a64736f6c63430008140033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD6ABFC1 EQ PUSH2 0x2BA7 JUMPI DUP1 PUSH4 0x14C090CC EQ PUSH2 0x2B7C JUMPI DUP1 PUSH4 0x16F941B5 EQ PUSH2 0x2A00 JUMPI DUP1 PUSH4 0x1E107979 EQ PUSH2 0x26CA JUMPI DUP1 PUSH4 0x38F2AA76 EQ PUSH2 0x23C3 JUMPI DUP1 PUSH4 0x3AB4A445 EQ PUSH2 0x2120 JUMPI DUP1 PUSH4 0x3C9FADC3 EQ PUSH2 0x209F JUMPI DUP1 PUSH4 0x41273657 EQ PUSH2 0x1FC6 JUMPI DUP1 PUSH4 0x41275358 EQ PUSH2 0x1F9D JUMPI DUP1 PUSH4 0x415F1240 EQ PUSH2 0x1DA0 JUMPI DUP1 PUSH4 0x459B911C EQ PUSH2 0x1960 JUMPI DUP1 PUSH4 0x4AEA0AEC EQ PUSH2 0x1942 JUMPI DUP1 PUSH4 0x52F7C988 EQ PUSH2 0x18FC JUMPI DUP1 PUSH4 0x61A552DC EQ PUSH2 0x18D9 JUMPI DUP1 PUSH4 0x62FAECF4 EQ PUSH2 0x180E JUMPI DUP1 PUSH4 0x638C7E17 EQ PUSH2 0x17C6 JUMPI DUP1 PUSH4 0x6ABD7F29 EQ PUSH2 0x1798 JUMPI DUP1 PUSH4 0x6C42FED2 EQ PUSH2 0x1515 JUMPI DUP1 PUSH4 0x6DE6FF3A EQ PUSH2 0x14F7 JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0x14CE JUMPI DUP1 PUSH4 0x8705FCD4 EQ PUSH2 0x140A JUMPI DUP1 PUSH4 0x897B0637 EQ PUSH2 0x1375 JUMPI DUP1 PUSH4 0x8DF82800 EQ PUSH2 0x114F JUMPI DUP1 PUSH4 0x90590DA0 EQ PUSH2 0xF43 JUMPI DUP1 PUSH4 0x981B48A6 EQ PUSH2 0xED9 JUMPI DUP1 PUSH4 0x9B2CB5D8 EQ PUSH2 0xEBB JUMPI DUP1 PUSH4 0x9D71488E EQ PUSH2 0xE80 JUMPI DUP1 PUSH4 0xA62FF164 EQ PUSH2 0xC11 JUMPI DUP1 PUSH4 0xB1597517 EQ PUSH2 0xBD6 JUMPI DUP1 PUSH4 0xBB176A64 EQ PUSH2 0xB51 JUMPI DUP1 PUSH4 0xBF38B8F6 EQ PUSH2 0x973 JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x946 JUMPI DUP1 PUSH4 0xC9333756 EQ PUSH2 0x8FF JUMPI DUP1 PUSH4 0xD353A1CB EQ PUSH2 0x69C JUMPI DUP1 PUSH4 0xD431B1AC EQ PUSH2 0x66B JUMPI DUP1 PUSH4 0xE271FA0C EQ PUSH2 0x490 JUMPI DUP1 PUSH4 0xE626648A EQ PUSH2 0x472 JUMPI PUSH4 0xEEC8D506 EQ PUSH2 0x1BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x1DC PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x1EB PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x1F7 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP SLOAD TIMESTAMP LT ISZERO PUSH2 0x310C JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x20E DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x447 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x40B JUMPI JUMPDEST PUSH2 0x238 SWAP1 PUSH2 0x3158 JUMP JUMPDEST PUSH2 0x241 DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP PUSH2 0x24B DUP4 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP3 CALLER PUSH1 0x0 MSTORE PUSH1 0xA DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x3C6 JUMPI PUSH1 0x4 DUP2 ADD SLOAD SWAP5 SLOAD SWAP1 PUSH2 0x281 DUP3 DUP8 PUSH2 0x30BA JUMP JUMPDEST ISZERO PUSH2 0x381 JUMPI PUSH1 0x2 DUP5 ADD SWAP2 DUP3 SLOAD SWAP4 PUSH1 0xFF DUP6 AND PUSH2 0x33C JUMPI PUSH8 0xDE0B6B3A7640000 PUSH2 0x2EB DUP10 PUSH2 0x2E6 PUSH1 0x7 SWAP6 PUSH2 0x2E0 PUSH32 0xC3E20279D41B3ED21D277920877E5E5C6665BF6ACA607046A3FE0FD2BD6BDA7D SWAP12 SWAP13 SWAP14 PUSH2 0x2DB PUSH1 0x1 SWAP9 PUSH2 0x327B JUMP JUMPDEST PUSH2 0x3313 JUMP JUMPDEST SWAP3 PUSH2 0x30BA JUMP JUMPDEST PUSH2 0x3300 JUMP JUMPDEST DIV SWAP7 ADD SWAP2 DUP7 DUP4 SSTORE PUSH1 0x1 PUSH1 0xFF NOT DUP1 SWAP7 AND OR DUP5 SSTORE ADD SWAP2 PUSH1 0x1 DUP1 DUP1 PUSH1 0xA0 SHL SUB SWAP5 PUSH2 0x316 DUP9 DUP8 DUP8 SLOAD AND CALLER PUSH2 0x31A4 JUMP JUMPDEST DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x327 DUP2 SLOAD DUP7 PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E644C656E64203A20616C726561647920726566756E646564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E644C656E64203A206E6F7420726566756E64000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E644C656E64203A206E6F7420706C65646765640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x419 DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x22F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x455 DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x4AE PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x4BD PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x4CA DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x4 PUSH2 0x4E6 SWAP2 EQ PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x4EF DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP2 PUSH1 0x5 DUP4 ADD SLOAD ISZERO PUSH2 0x613 JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x9 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x5CE JUMPI PUSH1 0x2 DUP5 ADD SWAP1 PUSH1 0xFF DUP3 SLOAD AND PUSH2 0x589 JUMPI PUSH1 0x8 ADD DUP1 SLOAD PUSH32 0x5A06C7DE92F1DC59E8CBA872927D016C80CE5F0FB2295C898DFB7A2F08E43FB1 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP2 PUSH2 0x569 SWAP2 SWAP1 DUP6 AND CALLER PUSH2 0x31A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE SLOAD AND SWAP3 SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E64426F72726F773A20616761696E20726566756E64000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E64426F72726F773A206E6F7420706C656467656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E6379426F72726F775769746864726177616C203A206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1DDA5D1A191C985DD85B PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH2 0x684 PUSH2 0x2D87 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO AND SWAP1 PUSH1 0xFF NOT AND OR PUSH1 0x2 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x6B8 PUSH2 0x2D87 JUMP JUMPDEST PUSH2 0x6C1 DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 PUSH2 0x6CC DUP2 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP1 PUSH1 0x1 PUSH2 0x6D9 DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD TIMESTAMP LT PUSH2 0x8BA JUMPI PUSH1 0x8 DUP4 ADD DUP1 SLOAD SWAP3 PUSH1 0xFF DUP5 PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x1 SUB PUSH2 0x869 JUMPI PUSH1 0x7 DUP6 ADD PUSH2 0x78A PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP6 PUSH2 0x75F DUP8 DUP5 SLOAD AND SWAP9 PUSH7 0x2386F26FC10000 PUSH2 0x758 PUSH1 0x2 PUSH4 0x1E13380 PUSH2 0x741 PUSH2 0x73C PUSH1 0x1 DUP8 ADD SLOAD DUP8 SLOAD SWAP1 PUSH2 0x30BA JUMP JUMPDEST PUSH2 0x32E7 JUMP JUMPDEST DIV SWAP4 ADD SLOAD SWAP3 PUSH2 0x752 DUP10 SLOAD DUP1 SWAP6 PUSH2 0x3300 JUMP JUMPDEST SWAP1 PUSH2 0x3300 JUMP JUMPDEST DIV SWAP1 PUSH2 0x30AD JUMP JUMPDEST SWAP8 DUP8 PUSH4 0x5F5E100 PUSH2 0x77A PUSH2 0x774 PUSH1 0x5 SLOAD PUSH2 0x309C JUMP JUMPDEST DUP13 PUSH2 0x3300 JUMP JUMPDEST DIV SWAP3 AND DUP9 PUSH1 0x2 SLOAD PUSH1 0x8 SHR AND PUSH2 0x3639 JUMP JUMPDEST SWAP2 SWAP1 SWAP6 DUP8 DUP4 LT PUSH2 0x824 JUMPI PUSH2 0x7E2 PUSH1 0x1 SWAP8 DUP5 PUSH2 0x7F0 SWAP5 DUP12 PUSH1 0x2 SWAP13 PUSH1 0x3 SWAP9 GT PUSH1 0x0 EQ PUSH2 0x819 JUMPI SWAP2 PUSH2 0x7CF PUSH2 0x7BF PUSH2 0x7D4 SWAP5 DUP4 PUSH2 0x30BA JUMP JUMPDEST DUP1 SWAP4 DUP9 DUP1 DUP13 SLOAD AND SWAP2 SLOAD AND SWAP1 PUSH2 0x31A4 JUMP JUMPDEST PUSH2 0x30BA JUMP JUMPDEST DUP11 DUP8 ADD SSTORE JUMPDEST DUP9 DUP7 ADD SLOAD PUSH2 0x30BA JUMP JUMPDEST SWAP1 PUSH1 0x6 SLOAD SWAP1 DUP7 SLOAD AND SWAP1 PUSH2 0x3412 JUMP JUMPDEST SWAP2 ADD SSTORE DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0xA1 DUP5 SWAP1 SHL OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 LOG4 STOP JUMPDEST POP POP DUP11 DUP8 ADD SSTORE PUSH2 0x7D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x66696E6973683A20536C69707061676520697320746F6F206869676800000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x66696E6973683A20706F6F6C207374617465206D757374206265206578656375 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x3A34B7B7 PUSH1 0xE1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x66696E6973683A206C657373207468616E20656E642074696D65000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH2 0x91C PUSH1 0x4 CALLDATALOAD PUSH2 0x34FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH1 0x0 DUP4 JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0x931 JUMPI PUSH1 0x40 DUP6 RETURN JUMPDEST DUP3 DUP1 PUSH1 0x1 SWAP3 DUP7 MLOAD DUP2 MSTORE ADD SWAP5 ADD SWAP2 ADD SWAP1 SWAP3 PUSH2 0x924 JUMP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x991 PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x9A0 PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x9AD DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x4 PUSH2 0x9C9 SWAP2 EQ PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x9D2 DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP2 PUSH1 0x4 DUP4 ADD SLOAD ISZERO PUSH2 0xAF7 JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0xA DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD SWAP1 DUP2 ISZERO PUSH2 0xAA4 JUMPI PUSH1 0x2 DUP5 ADD SWAP1 PUSH1 0xFF DUP3 SLOAD AND PUSH2 0xA4C JUMPI PUSH1 0x7 ADD DUP1 SLOAD PUSH32 0x71D14C5F08CB34CBFB59C06EA5151AAFBF742D0B6ED00FDB83ADDD9AFB5C0FD0 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP2 PUSH2 0x569 SWAP2 SWAP1 DUP6 AND CALLER PUSH2 0x31A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E63794C656E645769746864726177616C203A20616C72656164 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1E481C99599D5B991959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E63794C656E645769746864726177616C203A206E6F7420706C PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x195919D959 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E63794C656E645769746864726177616C203A206C656E645375 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x70706C79206973207A65726F PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB72 PUSH2 0x2CE2 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH2 0xBD2 PUSH1 0x2 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 ADD SLOAD PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0xFF DUP1 DUP5 PUSH1 0x8 SHR AND SWAP4 AND SWAP2 DUP6 SWAP3 PUSH1 0x60 SWAP3 SWAP6 SWAP5 SWAP2 SWAP6 PUSH1 0x80 DUP6 ADD SWAP7 DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0x40 DUP5 ADD MSTORE ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0xFF PUSH1 0x8 PUSH2 0xBF6 PUSH1 0x4 CALLDATALOAD PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xC2E PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0xC3D PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0xC49 PUSH2 0x1F7 DUP3 PUSH2 0x2C7B JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0xC56 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0xE5A JUMPI JUMPDEST DUP1 ISZERO PUSH2 0xE34 JUMPI JUMPDEST PUSH2 0xC80 SWAP1 PUSH2 0x3158 JUMP JUMPDEST PUSH2 0xC89 DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 PUSH2 0xC94 DUP2 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0x9 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x5 DUP5 ADD SLOAD SWAP2 ADD SLOAD SWAP2 PUSH2 0xCC4 DUP4 DUP4 PUSH2 0x30BA JUMP JUMPDEST ISZERO PUSH2 0xDEF JUMPI DUP1 SLOAD SWAP2 DUP3 ISZERO PUSH2 0xDAA JUMPI PUSH1 0x2 DUP3 ADD SWAP4 DUP5 SLOAD SWAP4 PUSH1 0xFF DUP6 AND PUSH2 0xD65 JUMPI SWAP4 PUSH1 0x1 SWAP7 SWAP4 PUSH8 0xDE0B6B3A7640000 PUSH2 0xD2A DUP6 PUSH2 0x2E6 DUP12 SWAP7 PUSH2 0x2E0 PUSH32 0x732816F48DE550F238BD0D4F5B79819C7B24A49D6132928978E3CD36568DD5DB SWAP13 SWAP10 PUSH2 0x2DB PUSH1 0x8 SWAP14 PUSH2 0x327B JUMP JUMPDEST DIV SWAP8 ADD DUP8 SWAP1 SSTORE PUSH1 0xFF NOT AND OR SWAP1 SSTORE ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 PUSH2 0xD52 SWAP1 DUP6 SWAP1 DUP5 AND CALLER PUSH2 0x31A4 JUMP JUMPDEST SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E64426F72726F77203A20616C726561647920726566756E64656400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E64426F72726F77203A206E6F7420706C6564676564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x726566756E64426F72726F77203A206E6F7420726566756E6400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0xE42 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0xC77 JUMP JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0xE68 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ PUSH2 0xC70 JUMP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x8DDDB57468CF5338EE155397AD1400A7A564308824F517D20A8A7C516523BB47 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x46D JUMPI PUSH2 0xF02 PUSH1 0xC0 SWAP2 PUSH2 0x2CF8 JUMP JUMPDEST POP DUP1 SLOAD SWAP1 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x3 DUP3 ADD SLOAD SWAP1 PUSH1 0x5 PUSH1 0x4 DUP5 ADD SLOAD SWAP4 ADD SLOAD SWAP4 PUSH1 0x40 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE RETURN JUMPDEST PUSH2 0xF4C CALLDATASIZE PUSH2 0x2CCC JUMP JUMPDEST PUSH2 0xF54 PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0xF63 PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0xF78 PUSH2 0xF6F DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP SLOAD TIMESTAMP LT PUSH2 0x2EFF JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0xF85 DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH2 0xF9F SWAP1 ISZERO PUSH2 0x2F56 JUMP JUMPDEST PUSH2 0xFA8 DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP2 CALLER PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x3 DUP2 ADD SLOAD SWAP1 PUSH2 0xFDB PUSH1 0x4 DUP3 ADD SWAP3 DUP4 SLOAD SWAP1 PUSH2 0x30BA JUMP JUMPDEST DUP4 GT PUSH2 0x10EE JUMPI PUSH1 0x7 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 PUSH2 0xFFD SWAP1 DUP6 SWAP1 DUP6 AND PUSH2 0x2FD6 JUMP JUMPDEST SWAP5 PUSH1 0x1 SLOAD DUP7 GT ISZERO PUSH2 0x1093 JUMPI PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE DUP3 SLOAD DUP5 AND PUSH2 0x1074 JUMPI PUSH2 0x1029 DUP2 SLOAD CALLVALUE SWAP1 PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x1036 CALLVALUE DUP3 SLOAD PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE JUMPDEST SLOAD AND SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x129E8C18C2F7BAF99C7EB257934C21F038C72412803512DCF0A942A4562A82EA PUSH1 0x40 CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH2 0x107F DUP7 DUP3 SLOAD PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x108C DUP6 DUP3 SLOAD PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x1039 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6465706F7369744C656E643A20616D6F756E74206C657373207468616E206D69 PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1B9A5B5D5B4819195C1BDCDA5D PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x33 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6465706F7369744C656E64203A207374616B65416D6F756E7420697320677265 PUSH1 0x44 DUP3 ADD MSTORE PUSH19 0x61746572207468616E206D6178537570706C79 PUSH1 0x68 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x116B PUSH2 0x2D87 JUMP JUMPDEST PUSH2 0x1174 DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 PUSH2 0x117F DUP2 PUSH2 0x2CF8 JUMP JUMPDEST POP PUSH2 0x1189 DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP SLOAD TIMESTAMP LT PUSH2 0x1322 JUMPI PUSH1 0x8 DUP4 ADD SWAP1 DUP2 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH2 0x12DE JUMPI PUSH1 0x4 DUP6 ADD SWAP1 DUP2 SLOAD SWAP1 DUP2 ISZERO ISZERO DUP1 PUSH2 0x12D1 JUMPI JUMPDEST ISZERO PUSH2 0x1293 JUMPI POP POP SWAP1 PUSH1 0x1 DUP1 SWAP6 DUP6 SWAP5 SWAP4 PUSH2 0x11D7 PUSH1 0x0 SWAP8 PUSH2 0x34FF JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x11F1 PUSH2 0x11E9 DUP3 MLOAD PUSH2 0x327B JUMP JUMPDEST DUP6 MLOAD SWAP1 PUSH2 0x3313 JUMP JUMPDEST SWAP4 PUSH2 0x1223 PUSH1 0x6 PUSH2 0x1218 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1212 PUSH1 0x5 DUP9 ADD SWAP10 DUP11 SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV PUSH2 0x32E7 JUMP JUMPDEST SWAP5 ADD SWAP4 DUP5 SLOAD SWAP1 PUSH2 0x3313 JUMP JUMPDEST SWAP4 SLOAD SWAP2 DUP5 DUP4 GT DUP12 EQ PUSH2 0x125F JUMPI POP POP POP POP DUP4 SSTORE SLOAD SWAP2 ADD SSTORE JUMPDEST DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0xA0 DUP6 SWAP1 SHL OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 DUP1 LOG4 STOP JUMPDEST PUSH2 0x128B SWAP6 POP PUSH2 0x2DB SWAP4 SWAP5 POP SWAP1 PUSH2 0x127B PUSH2 0x1283 SWAP3 DUP5 DUP11 SSTORE MLOAD PUSH2 0x32E7 JUMP JUMPDEST SWAP1 MLOAD SWAP1 PUSH2 0x3313 JUMP JUMPDEST SWAP3 SLOAD SWAP1 PUSH2 0x3300 JUMP JUMPDEST SWAP2 ADD SSTORE PUSH2 0x123A JUMP JUMPDEST PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA2 SHL OR SWAP1 SWAP4 SSTORE POP SWAP1 DUP2 SSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x4 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 DUP1 LOG4 STOP JUMPDEST POP PUSH1 0x5 DUP8 ADD SLOAD ISZERO ISZERO PUSH2 0x11BD JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574746C653A20706F6F6C207374617465206D757374206265204D41544348 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574746C653A2074696D65206973206C657373207468616E20736574746C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x2074696D65 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1391 PUSH2 0x2D87 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x13C5 JUMPI DUP1 PUSH1 0x1 SLOAD PUSH32 0xFA6189B739625142C695478E9D0095A1CB9E6FAD92AD8A727E0055A5CC85B06B PUSH1 0x0 DUP1 LOG3 PUSH1 0x1 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A206D696E416D6F756E74206973207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH2 0x1423 PUSH2 0x2CE2 JUMP JUMPDEST PUSH2 0x142B PUSH2 0x2D87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x1479 JUMPI DUP2 PUSH1 0x3 SLOAD SWAP2 DUP3 AND PUSH32 0xD44190ACF9D04BDB5D3A1AAFFF7E6DEE8B40B93DFB8C5D3F0EEA4B9F4539C3F7 PUSH1 0x0 DUP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND OR PUSH1 0x3 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A2066656541646472657373206973207A65726F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x61646472657373 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1532 PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x1541 PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0x154D PUSH2 0x1F7 DUP3 PUSH2 0x2C7B JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x155A DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x1772 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x174C JUMPI JUMPDEST PUSH2 0x1584 SWAP1 PUSH2 0x3158 JUMP JUMPDEST PUSH2 0x158D DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP PUSH2 0x1597 DUP3 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP2 CALLER PUSH1 0x0 MSTORE PUSH1 0xA DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD SWAP3 DUP4 ISZERO PUSH2 0x1707 JUMPI PUSH1 0x2 ADD SWAP3 PUSH1 0xFF DUP5 SLOAD PUSH1 0x8 SHR AND PUSH2 0x16C2 JUMPI PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x15EF PUSH2 0x15E4 PUSH2 0x15F6 SWAP4 PUSH2 0x327B JUMP JUMPDEST PUSH1 0x4 DUP7 ADD SLOAD SWAP1 PUSH2 0x3313 JUMP JUMPDEST SWAP1 SLOAD PUSH2 0x3300 JUMP JUMPDEST PUSH1 0x9 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 DIV PUSH1 0x24 DUP4 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP2 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP2 DUP7 SWAP1 DUP6 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP9 AND GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x16B6 JUMPI PUSH32 0x6F4DD2687B3C3BFA99D39742B01D6E0AD9604C48559791D5DF4FF5DF44B41DFD SWAP5 PUSH1 0x7 SWAP4 PUSH2 0x1689 JUMPI JUMPDEST POP DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE ADD SLOAD PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE AND SWAP3 CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH2 0x16A8 SWAP1 DUP9 RETURNDATASIZE DUP11 GT PUSH2 0x16AF JUMPI JUMPDEST PUSH2 0x16A0 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3362 JUMP JUMPDEST POP DUP8 PUSH2 0x1667 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1696 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636C61696D4C656E64203A616C726561647920636C61696D6564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636C61696D4C656E64203A63616E6E6F74206765742073705F746F6B656E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x175A DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x157B JUMP JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x1780 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ PUSH2 0x1574 JUMP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0x1 PUSH2 0x17B8 PUSH1 0x4 CALLDATALOAD PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD TIMESTAMP LT ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH32 0x8DDDB57468CF5338EE155397AD1400A7A564308824F517D20A8A7C516523BB47 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x182B DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 PUSH1 0xB PUSH8 0xDE0B6B3A7640000 PUSH2 0x1868 PUSH2 0x185E PUSH2 0x1851 PUSH2 0x184A DUP7 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP6 PUSH2 0x34FF JUMP JUMPDEST PUSH2 0x127B PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x327B JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV SWAP2 SLOAD SWAP3 ADD SLOAD PUSH4 0x5F5E100 SWAP1 DUP2 ADD SWAP3 DUP2 DUP5 LT PUSH2 0x1894 JUMPI PUSH1 0x20 SWAP4 PUSH2 0x188A SWAP2 PUSH2 0x3300 JUMP JUMPDEST DIV GT PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH2 0x190A CALLDATASIZE PUSH2 0x2CCC JUMP JUMPDEST SWAP1 PUSH2 0x1913 PUSH2 0x2D87 JUMP JUMPDEST DUP1 PUSH1 0x5 SSTORE DUP2 PUSH1 0x6 SSTORE PUSH32 0x32DC6A2D839EB179729A55633FDF1C41A1FC4739394154117005DB2B354B9B5 PUSH1 0x0 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH2 0x140 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x24 SWAP1 PUSH1 0x4 CALLDATALOAD SWAP1 DUP3 CALLDATALOAD PUSH1 0xA4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x46D JUMPI PUSH1 0xC4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x46D JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP3 SWAP1 DUP4 SWAP1 SUB PUSH2 0x46D JUMPI PUSH2 0x104 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP5 SWAP1 DUP6 SWAP1 SUB PUSH2 0x46D JUMPI PUSH2 0x19DB PUSH2 0x2D87 JUMP JUMPDEST DUP7 DUP2 GT ISZERO PUSH2 0x1D3F JUMPI DUP5 ISZERO PUSH2 0x1CEE JUMPI DUP4 ISZERO PUSH2 0x1C9D JUMPI PUSH1 0x40 MLOAD SWAP7 PUSH2 0x1A0 DUP9 ADD DUP9 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1C88 JUMPI PUSH1 0x40 MSTORE DUP8 MSTORE PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0xE0 DUP7 ADD MSTORE PUSH2 0x100 DUP6 ADD MSTORE PUSH1 0x0 PUSH2 0x120 DUP6 ADD MSTORE DUP3 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD MSTORE PUSH2 0x124 CALLDATALOAD PUSH2 0x180 DUP4 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x1C73 JUMPI DUP1 PUSH1 0x1 PUSH2 0x1A81 SWAP3 ADD PUSH1 0x7 SSTORE PUSH2 0x2C7B JUMP JUMPDEST SWAP3 SWAP1 SWAP3 PUSH2 0x1C5E JUMPI DUP1 MLOAD DUP4 SSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP5 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 DUP5 ADD SSTORE PUSH1 0x7 DUP4 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xE0 DUP3 ADD MLOAD AND SWAP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP3 DUP4 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x8 DUP5 ADD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x100 DUP4 ADD MLOAD AND SWAP4 DUP4 SLOAD SWAP4 PUSH2 0x120 DUP5 ADD MLOAD SWAP5 PUSH1 0x5 DUP7 LT ISZERO PUSH2 0x1C49 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SWAP6 OR PUSH1 0xA0 SWAP5 SWAP1 SWAP5 SHL PUSH1 0xFF PUSH1 0xA0 SHL AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP4 SSTORE SWAP1 DUP2 ADD MLOAD PUSH1 0x9 DUP5 ADD DUP1 SLOAD DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH2 0x160 DUP3 ADD MLOAD PUSH1 0xA DUP6 ADD DUP1 SLOAD SWAP1 SWAP5 AND SWAP2 AND OR SWAP1 SWAP2 SSTORE PUSH2 0x180 ADD MLOAD PUSH1 0xB SWAP2 SWAP1 SWAP2 ADD SSTORE PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR PUSH2 0x1C34 JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP4 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x80 DUP5 ADD SWAP2 PUSH1 0x0 DUP4 MSTORE PUSH1 0xA0 DUP6 ADD SWAP4 PUSH1 0x0 DUP6 MSTORE PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x1C1F JUMPI DUP1 PUSH1 0x1 PUSH2 0x1BDF SWAP3 ADD PUSH1 0x8 SSTORE PUSH2 0x2CF8 JUMP JUMPDEST SWAP7 SWAP1 SWAP7 PUSH2 0x1C0A JUMPI MLOAD DUP7 SSTORE MLOAD PUSH1 0x1 DUP7 ADD SSTORE MLOAD PUSH1 0x2 DUP6 ADD SSTORE MLOAD PUSH1 0x3 DUP5 ADD SSTORE MLOAD PUSH1 0x4 DUP4 ADD SSTORE MLOAD PUSH1 0x5 SWAP1 SWAP2 ADD SSTORE STOP JUMPDEST DUP8 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP8 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP3 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP10 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE DUP1 DUP10 ADD DUP10 SWAP1 MSTORE PUSH32 0x637265617465506F6F6C203A207370546F6B656E206973207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE DUP1 DUP10 ADD DUP10 SWAP1 MSTORE PUSH32 0x637265617465506F6F6C203A206A70546F6B656E206973207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 DUP2 DUP11 ADD MSTORE PUSH32 0x637265617465506F6F6C203A20656E6454696D65206D75737420626520677265 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x61746572207468616E20736574746C6554696D65 PUSH1 0x60 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1DBC PUSH2 0x2D87 JUMP JUMPDEST PUSH2 0x1DC5 DUP2 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP1 PUSH2 0x1DD0 DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 DUP2 SLOAD SWAP3 DUP4 TIMESTAMP GT ISZERO PUSH2 0x1F47 JUMPI PUSH1 0x8 DUP4 ADD SWAP1 DUP2 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x1 SUB PUSH2 0x1EF2 JUMPI PUSH2 0x1EBD PUSH2 0x73C PUSH2 0x7E2 PUSH1 0x3 SWAP9 DUP9 PUSH2 0x1E80 PUSH1 0x5 SWAP7 PUSH2 0x1E56 DUP10 PUSH7 0x2386F26FC10000 PUSH2 0x758 PUSH1 0x1 SWAP16 PUSH1 0x7 ADD SWAP7 PUSH1 0x1 PUSH1 0x2 PUSH4 0x1E13380 PUSH2 0x1E49 DUP4 PUSH2 0x752 SWAP5 PUSH1 0xA0 SHL SUB SWAP15 DUP16 DUP14 SLOAD AND SWAP14 PUSH1 0x1 DUP8 ADD SLOAD PUSH2 0x30BA JUMP JUMPDEST DIV SWAP3 ADD SLOAD SWAP5 SLOAD DUP1 SWAP6 PUSH2 0x3300 JUMP JUMPDEST SWAP4 DUP7 PUSH4 0x5F5E100 PUSH2 0x1E70 PUSH2 0x1E6A DUP13 SLOAD PUSH2 0x309C JUMP JUMPDEST DUP9 PUSH2 0x3300 JUMP JUMPDEST DIV SWAP3 AND DUP8 PUSH1 0x2 SLOAD PUSH1 0x8 SHR AND PUSH2 0x3639 JUMP JUMPDEST SWAP2 SWAP1 SWAP3 DUP1 DUP4 GT PUSH1 0x0 EQ PUSH2 0x1EE6 JUMPI SWAP2 PUSH2 0x7CF PUSH2 0x1E9E PUSH2 0x1EAF SWAP5 DUP4 PUSH2 0x30BA JUMP JUMPDEST DUP1 SWAP4 DUP16 DUP10 DUP1 SWAP2 SLOAD AND SWAP2 SLOAD AND SWAP1 PUSH2 0x31A4 JUMP JUMPDEST PUSH1 0x4 DUP8 ADD SSTORE DUP9 DUP7 ADD SLOAD PUSH2 0x30BA JUMP JUMPDEST SWAP2 ADD SSTORE DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0xA0 DUP6 SWAP1 SHL OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE7 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 LOG4 STOP JUMPDEST POP POP PUSH1 0x4 DUP8 ADD SSTORE PUSH2 0x7D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6C69717569646174653A20706F6F6C207374617465206D757374206265206578 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32B1BABA34B7B7 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6C69717569646174653A2074696D65206973206C657373207468616E20736574 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x746C652074696D65 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH2 0x1FDF PUSH2 0x2CE2 JUMP JUMPDEST PUSH2 0x1FE7 PUSH2 0x2D87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP1 DUP3 AND DUP1 ISZERO PUSH2 0x204A JUMPI PUSH1 0x2 SLOAD SWAP3 DUP4 PUSH1 0x8 SHR AND PUSH32 0x4558149B3C5427365F76D4FF19BEF30ABA41F17E5E601D4661330D8D2B687627 PUSH1 0x0 DUP1 LOG3 PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB AND OR PUSH1 0x2 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A2073776170526F75746572206973207A65726F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x61646472657373 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x20C0 PUSH2 0x2CE2 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH2 0xBD2 PUSH1 0x2 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 ADD SLOAD PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0xFF DUP1 DUP5 PUSH1 0x8 SHR AND SWAP4 AND SWAP2 DUP6 SWAP3 PUSH1 0x60 SWAP3 SWAP6 SWAP5 SWAP2 SWAP6 PUSH1 0x80 DUP6 ADD SWAP7 DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0x40 DUP5 ADD MSTORE ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x213D PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x214C PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0x2158 PUSH2 0x1F7 DUP3 PUSH2 0x2C7B JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x2165 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x239D JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x2377 JUMPI JUMPDEST PUSH2 0x218F SWAP1 PUSH2 0x3158 JUMP JUMPDEST PUSH2 0x2198 DUP2 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 PUSH2 0x21A3 DUP2 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0x9 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x2328 JUMPI PUSH1 0x2 ADD SWAP3 PUSH1 0xFF DUP5 SLOAD PUSH1 0x8 SHR AND PUSH2 0x22E3 JUMPI PUSH1 0x0 SWAP1 PUSH2 0x2206 PUSH2 0x21FB PUSH4 0x5F5E100 PUSH2 0x21F4 DUP8 SLOAD PUSH1 0x6 DUP7 ADD SLOAD SWAP1 PUSH2 0x3300 JUMP JUMPDEST DIV SWAP5 PUSH2 0x327B JUMP JUMPDEST PUSH1 0x5 DUP4 ADD SLOAD SWAP1 PUSH2 0x3313 JUMP JUMPDEST DUP1 SWAP4 PUSH2 0x221C PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 SWAP3 PUSH2 0x3300 JUMP JUMPDEST PUSH1 0xA DUP5 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 DIV PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP2 SWAP5 DUP10 SWAP2 DUP7 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 SWAP1 DUP11 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x16B6 JUMPI PUSH32 0x3DDAFE3EBB4D0C818317027AABFA82DC9983942CEEB80523167E2DE047B17FBD SWAP7 PUSH1 0x8 SWAP6 PUSH2 0x2292 SWAP4 PUSH2 0x22C6 JUMPI JUMPDEST POP SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV SWAP5 PUSH2 0x22A5 DUP7 DUP6 PUSH1 0x7 DUP6 ADD SLOAD AND CALLER PUSH2 0x31A4 JUMP JUMPDEST DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE ADD SLOAD PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE AND SWAP3 CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH2 0x22DC SWAP1 DUP12 RETURNDATASIZE DUP14 GT PUSH2 0x16AF JUMPI PUSH2 0x16A0 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST POP DUP11 PUSH2 0x228B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636C61696D426F72726F77203A20616C726561647920636C61696D6564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636C61696D426F72726F77203A2063616E6E6F7420676574206A705F746F6B65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x2385 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x2186 JUMP JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x23AB DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ PUSH2 0x217F JUMP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH2 0x23D1 CALLDATASIZE PUSH2 0x2CCC JUMP JUMPDEST SWAP1 PUSH2 0x23DA PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x23E9 PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x23F6 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ DUP1 ISZERO PUSH2 0x26A4 JUMPI JUMPDEST PUSH2 0x2419 SWAP1 PUSH2 0x337A JUMP JUMPDEST PUSH2 0x242C PUSH2 0x2425 DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP2 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP2 DUP1 ISZERO PUSH2 0x265F JUMPI PUSH1 0x9 DUP3 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x20 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP2 SWAP1 DUP7 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP9 AND GAS CALL DUP1 ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x2642 JUMPI JUMPDEST POP PUSH2 0x248C DUP2 SLOAD PUSH2 0x2DB DUP6 PUSH2 0x327B JUMP JUMPDEST SWAP1 PUSH1 0x8 DUP6 ADD PUSH1 0xFF DUP2 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ PUSH2 0x2589 JUMPI JUMPDEST SLOAD PUSH1 0xA0 SHR PUSH1 0xFF AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x24C9 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST DUP5 SLOAD TIMESTAMP LT PUSH2 0x2538 JUMPI PUSH2 0x24EA PUSH1 0x7 SWAP3 PUSH1 0x4 PUSH8 0xDE0B6B3A7640000 SWAP4 ADD SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV SWAP4 ADD PUSH2 0x24FB DUP5 DUP4 DUP4 SLOAD AND CALLER PUSH2 0x31A4 JUMP JUMPDEST SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD MSTORE PUSH32 0x690F32CCF3E832D5FF975D781039BC2AFFEBEE9C973939C9B710091B87954C9D PUSH1 0x40 CALLER SWAP3 LOG3 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x24C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x77697468647261774C656E64203A206C657373207468616E20736574746C6520 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x74696D65 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP7 ADD SLOAD TIMESTAMP LT PUSH2 0x25FD JUMPI PUSH1 0xFF SWAP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x25AE DUP6 PUSH1 0x2 DUP7 ADD SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV DUP6 PUSH1 0x7 DUP10 ADD PUSH2 0x25C2 DUP4 DUP4 DUP4 SLOAD AND CALLER PUSH2 0x31A4 JUMP JUMPDEST SLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE DUP8 DUP11 DUP3 ADD MSTORE PUSH32 0x690F32CCF3E832D5FF975D781039BC2AFFEBEE9C973939C9B710091B87954C9D PUSH1 0x40 CALLER SWAP3 LOG3 SWAP1 POP PUSH2 0x24AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77697468647261774C656E64203A206E6F7420656E642074696D650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x2658 SWAP1 DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x16AF JUMPI PUSH2 0x16A0 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST POP DUP6 PUSH2 0x247D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77697468647261774C656E64203A207370416D6F756E74206973207A65726F00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x26B2 DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x2410 JUMP JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH2 0x26D8 CALLDATASIZE PUSH2 0x2CCC JUMP JUMPDEST PUSH2 0x26E0 PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x26EF PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x26FC DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ DUP1 ISZERO PUSH2 0x29DA JUMPI JUMPDEST PUSH2 0x271F SWAP1 PUSH2 0x337A JUMP JUMPDEST PUSH2 0x2732 PUSH2 0x272B DUP4 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP3 PUSH2 0x2CF8 JUMP JUMPDEST POP SWAP1 DUP1 ISZERO PUSH2 0x2985 JUMPI PUSH1 0xA DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x20 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP3 SWAP1 SWAP2 SWAP1 DUP7 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP11 AND GAS CALL DUP1 ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x2968 JUMPI JUMPDEST POP PUSH2 0x27A7 PUSH4 0x5F5E100 PUSH2 0x279D DUP5 SLOAD PUSH1 0x6 DUP6 ADD SLOAD SWAP1 PUSH2 0x3300 JUMP JUMPDEST DIV PUSH2 0x2DB DUP6 PUSH2 0x327B JUMP JUMPDEST PUSH1 0x8 DUP3 ADD SWAP3 DUP4 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x2 EQ PUSH2 0x28A9 JUMPI JUMPDEST POP DUP4 SLOAD SWAP3 PUSH1 0xFF DUP5 PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x27E8 JUMPI PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST SLOAD TIMESTAMP LT PUSH2 0x2856 JUMPI SWAP2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x280C PUSH2 0x2817 SWAP4 PUSH1 0x5 DUP10 SWAP8 SWAP7 ADD SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV SWAP6 DUP7 SWAP2 AND CALLER PUSH2 0x31A4 JUMP JUMPDEST SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD MSTORE PUSH32 0xF5E74952C2F9259A748F3AA9A6C4534A6F46A5966E5BAABDB6BD337F05234A8 PUSH1 0x40 CALLER SWAP3 LOG3 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x24C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7769746864726177426F72726F77203A206C657373207468616E206D61746368 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x2074696D65 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD TIMESTAMP LT PUSH2 0x2917 JUMPI PUSH2 0x28DB DUP8 SWAP2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x28D0 DUP7 PUSH1 0x3 DUP8 ADD SLOAD PUSH2 0x3300 JUMP JUMPDEST DIV SWAP3 DUP4 SWAP2 AND CALLER PUSH2 0x31A4 JUMP JUMPDEST DUP7 DUP6 SLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE DUP7 DUP10 DUP3 ADD MSTORE PUSH32 0xF5E74952C2F9259A748F3AA9A6C4534A6F46A5966E5BAABDB6BD337F05234A8 PUSH1 0x40 CALLER SWAP3 LOG3 DUP8 PUSH2 0x27C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7769746864726177426F72726F77203A206C657373207468616E20656E642074 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x696D65 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x297E SWAP1 DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x16AF JUMPI PUSH2 0x16A0 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST POP DUP6 PUSH2 0x2784 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7769746864726177426F72726F773A20776974686472617720616D6F756E7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x6973207A65726F PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x8 PUSH2 0x29E8 DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x3 EQ PUSH2 0x2716 JUMP JUMPDEST PUSH2 0x2A09 CALLDATASIZE PUSH2 0x2CCC JUMP JUMPDEST PUSH2 0x2A11 PUSH2 0x2FB3 JUMP JUMPDEST PUSH2 0x2A20 PUSH1 0xFF PUSH1 0x2 SLOAD AND ISZERO PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0x2A2C PUSH2 0xF6F DUP4 PUSH2 0x2C7B JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 PUSH2 0x2A39 DUP5 PUSH2 0x2C7B JUMP JUMPDEST POP ADD SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x431 JUMPI PUSH2 0x2A53 SWAP1 ISZERO PUSH2 0x2F56 JUMP JUMPDEST PUSH2 0x2A5C DUP3 PUSH2 0x2C7B JUMP JUMPDEST POP SWAP2 CALLER PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x8 DUP4 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x2A91 DUP5 DUP5 DUP5 SLOAD AND PUSH2 0x2FD6 JUMP JUMPDEST SWAP5 DUP6 ISZERO PUSH2 0x2B29 JUMPI PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE DUP3 SLOAD PUSH1 0x5 SWAP3 SWAP1 DUP6 AND PUSH2 0x2B09 JUMPI PUSH2 0x2ABD DUP2 SLOAD CALLVALUE SWAP1 PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE ADD PUSH2 0x2ACB CALLVALUE DUP3 SLOAD PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE JUMPDEST SLOAD AND SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x1D7B72E666A0B6217EFE7CFA1B604EA5C7B39219563CE48B30C9DA77045247A5 PUSH1 0x40 CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH2 0x2B14 DUP7 DUP3 SLOAD PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE ADD PUSH2 0x2B22 DUP5 DUP3 SLOAD PUSH2 0x30AD JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x2ACE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6465706F736974426F72726F773A206465706F73697420616D6F756E74206973 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x20 PUSH2 0x2B9A PUSH1 0x4 CALLDATALOAD PUSH2 0x2C7B JUMP JUMPDEST POP SLOAD TIMESTAMP LT ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x46D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0x46D JUMPI PUSH2 0x2BCE SWAP1 PUSH2 0x2C7B JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP3 PUSH1 0xFF PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD SWAP1 PUSH1 0x6 DUP6 ADD SLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 PUSH1 0x7 DUP9 ADD SLOAD AND SWAP3 PUSH1 0x8 DUP9 ADD SLOAD SWAP6 DUP6 PUSH1 0x9 DUP11 ADD SLOAD AND SWAP12 PUSH1 0xB DUP8 PUSH1 0xA DUP13 ADD SLOAD AND SWAP11 ADD SLOAD SWAP11 PUSH1 0x40 MLOAD SWAP13 DUP14 MSTORE PUSH1 0x20 DUP14 ADD MSTORE PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0x60 DUP12 ADD MSTORE PUSH1 0x80 DUP11 ADD MSTORE PUSH1 0xA0 DUP10 ADD MSTORE PUSH1 0xC0 DUP9 ADD MSTORE PUSH1 0xE0 DUP8 ADD MSTORE DUP2 AND PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0xA0 SHR AND SWAP4 PUSH1 0x5 DUP6 LT ISZERO PUSH2 0x431 JUMPI PUSH2 0x1A0 SWAP5 PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD MSTORE PUSH2 0x180 DUP3 ADD MSTORE RETURN JUMPDEST PUSH1 0x7 SLOAD DUP2 LT ISZERO PUSH2 0x2CB6 JUMPI PUSH1 0xC SWAP1 PUSH1 0x7 PUSH1 0x0 MSTORE MUL PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C688 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x46D JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x46D JUMPI JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x2CB6 JUMPI PUSH1 0x6 SWAP1 PUSH1 0x8 PUSH1 0x0 MSTORE MUL PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2D4F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2D4F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 SWAP1 DUP2 DUP2 ADD SWAP1 CALLER PUSH1 0x60 SHL DUP3 MSTORE ADDRESS PUSH1 0x60 SHL PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x28 DUP2 MSTORE PUSH2 0x2DAD DUP2 PUSH2 0x2D33 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH32 0x8DDDB57468CF5338EE155397AD1400A7A564308824F517D20A8A7C516523BB47 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF5D50B3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 PUSH1 0x24 DUP4 ADD MSTORE DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x16B6 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2E75 JUMPI JUMPDEST POP ISZERO PUSH2 0x2E1A JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D756C74695369676E6174757265436C69656E74203A20546869732074782069 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x1CC81B9BDD08185C1C9C9BDD9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP3 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2E9E JUMPI JUMPDEST PUSH2 0x2E8B DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x2E9B JUMPI POP MLOAD CODESIZE PUSH2 0x2E11 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x2E81 JUMP JUMPDEST ISZERO PUSH2 0x2EAC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A205374616B6520686173206265656E2073757370 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x195B991959 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2F06 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A204C657373207468616E20736574746C65207469 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6D65 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2F5D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73746174653A20506F6F6C20737461747573206973206E6F7420657175616C20 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xE8DE40DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ PUSH2 0x2FC4 JUMPI PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x2FEA JUMPI POP POP CALLVALUE SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x2FF3 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP2 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT DUP3 DUP5 LT OR PUSH2 0x2D4F JUMPI PUSH2 0x303D SWAP3 PUSH1 0x40 MSTORE PUSH2 0x3040 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 PUSH1 0x20 SWAP2 DUP3 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL ISZERO PUSH2 0x16B6 JUMPI PUSH1 0x0 MLOAD RETURNDATASIZE PUSH2 0x3093 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE ISZERO JUMPDEST PUSH2 0x3071 JUMPI POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0x306A JUMP JUMPDEST PUSH4 0x5F5E100 DUP2 ADD SWAP1 DUP2 LT PUSH2 0x1894 JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP2 ADD SWAP1 DUP2 LT PUSH2 0x1894 JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP2 SUB SWAP1 DUP2 GT PUSH2 0x30C7 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3113 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65646765506F6F6C203A20416674657220736574746C652074696D650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x315F JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73746174653A206E6F74206D6174636820616E6420756E646F6E650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 SWAP2 SWAP1 DUP4 PUSH2 0x320C JUMPI DUP3 PUSH1 0x0 DUP2 ISZERO PUSH2 0x3203 JUMPI JUMPDEST PUSH1 0x0 DUP1 DUP1 SWAP4 DUP2 SWAP4 DUP8 DUP8 AND SWAP1 CALL ISZERO PUSH2 0x16B6 JUMPI PUSH32 0xD12200EFA34901B99367694174C3B0D32C99585FDF37C7C26892136DDD0836D9 SWAP2 PUSH1 0x20 SWAP2 JUMPDEST PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND SWAP3 LOG3 JUMP JUMPDEST POP PUSH2 0x8FC PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP3 MSTORE PUSH32 0xD12200EFA34901B99367694174C3B0D32C99585FDF37C7C26892136DDD0836D9 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 PUSH2 0x3276 SWAP1 PUSH2 0x3270 PUSH1 0x64 DUP3 PUSH2 0x2D65 JUMP JUMPDEST DUP8 PUSH2 0x3040 JUMP JUMPDEST PUSH2 0x31F8 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 ISZERO SWAP2 DUP4 DIV EQ OR ISZERO PUSH2 0x3298 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D756C7469706C69636174696F6E206F766572666C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x5F5E100 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 ISZERO SWAP2 DUP4 DIV EQ OR ISZERO PUSH2 0x3298 JUMPI SWAP1 JUMP JUMPDEST DUP2 DUP2 MUL SWAP2 DUP2 ISZERO SWAP2 DUP4 DIV EQ OR ISZERO PUSH2 0x3298 JUMPI SWAP1 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x331D JUMPI DIV SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x46D JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x46D JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3381 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73746174653A2066696E697368206C69717569646174696F6E00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x33CD JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73746174653A207374617465206D75737420626520756E646F6E650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 PUSH4 0x5F5E100 PUSH2 0x3425 PUSH2 0x303D SWAP5 DUP4 PUSH2 0x3300 JUMP JUMPDEST DIV SWAP2 DUP3 DUP1 PUSH2 0x3435 JUMPI JUMPDEST POP POP PUSH2 0x30BA JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x344B SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x31A4 JUMP JUMPDEST CODESIZE DUP3 PUSH2 0x342E JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x2CB6 JUMPI PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 LT ISZERO PUSH2 0x2CB6 JUMPI PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x2CB6 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP4 DUP3 SUB SLT PUSH2 0x46D JUMPI DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP5 DUP3 GT PUSH2 0x46D JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x46D JUMPI DUP1 MLOAD SWAP4 DUP5 GT PUSH2 0x2D4F JUMPI DUP4 PUSH1 0x5 SHL SWAP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x34CD DUP6 DUP5 ADD DUP8 PUSH2 0x2D65 JUMP JUMPDEST DUP6 MSTORE DUP4 DUP1 DUP7 ADD SWAP3 DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x46D JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x34F0 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x34E2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP2 DUP4 ADD DUP5 DUP2 GT DUP4 DUP3 LT OR PUSH2 0x2D4F JUMPI PUSH2 0x352B SWAP3 DUP5 SWAP2 DUP3 MSTORE CALLDATASIZE SWAP1 CALLDATACOPY PUSH2 0x2C7B JUMP JUMPDEST POP SWAP1 DUP1 MLOAD SWAP2 PUSH2 0x3539 DUP4 PUSH2 0x2D33 JUMP JUMPDEST PUSH1 0x2 DUP4 MSTORE PUSH1 0x20 SWAP3 PUSH1 0x8 DUP5 DUP3 ADD SWAP3 DUP5 CALLDATASIZE DUP6 CALLDATACOPY PUSH1 0x7 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 SWAP3 SWAP1 SWAP2 DUP4 AND PUSH2 0x3567 DUP7 PUSH2 0x3452 JUMP JUMPDEST MSTORE ADD SLOAD AND PUSH2 0x3574 DUP4 PUSH2 0x345F JUMP JUMPDEST MSTORE PUSH1 0x4 SLOAD AND SWAP1 DUP4 MLOAD SWAP3 DUP4 SWAP2 PUSH4 0x4E59D27 PUSH1 0xE1 SHL DUP4 MSTORE PUSH1 0x24 DUP4 ADD SWAP1 DUP8 PUSH1 0x4 DUP6 ADD MSTORE MLOAD DUP1 SWAP2 MSTORE PUSH1 0x44 DUP4 ADD SWAP2 SWAP1 PUSH1 0x0 JUMPDEST DUP9 DUP3 DUP3 LT PUSH2 0x3622 JUMPI POP POP POP POP SWAP2 DUP2 DUP1 PUSH1 0x0 SWAP5 SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x3617 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x35F6 JUMPI JUMPDEST POP DUP2 MLOAD SWAP4 DUP5 DUP4 ADD SWAP1 DUP2 GT DUP6 DUP3 LT OR PUSH2 0x2D4F JUMPI PUSH2 0x35EE SWAP3 MSTORE PUSH2 0x35E6 DUP2 PUSH2 0x3452 JUMP JUMPDEST MLOAD DUP5 MSTORE PUSH2 0x345F JUMP JUMPDEST MLOAD SWAP1 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x3611 SWAP2 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x3609 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3483 JUMP JUMPDEST CODESIZE PUSH2 0x35C6 JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP8 SWAP6 POP SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x35A1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x0 DUP2 ISZERO PUSH2 0x3911 JUMPI POP PUSH1 0x0 PUSH2 0x3681 SWAP2 PUSH2 0x3658 DUP5 DUP7 DUP10 PUSH2 0x3975 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP3 DUP4 SWAP3 PUSH4 0x7C0329D PUSH1 0xE2 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0x3919 JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x36A7 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x38F8 JUMPI JUMPDEST POP PUSH2 0x3452 JUMP JUMPDEST MLOAD SWAP4 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP3 DUP4 ISZERO SWAP1 PUSH2 0x36DA SWAP1 DUP3 ISZERO PUSH2 0x38E9 JUMPI JUMPDEST DUP4 DUP2 AND SWAP7 DUP8 ISZERO SWAP5 DUP6 ISZERO PUSH2 0x38DA JUMPI JUMPDEST DUP7 AND SWAP6 PUSH2 0x3975 JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP2 ISZERO PUSH2 0x37E4 JUMPI POP POP SWAP1 PUSH1 0x1E TIMESTAMP ADD SWAP2 DUP3 TIMESTAMP GT PUSH2 0x37B5 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3724 SWAP2 DUP9 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0x7FF36AB5 PUSH1 0xE0 SHL DUP5 MSTORE DUP9 PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x80 PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x84 DUP5 ADD SWAP1 PUSH2 0x3919 JUMP JUMPDEST SWAP1 ADDRESS PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD MSTORE SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x16B6 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x37CB JUMPI JUMPDEST POP SWAP2 JUMPDEST PUSH2 0x374F DUP4 PUSH2 0x3452 JUMP JUMPDEST MLOAD DUP4 MLOAD PUSH1 0x0 NOT SWAP4 SWAP2 SWAP1 DUP5 DUP2 ADD SWAP1 DUP2 GT PUSH2 0x37B5 JUMPI PUSH32 0xFA2DDA1CC1B86E41239702756B13EFFBC1A092B5C57E3AD320FBE4F3B13FE235 SWAP2 PUSH2 0x3790 PUSH1 0x40 SWAP3 DUP9 PUSH2 0x346F JUMP JUMPDEST MLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG3 DUP2 MLOAD SWAP1 DUP2 ADD SWAP1 DUP2 GT PUSH2 0x37B5 JUMPI PUSH2 0x37B1 SWAP2 PUSH2 0x346F JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x37DE SWAP2 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x3609 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST CODESIZE PUSH2 0x3743 JUMP JUMPDEST ISZERO PUSH2 0x3850 JUMPI POP PUSH1 0x1E TIMESTAMP ADD DUP1 TIMESTAMP GT PUSH2 0x37B5 JUMPI PUSH2 0x381D SWAP3 DUP8 PUSH1 0x0 DUP1 SWAP5 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH4 0x2512ECA5 PUSH1 0xE1 SHL DUP6 MSTORE ADDRESS SWAP2 PUSH1 0x4 DUP7 ADD PUSH2 0x3A93 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x16B6 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3837 JUMPI JUMPDEST POP SWAP2 PUSH2 0x3746 JUMP JUMPDEST PUSH2 0x384A SWAP2 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x3609 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST CODESIZE PUSH2 0x3830 JUMP JUMPDEST SWAP2 PUSH1 0x1E TIMESTAMP ADD SWAP2 DUP3 TIMESTAMP GT PUSH2 0x38C6 JUMPI SWAP2 DUP4 SWAP2 DUP9 DUP4 PUSH2 0x3885 SWAP6 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH4 0x38ED1739 PUSH1 0xE0 SHL DUP6 MSTORE ADDRESS SWAP2 PUSH1 0x4 DUP7 ADD PUSH2 0x3A93 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x38BA JUMPI DUP1 SWAP3 PUSH2 0x389F JUMPI JUMPDEST POP POP SWAP2 PUSH2 0x3746 JUMP JUMPDEST PUSH2 0x38B3 SWAP3 POP RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x3609 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x3897 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH2 0x38E4 DUP8 DUP5 PUSH2 0x3ACD JUMP JUMPDEST PUSH2 0x36D2 JUMP JUMPDEST PUSH2 0x38F3 DUP6 DUP9 PUSH2 0x3ACD JUMP JUMPDEST PUSH2 0x36C4 JUMP JUMPDEST PUSH2 0x390B SWAP2 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x3609 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST CODESIZE PUSH2 0x36A1 JUMP JUMPDEST SWAP1 POP SWAP4 PUSH2 0x36AA JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x3939 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x392B JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x46D JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x46D JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH2 0x3990 DUP6 PUSH2 0x2D33 JUMP JUMPDEST PUSH1 0x2 DUP6 MSTORE PUSH1 0x20 SWAP2 DUP4 CALLDATASIZE DUP5 DUP9 ADD CALLDATACOPY DUP6 SWAP8 DUP6 DUP2 AND ISZERO PUSH1 0x0 EQ PUSH2 0x3A8E JUMPI POP DUP4 MLOAD PUSH4 0x15AB88C9 PUSH1 0xE3 SHL DUP2 MSTORE DUP4 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x3A83 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3A66 JUMPI JUMPDEST POP JUMPDEST DUP6 PUSH2 0x39DA DUP9 PUSH2 0x3452 JUMP JUMPDEST SWAP2 AND SWAP1 MSTORE DUP1 DUP6 AND PUSH2 0x3A58 JUMPI POP SWAP1 DUP1 PUSH1 0x4 SWAP3 DUP5 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x15AB88C9 PUSH1 0xE3 SHL DUP3 MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x3A4E JUMPI POP SWAP1 PUSH2 0x3A1B SWAP3 SWAP2 PUSH1 0x0 SWAP3 PUSH2 0x3A21 JUMPI JUMPDEST POP POP SWAP3 PUSH2 0x345F JUMP JUMPDEST SWAP2 AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x3A40 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x3A47 JUMPI JUMPDEST PUSH2 0x3A38 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3956 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x3A13 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3A2E JUMP JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP POP PUSH2 0x3A1B SWAP2 POP SWAP3 PUSH2 0x345F JUMP JUMPDEST PUSH2 0x3A7D SWAP2 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x3A47 JUMPI PUSH2 0x3A38 DUP2 DUP4 PUSH2 0x2D65 JUMP JUMPDEST CODESIZE PUSH2 0x39CE JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x39D0 JUMP JUMPDEST SWAP1 PUSH1 0x80 SWAP3 PUSH2 0x3AB9 SWAP2 SWAP7 SWAP6 SWAP5 SWAP7 DUP4 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD SWAP1 PUSH2 0x3919 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP6 AND PUSH1 0x60 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 NOT PUSH1 0x44 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 SWAP2 PUSH1 0x80 DUP2 ADD DUP5 DUP2 GT DUP3 DUP3 LT OR PUSH2 0x2D4F JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 DUP1 SWAP4 MLOAD SWAP3 GAS CALL SWAP2 RETURNDATASIZE ISZERO PUSH2 0x3BDD JUMPI RETURNDATASIZE SWAP1 DUP2 GT PUSH2 0x3BC9 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3B4D PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP7 ADD DUP4 PUSH2 0x2D65 JUMP JUMPDEST DUP2 MSTORE DUP1 SWAP2 DUP5 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST DUP2 PUSH2 0x3B99 JUMPI JUMPDEST POP ISZERO PUSH2 0x3B66 JUMPI POP JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x2173616665417070726F7665 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 MLOAD DUP1 ISZERO SWAP3 POP DUP4 SWAP1 DUP4 ISZERO PUSH2 0x3BB1 JUMPI JUMPDEST POP POP POP CODESIZE PUSH2 0x3B5D JUMP JUMPDEST PUSH2 0x3BC1 SWAP4 POP DUP3 ADD DUP2 ADD SWAP2 ADD PUSH2 0x3362 JUMP JUMPDEST CODESIZE DUP3 DUP2 PUSH2 0x3BA8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST POP POP PUSH1 0x60 PUSH2 0x3B57 JUMP INVALID MLOAD PUSH2 0x12F3 0xBF MOD 0xE3 PUSH20 0xFCEA44DB364769C04CC7EF4392E6DE95D2B25072 SIGNEXTEND 0xCA 0xCE 0xFB LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0xC7 0xAC NOT PUSH7 0xF51929369415B8 0xD7 0xAB 0xD0 0xAE 0xED DUP14 0xE2 DUP3 RETURNDATASIZE MUL 0xBB 0xBD CALLER SIGNEXTEND PUSH5 0x1D83C0931A PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
          "sourceMap": "566:45426:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2466:103:15;;;:::i;:::-;44747:68:31;566:45426;44755:12;566:45426;;;44747:68;:::i;:::-;45054:89;45079:19;;;:::i;:::-;566:45426;;45062:15;:47;;45054:89;:::i;:::-;566:45426;45394:25;:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;;45394:48;:106;;;;566:45426;45394:169;;;;566:45426;45386:217;;;:::i;:::-;14042:19;;;:::i;:::-;14099;;;;:::i;:::-;14169:10;;;566:45426;;14156:12;566:45426;;;;;;;;;;;;;;;;14205:22;;;566:45426;;;14324:15;;566:45426;;;14316:47;;;;;:::i;:::-;:51;566:45426;;44755:12;14453:20;;566:45426;;;;;;;;;1723:4;14791:67;14633:42;14799:47;45079:13;14633:42;14625:68;15202:50;14633:42;;;;566:45426;14633:42;;:::i;:::-;14625:68;:::i;:::-;14799:47;;:::i;:::-;14791:67;:::i;:::-;3174:152:19;14883:21:31;;566:45426;;;;;;;;;;;;;15014:14;566:45426;;;;;;;;15029:12;566:45426;;;;;14169:10;15029:12;:::i;:::-;566:45426;;;;;;15143:44;566:45426;;15143:44;;:::i;:::-;566:45426;;;;;;;;;;14169:10;15202:50;;566:45426;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;45394:169;45513:19;566:45426;45394:25;45513:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;;45513:50;45394:169;;566:45426;;;;;;;;;;;;45394:106;45455:19;566:45426;45394:25;45455:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;44755:12;45455:45;45394:106;;566:45426;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;2572:24;566:45426;;;;;;;;;;;;;;;;;;;;;;2466:103:15;;;:::i;:::-;44747:68:31;566:45426;44755:12;566:45426;;;44747:68;:::i;:::-;566:45426;45896:25;:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;;45888:84;45896:45;;45888:84;:::i;:::-;28275:19;;;:::i;:::-;28349:17;;566:45426;28349:17;;566:45426;28349:19;566:45426;;28513:10;566:45426;;28498:14;566:45426;;;;;;;;;;;;;;;;28597:26;;;566:45426;;44755:12;28720:22;;566:45426;;;;;;;45896:25;28842:16;566:45426;;29017:79;;-1:-1:-1;;;;;566:45426:31;28842:16;28859:22;;28842:16;566:45426;;28513:10;28859:22;:::i;:::-;566:45426;;;;;;;;;;;;;;;;;;;28513:10;29017:79;;566:45426;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;2149:72:27;;:::i;:::-;44692:12:31;566:45426;;;;;44691:13;566:45426;;;;;;44692:12;566:45426;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;;2149:72:27;;:::i;:::-;32031:19:31;;;:::i;:::-;32088;;;;;:::i;:::-;31669;;:27;:19;;;:::i;:::-;:27;;566:45426;31652:15;:44;566:45426;;32088:13;32193:10;;566:45426;;;;;;;;;;;;;;31669:27;32193:31;566:45426;;32031:13;32325:14;;33250:53;566:45426;;;;;;32794:40;566:45426;;;;32485:12;36140:4;32687:69;32714:17;1927:8;32469:60;32477:38;31669:27;32485:12;;566:45426;;;32477:38;;:::i;:::-;32469:60;:::i;:::-;3174:152:19;32714:17:31;;566:45426;;32706:49;566:45426;;32706:49;;;:::i;:::-;32687:69;;:::i;:::-;3174:152:19;32794:40:31;;:::i;:::-;566:45426;;1830:3;33010:50;33030:29;566:45426;;33030:29;:::i;:::-;33010:50;;:::i;:::-;3174:152:19;566:45426:31;;;32714:17;566:45426;32088:13;566:45426;;33250:53;:::i;:::-;33321:22;;;;;;1927:8;;33877:44;31669:27;33388:19;;33960:54;33388:19;;32714:17;33388:19;566:45426;33388:19;;33385:410;33388:19;;;33442:29;33613:9;33442:29;33661:28;33442:29;;;:::i;:::-;566:45426;;;;;;;;;;33613:9;;:::i;:::-;33661:28;:::i;:::-;33637:21;;;566:45426;33385:410;33885:23;;;566:45426;33877:44;:::i;:::-;566:45426;33971:9;566:45426;;;;;33960:54;;:::i;:::-;34064:23;;566:45426;2273:15;;-1:-1:-1;;;;2273:15:31;;;;;;;;-1:-1:-1;;;;;;;;;;;;;34163:73:31;566:45426;33385:410;33752:21;;;;;566:45426;33385:410;;1927:8;566:45426;;-1:-1:-1;;;1927:8:31;;566:45426;;1927:8;;;;;;;1302:1:27;1927:8:31;1302:1:27;;;1927:8:31;;;;566:45426;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;2386:25;566:45426;;;;;;;;-1:-1:-1;;;;;566:45426:31;;;;;;;;;;;;;;;;;;;;;2466:103:15;;;:::i;:::-;44747:68:31;566:45426;44755:12;566:45426;;;44747:68;:::i;:::-;566:45426;45896:25;:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;;45888:84;45896:45;;45888:84;:::i;:::-;19606:19;;;:::i;:::-;19669:15;;566:45426;19669:15;;566:45426;19669:17;566:45426;;19822:10;566:45426;;19809:12;566:45426;;;;;;;;;;;;;;;;19901:22;;;566:45426;;44755:12;20032:20;;566:45426;;;;;;;45896:13;20193:14;566:45426;;20321:71;;-1:-1:-1;;;;;566:45426:31;20193:14;20208:20;;20193:14;566:45426;;19822:10;20208:20;:::i;566:45426::-;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;-1:-1:-1;;;;;566:45426:31;;:::i;:::-;;;;5306:67;566:45426;;;;;;;;;;;;;;;;5306:67;566:45426;5306:67;566:45426;5306:67;;566:45426;5306:67;;566:45426;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;11711:10;11667:19;566:45426;;11667:19;:::i;:::-;11711:10;;566:45426;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2466:103:15;;:::i;:::-;44747:68:31;566:45426;44755:12;566:45426;;;44747:68;:::i;:::-;45054:89;45079:19;;;:::i;45054:89::-;566:45426;45394:25;:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;;45394:48;:106;;;;566:45426;45394:169;;;;566:45426;45386:217;;;:::i;:::-;22435:19;;;:::i;:::-;22492;;;;;:::i;:::-;22568:10;;;566:45426;;22553:14;566:45426;;;;;;;;;;;;;22611:17;566:45426;;22611:17;;566:45426;22630:23;;566:45426;22603:51;;;;;:::i;:::-;:55;566:45426;;;;22758:24;;;566:45426;;44755:12;22867:22;;566:45426;;;;;;;;;23049:43;566:45426;23049:43;;1723:4;23209:71;23049:43;23217:51;23049:43;;23041:70;23548:54;23049:43;;;45394:25;23049:43;;:::i;23209:71::-;3174:152:19;23304:23:31;;566:45426;;;-1:-1:-1;;566:45426:31;;;;23503:16;566:45426;;-1:-1:-1;;;;;566:45426:31;23503:16;23520:12;;3174:152:19;;566:45426:31;;22568:10;23520:12;:::i;:::-;566:45426;;;;;;;;22568:10;23548:54;;566:45426;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;45394:169;45513:19;566:45426;45394:25;45513:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;;45513:50;45394:169;;:106;45455:19;566:45426;45394:25;45455:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;44755:12;45455:45;45394:106;;566:45426;;;;;;-1:-1:-1;;566:45426:31;;;;;;;1176:39:27;566:45426:31;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;1839:33;566:45426;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;;4264:35;566:45426;4264:35;;;;;;566:45426;4264:35;;:::i;:::-;566:45426;;;4264:35;566:45426;4264:35;;566:45426;4264:35;;;;566:45426;;4264:35;;566:45426;4264:35;;566:45426;4264:35;;566:45426;4264:35;;566:45426;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2466:103:15;;:::i;:::-;44747:68:31;566:45426;44755:12;566:45426;;;44747:68;:::i;:::-;44889:92;44913:19;;;:::i;:::-;566:45426;;44897:15;:46;44889:92;:::i;:::-;566:45426;45220:25;:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;45212:97;45220:44;;45212:97;:::i;:::-;12315:19;;;:::i;:::-;12385:10;;;566:45426;;12372:12;566:45426;;;;;;;;;;;;;12504:14;;;;566:45426;12520:15;12496:40;566:45426;12520:15;;566:45426;;;12496:40;;:::i;:::-;12480:56;;566:45426;;44913:13;12636:14;566:45426;;-1:-1:-1;;;;;566:45426:31;;12619:45;;566:45426;;;;12619:45;:::i;:::-;566:45426;;;12682:16;;566:45426;;;44755:12;12759:19;;566:45426;;-1:-1:-1;;566:45426:31;;;;;;;;;13097:40;566:45426;;13127:9;13097:40;;:::i;:::-;566:45426;;13169:35;13127:9;566:45426;;13169:35;:::i;:::-;566:45426;;12966:492;566:45426;;;;;;;;;;;;13472:58;566:45426;12385:10;13472:58;;566:45426;;;;12966:492;13346:37;566:45426;;;13346:37;:::i;:::-;566:45426;;13415:32;566:45426;;;13415:32;:::i;:::-;566:45426;;12966:492;;566:45426;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;;2149:72:27;;:::i;:::-;29333:19:31;;;:::i;:::-;29389;;;;;:::i;:::-;29206;;;;:::i;:::-;566:45426;;29189:15;:47;566:45426;;29389:13;29505:10;;566:45426;;;;;;;;;;;;;;;;;29581:15;;566:45426;;;29581:17;;;;:40;;;566:45426;29578:1982;;;29697:28;;;566:45426;29697:28;;;;;;566:45426;29697:28;;:::i;:::-;566:45426;;;;29874:49;29882:30;2273:15;;29882:30;:::i;:::-;2273:15;;29874:49;;:::i;:::-;29972:17;30264:58;30304:17;30272:31;1723:4;29964:37;566:45426;29972:17;;566:45426;;;29964:37;:::i;:::-;3174:152:19;30272:31:31;:::i;:::-;30304:17;;566:45426;;;30264:58;;:::i;:::-;566:45426;;30339:27;;;;;;;;566:45426;;;;;;;30480:23;;566:45426;30336:670;2273:15;;-1:-1:-1;;;;2273:15:31;;;;;;;;-1:-1:-1;;;;;;;;;;;31140:72:31;;;566:45426;30336:670;30927:64;566:45426;;30935:43;566:45426;;;;30840:31;30832:51;566:45426;;;;2273:15;30840:31;:::i;:::-;2273:15;;30832:51;;:::i;:::-;566:45426;;30935:43;;:::i;30927:64::-;30901:23;;566:45426;30336:670;;29578:1982;-1:-1:-1;;;;2273:15:31;-1:-1:-1;;;2273:15:31;;;;-1:-1:-1;566:45426:31;;;;31416:17;;;566:45426;;31392:23;;;;566:45426;;;;;;;;-1:-1:-1;;;;;;;;;;;566:45426:31;;31480:69;566:45426;29581:40;29602:17;566:45426;29602:17;;566:45426;29602:19;;29581:40;;566:45426;;;;;;;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;;2149:72:27;;:::i;:::-;9594:14:31;;566:45426;;;;;9657:34;566:45426;9657:34;;566:45426;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;;:::i;:::-;2149:72:27;;:::i;:::-;-1:-1:-1;;;;;566:45426:31;;;;9350:25;;566:45426;;;;;;;;9433:37;566:45426;9433:37;;-1:-1:-1;;;;;;566:45426:31;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;;;;-1:-1:-1;;;;;566:45426:31;;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;9810:13;566:45426;;;;;;;;;;;;;;;;;;;;;;2466:103:15;;:::i;:::-;44747:68:31;566:45426;44755:12;566:45426;;;44747:68;:::i;:::-;45054:89;45079:19;;;:::i;45054:89::-;566:45426;45394:25;:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;;45394:48;:106;;;;566:45426;45394:169;;;;566:45426;45386:217;;;:::i;:::-;15721:19;;;:::i;:::-;15778;;;;:::i;:::-;15848:10;;;566:45426;;15835:12;566:45426;;;;;;;;;;;;;;;;15906:22;;;566:45426;;44755:12;16017:19;566:45426;;;;45394:25;566:45426;;;;1723:4;16206:42;16198:68;16206:42;16456:33;16206:42;;:::i;:::-;566:45426;16250:15;;566:45426;16198:68;;:::i;:::-;566:45426;;16456:33;:::i;:::-;16513:11;;;566:45426;;;-1:-1:-1;;;16513:37:31;;15848:10;566:45426;16513:37;;566:45426;3174:152:19;;;;566:45426:31;;;;;;3174:152:19;566:45426:31;;-1:-1:-1;;;;;566:45426:31;3174:152:19;566:45426:31;;;;;;;;-1:-1:-1;;566:45426:31;;16513:37;;;;;;;16660:47;16513:37;45079:13;16513:37;;;566:45426;-1:-1:-1;566:45426:31;;-1:-1:-1;;566:45426:31;;;;;16682:14;566:45426;;;;;;;;15848:10;;16660:47;566:45426;;;;16513:37;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;566:45426;;1302:1:27;566:45426:31;1302:1:27;;;;;566:45426:31;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;45394:169;45513:19;566:45426;45394:25;45513:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;;45513:50;45394:169;;:106;45455:19;566:45426;45394:25;45455:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;44755:12;45455:45;45394:106;;566:45426;;;;;;-1:-1:-1;;566:45426:31;;;;;31669:27;:19;566:45426;;31669:19;:::i;:::-;:27;;566:45426;31652:15;:44;;566:45426;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;1176:39:27;566:45426:31;;;-1:-1:-1;;;;;566:45426:31;;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;;34443:19;;;:::i;:::-;34500;;35040:27;1723:4;34813:44;34719:51;34554:28;34500:19;;;:::i;:::-;34554:28;;;:::i;:::-;34727:31;566:45426;;;2273:15;34727:31;:::i;34719:51::-;566:45426;34821:23;;566:45426;34813:44;:::i;:::-;3174:152:19;566:45426:31;;35040:27;;566:45426;1830:3;566:45426;;;1859:6:19;;;;566:45426:31;;;34988:81;;;;:::i;:::-;3174:152:19;-1:-1:-1;566:45426:31;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;;2313:31;566:45426;;;;;;;;;;;;;;;;;:::i;:::-;2149:72:27;;;:::i;:::-;566:45426:31;8788:16;566:45426;;8814:20;566:45426;8849:27;566:45426;8849:27;;566:45426;;;;;;;-1:-1:-1;;566:45426:31;;;;;2544:22;566:45426;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;566:45426:31;;;;;;;;;;-1:-1:-1;;;;;566:45426:31;;;;;;;;;;-1:-1:-1;;;;;566:45426:31;;;;;;;;;;;-1:-1:-1;;;;;566:45426:31;;;;;;;;;2149:72:27;;:::i;:::-;10465:22:31;;;566:45426;;;10561:22;;566:45426;;10641:21;;566:45426;;;;;2273:15;566:45426;;;;;;;;;;;;;2273:15;;566:45426;10732:518;;2273:15;566:45426;;;10732:518;;2273:15;566:45426;;;10732:518;;2273:15;566:45426;;10732:518;;2273:15;566:45426;;10732:518;;2273:15;566:45426;;;10732:518;;2273:15;566:45426;10732:518;;2273:15;566:45426;10732:518;;2273:15;566:45426;;10732:518;;2273:15;10732:518;;;2273:15;10732:518;;;2273:15;566:45426;;10732:518;;;2273:15;10713:13;2273:15;-1:-1:-1;;;2273:15:31;;;;;;566:45426;2273:15;;;10713:13;2273:15;;:::i;:::-;;;;;;;;566:45426;;;10732:518;;2273:15;566:45426;2273:15;;566:45426;;10732:518;;2273:15;;;;566:45426;;10732:518;;2273:15;566:45426;2273:15;;566:45426;;10732:518;;2273:15;566:45426;2273:15;;566:45426;;10732:518;;2273:15;566:45426;2273:15;;566:45426;;10732:518;;2273:15;;;;566:45426;10713:13;2273:15;;566:45426;;;;;;;10732:518;;2273:15;566:45426;;;;;;;;;;;;;2273:15;;;566:45426;;;;;;;10732:518;;2273:15;566:45426;;;;10732:518;566:45426;10732:518;;2273:15;566:45426;;;;;;;-1:-1:-1;;;;;;2273:15:31;;;;;;;;;-1:-1:-1;;;2273:15:31;;;;;;;;10732:518;;;2273:15;;;;566:45426;;;;-1:-1:-1;;;;;566:45426:31;;;;;;10732:518;;;2273:15;;;;566:45426;;;;;;;;;;;10732:518;;2273:15;;;;;;566:45426;;;;;;;;;;;;;;;;;;2273:15;;566:45426;11312:238;;566:45426;2273:15;;566:45426;11312:238;;566:45426;2273:15;;566:45426;11312:238;;566:45426;2273:15;;566:45426;11312:238;;2273:15;566:45426;2273:15;;566:45426;11312:238;;2273:15;566:45426;2273:15;;;;-1:-1:-1;;;2273:15:31;;;;;;566:45426;2273:15;;;;;;:::i;:::-;;;;;;;566:45426;;2273:15;566:45426;2273:15;;566:45426;2273:15;;;;566:45426;2273:15;566:45426;2273:15;;566:45426;2273:15;566:45426;2273:15;;566:45426;2273:15;566:45426;2273:15;;;566:45426;-1:-1:-1;2273:15:31;566:45426;;;;;2273:15;566:45426;;2273:15;566:45426;2273:15;;566:45426;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2273:15;566:45426;;;;;2273:15;566:45426;;2273:15;566:45426;2273:15;;566:45426;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;1302:1:27;;;566:45426:31;;1302:1:27;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;1302:1:27;;;566:45426:31;;1302:1:27;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;;1302:1:27;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;;2149:72:27;;:::i;:::-;35303:19:31;;;:::i;:::-;35361;;;;;:::i;:::-;566:45426;;;;35399:15;;;:33;566:45426;;;35303:13;35535:10;;566:45426;;;;;;;;;;;;;;;35535:33;566:45426;;37152:54;35859:38;37041:44;566:45426;35712:14;;36459:53;566:45426;35712:14;36236:40;35712:14;36140:4;36069:69;566:45426;35712:14;35361:13;35712:14;566:45426;;36096:17;1927:8;35851:60;566:45426;36088:49;566:45426;;;;;;;;;35867:12;566:45426;35867:12;;566:45426;35859:38;:::i;35851:60::-;3174:152:19;36096:17:31;;566:45426;;;36088:49;;;:::i;36236:40::-;566:45426;;1830:3;36345:50;36365:29;566:45426;;36365:29;:::i;:::-;36345:50;;:::i;:::-;3174:152:19;566:45426:31;;;36096:17;566:45426;35303:13;566:45426;;36459:53;:::i;:::-;36610:21;;;;;;36606:351;36610:21;;;36667:29;36798:9;36667:29;36851:28;36667:29;;;:::i;:::-;566:45426;;;;;;;;;;;36798:9;;:::i;36851:28::-;566:45426;36822:26;;566:45426;37049:23;;;566:45426;37041:44;:::i;37152:54::-;37241:28;;566:45426;2273:15;;-1:-1:-1;;;;2273:15:31;;;;;;;;-1:-1:-1;;;;;;;;;;;;;37398:78:31;566:45426;36606:351;36909:26;;566:45426;36909:26;;566:45426;36606:351;;566:45426;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;;;;-1:-1:-1;;;;;566:45426:31;;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;;:::i;:::-;2149:72:27;;:::i;:::-;-1:-1:-1;;;;;566:45426:31;;;;8970:25;;566:45426;;9074:10;566:45426;;;;;;9053:44;566:45426;9053:44;;-1:-1:-1;;;;;;566:45426:31;;;;;;;;-1:-1:-1;;;;;566:45426:31;;9074:10;566:45426;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;-1:-1:-1;;;;;566:45426:31;;:::i;:::-;;;;4752:71;566:45426;;;;;;;;;;;;;;;;4752:71;566:45426;4752:71;566:45426;4752:71;;566:45426;4752:71;;566:45426;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2466:103:15;;:::i;:::-;44747:68:31;566:45426;44755:12;566:45426;;;44747:68;:::i;:::-;45054:89;45079:19;;;:::i;45054:89::-;566:45426;45394:25;:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;;45394:48;:106;;;;566:45426;45394:169;;;;566:45426;45386:217;;;:::i;:::-;24166:19;;;:::i;:::-;24223;;;;;:::i;:::-;24299:10;;;566:45426;;24284:14;566:45426;;;;;;;;;;;;;;;24334:24;;;566:45426;;44755:12;24450:21;566:45426;;;;45394:25;566:45426;;;;;;24923:72;24931:44;1830:3;24775:49;566:45426;;24806:17;;;566:45426;24775:49;;:::i;:::-;3174:152:19;24931:44:31;;:::i;:::-;566:45426;24977:17;;566:45426;24923:72;;:::i;:::-;1723:4;;25030:33;1723:4;25030:33;;;;:::i;:::-;25129:11;;;566:45426;;;-1:-1:-1;;;25129:37:31;;24299:10;566:45426;25129:37;;566:45426;3174:152:19;;;;566:45426:31;;;;-1:-1:-1;;;;;566:45426:31;;;;;;;;;;;;;;25129:37;;;;;;;25512:53;25129:37;45394:25;25129:37;25236:41;25129:37;;;566:45426;;;25236:41;:::i;:::-;3174:152:19;25362:14:31;25377:12;25362:14;;45079:13;25362:14;;566:45426;;24299:10;25377:12;:::i;:::-;566:45426;;-1:-1:-1;;566:45426:31;;;;;25535:16;566:45426;;;;;;;;24299:10;;25512:53;566:45426;;;;25129:37;;;;;;;;;;;;;:::i;:::-;;;;;566:45426;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;45394:169;45513:19;566:45426;45394:25;45513:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;;45513:50;45394:169;;:106;45455:19;566:45426;45394:25;45455:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;44755:12;45455:45;45394:106;;566:45426;;;;;;;:::i;:::-;2466:103:15;;;:::i;:::-;44747:68:31;566:45426;44755:12;566:45426;;;44747:68;:::i;:::-;566:45426;45691:25;:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;44755:12;45691:45;:99;;;;566:45426;45683:136;;;:::i;:::-;17381:19;17324;;;:::i;:::-;17381;;;:::i;:::-;17418:11;;;;566:45426;;17499:11;;;566:45426;;;-1:-1:-1;;;17499:38:31;;17516:10;566:45426;17499:38;;566:45426;;;;;;;17499:38;;-1:-1:-1;;;;;566:45426:31;17499:38;;566:45426;17499:38;;566:45426;;;;;;-1:-1:-1;;566:45426:31;;17499:38;;;;;;;;566:45426;;17727:55;566:45426;;17735:31;;;:::i;17727:55::-;17812:10;45691:25;17812:10;;566:45426;;;;;;;;;;;;44755:12;17812:28;17809:452;;566:45426;;;;;;;;;;;;18303:21;18291:33;18287:480;;566:45426;;;;;18287:480;566:45426;;18347:15;:32;566:45426;;18526:44;45691:13;18534:26;566:45426;1723:4;18534:26;;566:45426;18526:44;:::i;:::-;3174:152:19;18647:14:31;;18662:12;566:45426;;;;;17516:10;18662:12;:::i;:::-;566:45426;;;;;;;;;;;18694:62;566:45426;17516:10;18694:62;;18287:480;;;;;;;;566:45426;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;17809:452;566:45426;17880:12;;566:45426;17863:15;:29;566:45426;;;18033:21;1723:4;18025:39;18033:21;44755:12;18033:21;;566:45426;18025:39;:::i;:::-;3174:152:19;18141:14:31;45691:13;18141:14;;18156:12;566:45426;;;;;17516:10;18156:12;:::i;:::-;566:45426;;;;;;;;;;;;;18188:62;566:45426;17516:10;18188:62;;17809:452;;;;566:45426;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;17499:38;;;;;;;;;;;;;:::i;:::-;;;;;566:45426;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;45691:99;45740:19;566:45426;45691:25;45740:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;45769:21;45740:50;45691:99;;566:45426;;;;;;;:::i;:::-;2466:103:15;;:::i;:::-;44747:68:31;566:45426;44755:12;566:45426;;;44747:68;:::i;:::-;566:45426;45691:25;:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;44755:12;45691:45;:99;;;;566:45426;45683:136;;;:::i;:::-;26194:19;26137;;;:::i;:::-;26194;;;:::i;:::-;26271:13;;;;566:45426;;26338:11;;;566:45426;;;-1:-1:-1;;;26338:38:31;;26355:10;566:45426;26338:38;;566:45426;;;;;;;26338:38;;-1:-1:-1;;;;;566:45426:31;;26338:11;;566:45426;26338:38;;566:45426;;;;;;-1:-1:-1;;566:45426:31;;26338:38;;;;;;;;566:45426;;26509:55;1830:3;26418:49;566:45426;;26449:17;;;566:45426;26418:49;;:::i;:::-;3174:152:19;26517:31:31;;;:::i;26509:55::-;45691:25;26577:10;;566:45426;;;;;;;;;;;;;;44755:12;26577:28;26574:442;;566:45426;;;;;;;;;;;;;;;;27040:21;27028:33;27025:458;;566:45426;;;;27025:458;566:45426;27137:15;:32;566:45426;;27263:28;1723:4;27255:46;27374:12;27263:28;566:45426;27263:28;;;;566:45426;27255:46;:::i;:::-;3174:152:19;566:45426:31;;;;26355:10;27374:12;:::i;:::-;566:45426;;;;;;;;;;;27406:66;566:45426;26355:10;27406:66;;27025:458;;;;;;;;;;566:45426;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;26574:442;566:45426;26697:12;;566:45426;26680:15;:29;566:45426;;26907:12;26801:23;;1723:4;26793:41;26801:23;;;;566:45426;26793:41;:::i;:::-;3174:152:19;566:45426:31;;;;26355:10;26907:12;:::i;:::-;566:45426;;;;;;;;;;;;;;;26939:66;566:45426;26355:10;26939:66;;26574:442;;;566:45426;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;26338:38;;;;;;;;;;;;;:::i;:::-;;;;;566:45426;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;45691:99;45740:19;566:45426;45691:25;45740:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;45769:21;45740:50;45691:99;;566:45426;;;;:::i;:::-;2466:103:15;;:::i;:::-;44747:68:31;566:45426;44755:12;566:45426;;;44747:68;:::i;:::-;44889:92;44913:19;;;:::i;44889:92::-;566:45426;45220:25;:19;;;:::i;:::-;:25;;566:45426;;;;;;;;;;45212:97;45220:44;;45212:97;:::i;:::-;20716:19;;;:::i;:::-;20792:10;;;566:45426;;20777:14;566:45426;;;;;;;;;;;;;45220:25;20854:16;;566:45426;;;;;;20837:47;566:45426;;;;;20837:47;:::i;:::-;20923:10;;;566:45426;;44755:12;21014:21;;566:45426;;-1:-1:-1;;566:45426:31;;;;;;;21014:21;566:45426;;;;21295:42;566:45426;;21327:9;21295:42;;:::i;:::-;566:45426;;21407:17;21399:37;21327:9;566:45426;;21399:37;:::i;:::-;566:45426;;21177:595;566:45426;;;;;;;;;;;;21786:65;566:45426;20792:10;21786:65;;566:45426;;;;21177:595;21583:45;566:45426;;;21583:45;:::i;:::-;566:45426;;21698:17;21690:40;566:45426;;;21690:40;:::i;:::-;566:45426;;21177:595;;566:45426;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;29206:19;566:45426;;29206:19;:::i;:::-;566:45426;;29189:15;:47;;566:45426;;;;;;;;;;;;-1:-1:-1;;566:45426:31;;;;;;3685:35;566:45426;3685:35;;;;;;;;:::i;:::-;566:45426;;;;3685:35;;566:45426;3685:35;;;566:45426;3685:35;566:45426;;3685:35;;566:45426;;3685:35;;566:45426;3685:35;;;566:45426;3685:35;;;;566:45426;;;;;;3685:35;;;;;566:45426;;3685:35;;;;566:45426;3685:35;;;;;566:45426;;3685:35;;;;;;566:45426;;3685:35;;566:45426;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3685:35;566:45426;;;;;;;;;;;;;;;;;;;;;;;;;3685:35;566:45426;;;;;;;;3685:35;-1:-1:-1;566:45426:31;;;;;-1:-1:-1;566:45426:31;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;566:45426:31;;;;;;:::o;:::-;45691:25;566:45426;;;;;;;;45691:25;-1:-1:-1;566:45426:31;;;;;-1:-1:-1;566:45426:31;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2515:1148:27:-;566:45426:31;;2933:43:27;;;;;2950:10;;566:45426:31;;;;2970:4:27;566:45426:31;;;;;;2933:43:27;;;;;;:::i;:::-;566:45426:31;2923:54:27;;1176:39;4397:59;566:45426:31;;-1:-1:-1;;;3499:66:27;;;;;566:45426:31;;;;-1:-1:-1;1302:1:27;;;566:45426:31;;;;;1302:1:27;;566:45426:31;;-1:-1:-1;;;;;566:45426:31;3499:66:27;;;;;;;-1:-1:-1;3499:66:27;;;2515:1148;3584:21;;1302:1;;2515:1148;:::o;1302:1::-;;566:45426:31;;;;;;;1302:1:27;;3499:66;1302:1;;;;;;;;;;;;;-1:-1:-1;;;1302:1:27;;;;;3499:66;;;;;;;;;;;;;;;:::i;:::-;;;1302:1;;;;;;3499:66;;;1302:1;566:45426:31;;3499:66:27;;;;;566:45426:31;;;;:::o;:::-;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;2575:307:15;1899:1;2702:7;566:45426:31;2702:18:15;2698:86;;1899:1;2702:7;566:45426:31;2575:307:15:o;2698:86::-;566:45426:31;;-1:-1:-1;;;2743:30:15;;;;;530:343:25;-1:-1:-1;;;;;566:45426:31;628:19:25;566:45426:31;;672:9:25;;;530:343;:::o;624:218::-;702:10;698:144;;624:218;530:343;:::o;698:144::-;566:45426:31;;-1:-1:-1;;;1745:53:8;;;;796:10:25;1745:53:8;;;566:45426:31;816:4:25;566:45426:31;;;;;;;;;;;1745:53:8;;566:45426:31;;;;;;;;;;;;;1745:53:8;566:45426:31;;;1745:53:8;:::i;:::-;530:343:25;:::o;8370:720:8:-;;-1:-1:-1;8507:421:8;8370:720;8507:421;;;;;;;;;;;;-1:-1:-1;8507:421:8;;8942:15;;-1:-1:-1;;;;;;566:45426:31;;8960:26:8;:31;8942:68;8938:146;;8370:720;:::o;8938:146::-;566:45426:31;;-1:-1:-1;;;9033:40:8;;-1:-1:-1;;;;;566:45426:31;;;9033:40:8;;;566:45426:31;;;9033:40:8;8942:68;9009:1;8994:16;;8942:68;;782:212:31;1830:3;566:45426;;1859:6:19;;;566:45426:31;;782:212;:::o;:::-;;566:45426;;1859:6:19;;;566:45426:31;;782:212;:::o;1000:215::-;;566:45426;;2218:6:19;;;566:45426:31;;1000:215;:::o;566:45426::-;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;;:::o;:::-;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;;:::o;:::-;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;1084:334:25;-1:-1:-1;;;;;566:45426:31;;;;1084:334:25;566:45426:31;1180:19:25;566:45426:31;;1215:26:25;1197:1;1215:26;;;;1176:189;1197:1;566:45426:31;;;;;;;;1215:26:25;;;;;1380:30;1176:189;566:45426:31;1176:189:25;;566:45426:31;;;;;;1380:30:25;;1084:334::o;1215:26::-;-1:-1:-1;1215:26:25;;;1176:189;566:45426:31;;-1:-1:-1;;;566:45426:31;1328:43:8;;;;;;;566:45426:31;;;-1:-1:-1;;;;;566:45426:31;1328:43:8;;;566:45426:31;;;;;;;;1328:43:8;;1380:30:25;;566:45426:31;;;;1328:43:8;;;566:45426:31;;1328:43:8;:::i;:::-;;;:::i;:::-;1176:189:25;;1221:218:31;1723:4;566:45426;;;;2570:213:19;;;;;;;;34863:71:20;566:45426:31;;1221:218;:::o;566:45426::-;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;1221:218;1830:3;566:45426;;;;2570:213:19;;;;;;;;34863:71:20;566:45426:31;;1221:218;:::o;:::-;566:45426;;;2570:213:19;;;;;;;;34863:71:20;566:45426:31;;1221:218;:::o;1445:212::-;3155:5:19;;566:45426:31;;3174:152:19;1445:212:31;:::o;566:45426::-;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;;;;;:::o;:::-;;;-1:-1:-1;;;566:45426:31;;;;;;;;;;;1302:1:27;566:45426:31;1302:1:27;;;566:45426:31;;;;37802:342;;1830:3;37980:25;38117:20;37802:342;37980:25;;:::i;:::-;3174:152:19;38032:5:31;;;38029:72;;37802:342;38117:20;;;:::i;38029:72::-;38068:10;566:45426;38086:3;;566:45426;-1:-1:-1;;;;;566:45426:31;38086:3;:::i;:::-;38029:72;;;;566:45426;;;;;;;;;:::o;:::-;;;38503:1;566:45426;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2273:15;566:45426;;;2273:15;;:::i;:::-;566:45426;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;1302:1:27;;566:45426:31;;;;;;;;;;38150:537;566:45426;;;;;;;;;;;;;;;;;38272:19;566:45426;;;;;;;;38272:19;:::i;:::-;566:45426;;;;2273:15;;;;:::i;:::-;566:45426;;;;;38522:16;566:45426;;;;;;;;38272:13;38470:14;;566:45426;-1:-1:-1;;;;;566:45426:31;;;38470:14;;566:45426;;38444:42;;;:::i;:::-;2273:15;38522:16;566:45426;;38496:44;;;:::i;:::-;2273:15;38574:6;566:45426;;;;;1302:1:27;;;;;;38574:24:31;;566:45426;;;38574:24;;:6;:24;;566:45426;;1302:1:27;;;;;;566:45426:31;;-1:-1:-1;566:45426:31;;;;;;;38574:24;;;;;;;-1:-1:-1;38574:24:31;;;;;;;;;;-1:-1:-1;38574:24:31;;;566:45426;-1:-1:-1;566:45426:31;;;;;;;;;;;;;;;38670:9;566:45426;;38660:9;;;:::i;:::-;2273:15;;;38670:9;:::i;:::-;2273:15;38659:21;;;2273:15;38150:537;:::o;38574:24::-;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;566:45426;;1302:1:27;-1:-1:-1;1302:1:27;;;;;566:45426:31;;;;;;;-1:-1:-1;566:45426:31;;;;;;;;;;;;41118:299;;;;;;41285:1;41275:11;;;;40148:39;41285:1;566:45426;40148:39;;;;;;:::i;:::-;566:45426;;;1302:1:27;;;;;;;;40224:37:31;;;;;566:45426;;;;;;;;;;;:::i;:::-;40224:37;566:45426;-1:-1:-1;;;;;566:45426:31;;40224:37;;;;;;40278:10;40224:37;41285:1;40224:37;;;41275:63;40278:10;;:::i;:::-;2273:15;41275:63;;-1:-1:-1;;;;;566:45426:31;;;;42293:18;;;42671:39;;42293:18;;42290:106;;41275:63;566:45426;;;42465:18;;;;;;42462:107;;41275:63;566:45426;;42671:39;;:::i;:::-;42721:24;41285:1;;42756:635;;;42974:15;;;42990:2;42974:15;566:45426;42974:15;;;566:45426;;;41285:1;566:45426;;;;;;1302:1:27;;;;;;;;;42907:86:31;;;;;;566:45426;;;;;;;;;;;:::i;:::-;42968:4;;566:45426;;;;;;;;42907:86;;;;;;;;;41285:1;42907:86;;;42756:635;42899:94;42756:635;;43424:10;;;:::i;:::-;2273:15;566:45426;;-1:-1:-1;;566:45426:31;;2273:15;566:45426;;;;;;;;43405:56;43435:25;;566:45426;43435:25;;;:::i;:::-;2273:15;566:45426;;;;;;;;;43405:56;566:45426;;;;;;;;;;43478:25;;;:::i;:::-;2273:15;41118:299;:::o;566:45426::-;;;;41285:1;566:45426;;;;;41285:1;566:45426;42907:86;;;;;;;;;;;;:::i;:::-;;;;42756:635;43010:381;;;43236:15;43252:2;43236:15;566:45426;43236:15;;566:45426;;;43176:79;566:45426;;41285:1;566:45426;;;;1302:1:27;;;;;;;;;;43176:79:31;;43230:4;43176:79;;;;;:::i;:::-;;;;;;;;;;41285:1;43176:79;;;43010:381;43168:87;43010:381;42756:635;;43176:79;;;;;;;;;;;;:::i;:::-;;;;43010:381;43361:15;43377:2;43361:15;566:45426;43361:15;;;566:45426;;;;;;;;43295:85;566:45426;;;1302:1:27;;;;;;;;;;43295:85:31;;43354:4;43295:85;;;;;:::i;:::-;;;;;;;;;;;;;;43010:381;43285:95;;43010:381;42756:635;;43295:85;;;;;;;;;;;;;:::i;:::-;;;;;;566:45426;;1302:1:27;;;;;;;;566:45426:31;-1:-1:-1;;;566:45426:31;;;;;;;;42462:107;42539:17;;;;:::i;:::-;42462:107;;42290:106;42367:17;;;;:::i;:::-;42290:106;;40224:37;;;;;;;;;;;;:::i;:::-;;;;41275:63;;;;;;566:45426;;;;1302:1:27;;;;;;;;566:45426:31;;;-1:-1:-1;566:45426:31;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;566:45426:31;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;566:45426:31;;;;;;;:::o;39101:361::-;566:45426;;;39101:361;;;-1:-1:-1;;;;;566:45426:31;;;2273:15;566:45426;2273:15;:::i;:::-;39319:1;566:45426;;;;;;;;;;39298:23;39341:47;566:45426;;;39341:20;:47;566:45426;;;-1:-1:-1;566:45426:31;;-1:-1:-1;;;39364:15:31;;;566:45426;39364:15;566:45426;39364:15;;;;;;;;-1:-1:-1;39364:15:31;;;39341:47;;;39331:57;;;;:::i;:::-;566:45426;;2273:15;;566:45426;;;;;;;;39431:15;566:45426;;;1302:1:27;;;;;;;39431:15:31;;;;;;;;;;;39398:57;39431:15;;-1:-1:-1;39431:15:31;;;39408:47;;;;39398:57;:::i;:::-;566:45426;;2273:15;;39101:361::o;39431:15::-;;;;;;-1:-1:-1;39431:15:31;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;566:45426;1302:1:27;-1:-1:-1;1302:1:27;;;;;39408:47:31;;;;39398:57;39408:47;;;39398:57;:::i;39364:15::-;;;;;;;;;;;;;;:::i;:::-;;;;;566:45426;;1302:1:27;-1:-1:-1;1302:1:27;;;;;39341:47:31;;;566:45426;;;;;;;;;;;;41285:1;566:45426;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;566:45426:31;;;;;;;;;:::o;44351:275::-;566:45426;;-1:-1:-1;;;44481:45:31;;;;;;;-1:-1:-1;;;;;566:45426:31;;;44481:45;;;566:45426;-1:-1:-1;;566:45426:31;;;;;;;;44481:45;;566:45426;;44481:45;566:45426;;;;;;;;;;;;;;;44470:57;;;;;;;;;;;566:45426;;;;;;;;;;;;;2273:15;566:45426;;;-1:-1:-1;;566:45426:31;;;;2273:15;:::i;:::-;566:45426;;;;;;;;;;44545:57;;;566:45426;;;;;44351:275;:::o;566:45426::-;;;;;;;;;;;;;;;;44481:45;566:45426;;1302:1:27;-1:-1:-1;;;566:45426:31;1302:1:27;;566:45426:31;;44545:57;566:45426;;44557:16;;;-1:-1:-1;44557:16:31;;:44;;;;44545:57;;;;;;;44557:44;44577:24;;-1:-1:-1;44577:24:31;;;;;;;:::i;:::-;44557:44;;;;;566:45426;-1:-1:-1;;;566:45426:31;;;;;44481:45;566:45426;;;;;;;"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "3084000",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "PoolLength()": "2646",
            "borrowFee()": "3042",
            "checkoutFinish(uint256)": "4805",
            "checkoutLiquidation(uint256)": "infinite",
            "checkoutSettle(uint256)": "4469",
            "claimBorrow(uint256)": "infinite",
            "claimLend(uint256)": "infinite",
            "createPool(uint256,uint256,uint256,uint256,uint256,address,address,address,address,uint256)": "infinite",
            "depositBorrow(uint256,uint256)": "infinite",
            "depositLend(uint256,uint256)": "infinite",
            "emergencyBorrowWithdrawal(uint256)": "infinite",
            "emergencyLendWithdrawal(uint256)": "infinite",
            "feeAddress()": "2450",
            "finish(uint256)": "infinite",
            "getMultiSignatureAddress()": "2604",
            "getPoolState(uint256)": "5105",
            "getUnderlyingPriceView(uint256)": "infinite",
            "globalPaused()": "2548",
            "lendFee()": "2492",
            "liquidate(uint256)": "infinite",
            "minAmount()": "2800",
            "multiSignaturePosition()": "719",
            "oracle()": "2692",
            "poolBaseInfos(uint256)": "30052",
            "poolDataInfos(uint256)": "17730",
            "refundBorrow(uint256)": "infinite",
            "refundLend(uint256)": "infinite",
            "setFee(uint256,uint256)": "infinite",
            "setFeeAddress(address)": "infinite",
            "setMinAmount(uint256)": "infinite",
            "setPause()": "infinite",
            "setSwapRouter(address)": "infinite",
            "settle(uint256)": "infinite",
            "swapRouter()": "2965",
            "userBorrowInfo(address,uint256)": "6961",
            "userLendInfo(address,uint256)": "7467",
            "withdrawBorrow(uint256,uint256)": "infinite",
            "withdrawLend(uint256,uint256)": "infinite"
          },
          "internal": {
            "_getAmountIn(address,address,address,uint256)": "infinite",
            "_getSwapPath(address,address,address)": "infinite",
            "_safeApprove(address,address,uint256)": "infinite",
            "_sellExactAmount(address,address,address,uint256)": "infinite",
            "_swap(address,address,address,uint256)": "infinite",
            "redeemFees(uint256,address,uint256)": "infinite",
            "safeAdd(uint256,uint256)": "infinite",
            "safeDiv(uint256,uint256)": "infinite",
            "safeMul(uint256,uint256)": "infinite",
            "safeSub(uint256,uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "PoolLength()": "6de6ff3a",
          "borrowFee()": "e626648a",
          "checkoutFinish(uint256)": "6abd7f29",
          "checkoutLiquidation(uint256)": "62faecf4",
          "checkoutSettle(uint256)": "14c090cc",
          "claimBorrow(uint256)": "3ab4a445",
          "claimLend(uint256)": "6c42fed2",
          "createPool(uint256,uint256,uint256,uint256,uint256,address,address,address,address,uint256)": "459b911c",
          "depositBorrow(uint256,uint256)": "16f941b5",
          "depositLend(uint256,uint256)": "90590da0",
          "emergencyBorrowWithdrawal(uint256)": "e271fa0c",
          "emergencyLendWithdrawal(uint256)": "bf38b8f6",
          "feeAddress()": "41275358",
          "finish(uint256)": "d353a1cb",
          "getMultiSignatureAddress()": "638c7e17",
          "getPoolState(uint256)": "b1597517",
          "getUnderlyingPriceView(uint256)": "c9333756",
          "globalPaused()": "61a552dc",
          "lendFee()": "4aea0aec",
          "liquidate(uint256)": "415f1240",
          "minAmount()": "9b2cb5d8",
          "multiSignaturePosition()": "9d71488e",
          "oracle()": "7dc0d1d0",
          "poolBaseInfos(uint256)": "0d6abfc1",
          "poolDataInfos(uint256)": "981b48a6",
          "refundBorrow(uint256)": "a62ff164",
          "refundLend(uint256)": "eec8d506",
          "setFee(uint256,uint256)": "52f7c988",
          "setFeeAddress(address)": "8705fcd4",
          "setMinAmount(uint256)": "897b0637",
          "setPause()": "d431b1ac",
          "setSwapRouter(address)": "41273657",
          "settle(uint256)": "8df82800",
          "swapRouter()": "c31c9c07",
          "userBorrowInfo(address,uint256)": "3c9fadc3",
          "userLendInfo(address,uint256)": "bb176a64",
          "withdrawBorrow(uint256,uint256)": "1e107979",
          "withdrawLend(uint256,uint256)": "38f2aa76"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSignature\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimLend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"DepositBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"DepositLend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyBorrowWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyLendWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recieptor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"RefundBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"RefundLend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newLendFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newBorrowFee\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeAddress\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldMinAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinAmount\",\"type\":\"uint256\"}],\"name\":\"SetMinAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSwapAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapAddress\",\"type\":\"address\"}],\"name\":\"SetSwapRouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldState\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newState\",\"type\":\"uint256\"}],\"name\":\"StateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromCoin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toCoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toValue\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawLend\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"checkoutFinish\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"checkoutLiquidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"checkoutSettle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_martgageRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lendToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_jpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_autoLiquidateThreshold\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"depositBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"depositLend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyBorrowWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyLendWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"finish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultiSignatureAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingPriceView\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSignaturePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IBscPledgeOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolBaseInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"settleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"martgageRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lendToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"enum PledgePool.PoolState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract IDebtToken\",\"name\":\"spCoin\",\"type\":\"address\"},{\"internalType\":\"contract IDebtToken\",\"name\":\"jpCoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoLiquidateThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolDataInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"settleAmountLend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settleAmountBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishAmountLend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishAmountBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationAmountLend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationAmountBorrow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"refundBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"refundLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBorrowInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasNoRefund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasNoClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLendInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasNoRefund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasNoClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jpAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"checkoutLiquidation(uint256)\":{\"details\":\"\\u68c0\\u67e5\\u6e05\\u7b97\\u6761\\u4ef6,\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\"}},\"claimBorrow(uint256)\":{\"details\":\"\\u501f\\u6b3e\\u4eba\\u63a5\\u6536 sp_token \\u548c\\u8d37\\u6b3e\\u8d44\\u91d1\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u72b6\\u6001 | \\u51fd\\u6570           | \\u72b6\\u6001\\u8981\\u6c42     | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b   | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f    | `claimBorrow` | EXECUTION/FINISH/LIQUIDATION | \\u7ed3\\u7b97\\u540e   | \\u9886\\u53d6\\u8d37\\u6b3e  | \\u94f8\\u9020 JP \\u4ee3\\u5e01+\\u8f6c\\u51fa\\u501f\\u6b3e| \\u83b7\\u5f97\\u501f\\u6b3e\\u8d44\\u91d1  \"}},\"claimLend(uint256)\":{\"details\":\"\\u5b58\\u6b3e\\u4eba\\u63a5\\u6536 sp_token,\\u4e3b\\u8981\\u529f\\u80fd\\u662f\\u8ba9\\u5b58\\u6b3e\\u4eba\\u9886\\u53d6 sp_token\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u7d22\\u5f15  | \\u51fd\\u6570 | \\u89d2\\u8272 | \\u64cd\\u4f5c | \\u76ee\\u7684 | | claimLend | \\u51fa\\u501f\\u4eba | \\u83b7\\u5f97SP\\u4ee3\\u5e01 | \\u83b7\\u5f97\\u8d44\\u91d1\\u51ed\\u8bc1 |\"}},\"createPool(uint256,uint256,uint256,uint256,uint256,address,address,address,address,uint256)\":{\"details\":\"\\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684\\u501f\\u8d37\\u6c60\\u3002\\u51fd\\u6570\\u63a5\\u6536\\u4e00\\u7cfb\\u5217\\u53c2\\u6570\\uff0c \\u5305\\u62ec\\u7ed3\\u7b97\\u65f6\\u95f4\\u3001\\u7ed3\\u675f\\u65f6\\u95f4\\u3001\\u5229\\u7387\\u3001\\u6700\\u5927\\u4f9b\\u5e94\\u91cf\\u3001\\u62b5\\u62bc\\u7387\\u3001\\u5b58\\u5165\\u4ee3\\u5e01\\u3001\\u501f\\u51fa\\u4ee3\\u5e01\\u3001SP\\u4ee3\\u5e01\\u3001JP\\u4ee3\\u5e01\\u548c\\u81ea\\u52a8\\u6e05\\u7b97\\u9608\\u503c\\u3002  Can only be called by the owner.\"},\"depositBorrow(uint256,uint256)\":{\"details\":\"\\u501f\\u6b3e\\u4eba\\u8d28\\u62bc\\u64cd\\u4f5c\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u5b50\\u7d22\\u5f15\",\"_stakeAmount\":\"\\u662f\\u7528\\u6237\\u8d28\\u62bc\\u7684\\u6570\\u91cf\"}},\"depositLend(uint256,uint256)\":{\"details\":\"\\u51fa\\u501f\\u4eba\\u6267\\u884c\\u5b58\\u6b3e\\u64cd\\u4f5c\\uff0c\\u5c06\\u8d44\\u91d1\\u5b58\\u5165\\u501f\\u8d37\\u6c60\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u7d22\\u5f15 | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f | | `depositLend` | MATCH | \\u7ed3\\u7b97\\u524d | \\u5b58\\u5165\\u8d44\\u91d1 | \\u8f6c\\u5165\\u6c60\\u4e2d | \\u63d0\\u4f9b\\u501f\\u8d37\\u8d44\\u91d1 |\",\"_stakeAmount\":\"\\u662f\\u7528\\u6237\\u7684\\u8d28\\u62bc\\u91d1\\u989d\"}},\"emergencyBorrowWithdrawal(uint256)\":{\"details\":\"\\u7d27\\u6025\\u501f\\u6b3e\\u63d0\\u53d6\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\"}},\"emergencyLendWithdrawal(uint256)\":{\"details\":\"\\u51fa\\u501f\\u4eba\\u7d27\\u6025\\u63d0\\u53d6\\u5b58\\u6b3e\\uff0c\\u7528\\u4e8e\\u5904\\u7406\\u6c60\\u5f02\\u5e38\\u60c5\\u51b5\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u7d22\\u5f15\"}},\"finish(uint256)\":{\"details\":\"\\u5b8c\\u6210\\u4e00\\u4e2a\\u501f\\u8d37\\u6c60\\u7684\\u64cd\\u4f5c\\uff0c\\u5305\\u62ec\\u8ba1\\u7b97\\u5229\\u606f\\u3001\\u6267\\u884c\\u4ea4\\u6362\\u64cd\\u4f5c\\u3001\\u8d4e\\u56de\\u8d39\\u7528\\u548c\\u66f4\\u65b0\\u6c60\\u5b50\\u72b6\\u6001\\u7b49\\u6b65\\u9aa4\\u3002\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\"}},\"liquidate(uint256)\":{\"details\":\"\\u6e05\\u7b97\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\"}},\"refundBorrow(uint256)\":{\"details\":\"\\u9000\\u8fd8\\u7ed9\\u501f\\u6b3e\\u4eba\\u7684\\u8d85\\u989d\\u62b5\\u62bc\\u54c1\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u72b6\\u6001\"}},\"refundLend(uint256)\":{\"details\":\"\\u9000\\u8fd8\\u8fc7\\u91cf\\u5b58\\u6b3e\\u7ed9\\u5b58\\u6b3e\\u4eba\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u7d22\\u5f15\"}},\"setFeeAddress(address)\":{\"details\":\"Set up the address to receive the handling fee\"},\"withdrawBorrow(uint256,uint256)\":{\"details\":\"\\u501f\\u6b3e\\u4eba\\u8d4e\\u56de\\u8d28\\u62bc\",\"params\":{\"_jpAmount\":\"\\u662f\\u7528\\u6237\\u9500\\u6bc1JPtoken\\u7684\\u6570\\u91cf\",\"_pid\":\"\\u662f\\u6c60\\u72b6\\u6001\"}},\"withdrawLend(uint256,uint256)\":{\"details\":\"\\u5b58\\u6b3e\\u4eba\\u53d6\\u56de\\u672c\\u91d1\\u548c\\u5229\\u606f\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u7d22\\u5f15\",\"_spAmount\":\"\\u662f\\u9500\\u6bc1\\u7684sp\\u6570\\u91cf | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u63d0\\u53d6\\u91d1\\u989d | \\u662f\\u5426\\u8ba1\\u7b97\\u5229\\u606f | \\u4f7f\\u7528\\u573a\\u666f | | `withdrawLend` | FINISH/LIQUIDATION | \\u6309SP\\u4ee3\\u5e01\\u6bd4\\u4f8b | \\u2705 \\u8ba1\\u7b97\\u5229\\u606f | \\u6b63\\u5e38\\u5230\\u671f\\u63d0\\u53d6\\u6216\\u8005\\u6e05\\u7b97\\u63d0\\u53d6 |\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimBorrow(uint256)\":{\"notice\":\"\\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210\"},\"claimLend(uint256)\":{\"notice\":\"\\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210\"},\"depositLend(uint256,uint256)\":{\"notice\":\"\\u6c60\\u72b6\\u6001\\u5fc5\\u987b\\u4e3aMATCH\"},\"emergencyBorrowWithdrawal(uint256)\":{\"notice\":\"\\u5728\\u6781\\u7aef\\u60c5\\u51b5\\u4e0b\\uff0c\\u603b\\u5b58\\u6b3e\\u4e3a0\\uff0c\\u6216\\u8005\\u603b\\u4fdd\\u8bc1\\u91d1\\u4e3a0\\uff0c \\u5728\\u67d0\\u4e9b\\u6781\\u7aef\\u60c5\\u51b5\\u4e0b\\uff0c\\u5982\\u603b\\u5b58\\u6b3e\\u4e3a0\\u6216\\u603b\\u4fdd\\u8bc1\\u91d1\\u4e3a0\\u65f6\\uff0c\\u501f\\u6b3e\\u8005\\u53ef\\u4ee5\\u8fdb\\u884c\\u7d27\\u6025\\u63d0\\u53d6\\u3002 \\u9996\\u5148\\uff0c\\u4ee3\\u7801\\u4f1a\\u83b7\\u53d6\\u6c60\\u5b50\\u7684\\u57fa\\u672c\\u4fe1\\u606f\\u548c\\u501f\\u6b3e\\u8005\\u7684\\u501f\\u6b3e\\u4fe1\\u606f\\uff0c\\u7136\\u540e\\u68c0\\u67e5\\u501f\\u6b3e\\u4f9b\\u5e94\\u548c\\u501f\\u6b3e\\u8005\\u7684\\u8d28\\u62bc\\u91d1\\u989d\\u662f\\u5426\\u5927\\u4e8e0\\uff0c \\u4ee5\\u53ca\\u501f\\u6b3e\\u8005\\u662f\\u5426\\u5df2\\u7ecf\\u8fdb\\u884c\\u8fc7\\u9000\\u6b3e\\u3002\\u5982\\u679c\\u8fd9\\u4e9b\\u6761\\u4ef6\\u90fd\\u6ee1\\u8db3\\uff0c \\u90a3\\u4e48\\u5c31\\u4f1a\\u6267\\u884c\\u8d4e\\u56de\\u64cd\\u4f5c\\uff0c\\u5e76\\u6807\\u8bb0\\u501f\\u6b3e\\u8005\\u5df2\\u7ecf\\u9000\\u6b3e\\u3002 \\u6700\\u540e\\uff0c\\u89e6\\u53d1\\u4e00\\u4e2a\\u7d27\\u6025\\u501f\\u6b3e\\u63d0\\u53d6\\u7684\\u4e8b\\u4ef6\\u3002\"},\"emergencyLendWithdrawal(uint256)\":{\"notice\":\"\\u6c60\\u72b6\\u6001\\u5fc5\\u987b\\u662f\\u672a\\u5b8c\\u6210  \\u4ec0\\u4e48\\u60c5\\u51b5\\u4e0b\\u4f1a\\u51fa\\u73b0UNDONE\\uff1f 1. **\\u53ea\\u6709\\u5b58\\u6b3e\\u6ca1\\u6709\\u501f\\u6b3e**\\uff1a\\u51fa\\u501f\\u4eba\\u5b58\\u5165\\u8d44\\u91d1\\uff0c\\u4f46\\u6ca1\\u6709\\u501f\\u6b3e\\u4eba\\u8d28\\u62bc\\u62b5\\u62bc\\u54c1 2. **\\u53ea\\u6709\\u501f\\u6b3e\\u6ca1\\u6709\\u5b58\\u6b3e**\\uff1a\\u501f\\u6b3e\\u4eba\\u8d28\\u62bc\\u62b5\\u62bc\\u54c1\\uff0c\\u4f46\\u6ca1\\u6709\\u51fa\\u501f\\u4eba\\u63d0\\u4f9b\\u8d44\\u91d1 3. **\\u6c60\\u521b\\u5efa\\u5931\\u8d25**\\uff1a\\u6c60\\u7684\\u914d\\u7f6e\\u6709\\u95ee\\u9898\\uff0c\\u65e0\\u6cd5\\u6b63\\u5e38\\u8fd0\\u4f5c | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f | | `emergencyLendWithdrawal` | UNDONE | \\u65e0\\u9650\\u5236 | \\u7d27\\u6025\\u9000\\u51fa | \\u8f6c\\u51fa\\u5168\\u90e8\\u5b58\\u6b3e | \\u5f02\\u5e38\\u60c5\\u51b5\\u5b89\\u5168\\u9000\\u51fa |\"},\"refundBorrow(uint256)\":{\"notice\":\"\\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210 | \\u51fd\\u6570           | \\u72b6\\u6001\\u8981\\u6c42     | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b   | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f    | `refundBorrow` | EXECUTION/FINISH/LIQUIDATION | \\u7ed3\\u7b97\\u540e   | \\u9000\\u8fd8\\u8d85\\u989d  | \\u8f6c\\u51fa\\u8d85\\u989d\\u62b5\\u62bc\\u54c1| \\u9000\\u8fd8\\u8d85\\u989d\\u8d28\\u62bc   \"},\"refundLend(uint256)\":{\"notice\":\"\\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210 | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u63d0\\u53d6\\u91d1\\u989d | \\u662f\\u5426\\u8ba1\\u7b97\\u5229\\u606f | \\u4f7f\\u7528\\u573a\\u666f | | `refundLend` | EXECUTION/FINISH/LIQUIDATION | \\u8d85\\u989d\\u90e8\\u5206 | \\u274c \\u4e0d\\u8ba1\\u7b97\\u5229\\u606f | \\u9000\\u8fd8\\u8d85\\u989d\\u5b58\\u6b3e |\"},\"setFeeAddress(address)\":{\"notice\":\"Only allow administrators to operate\"},\"withdrawBorrow(uint256,uint256)\":{\"notice\":\" | \\u51fd\\u6570           | \\u72b6\\u6001\\u8981\\u6c42     | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b   | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f    | `withdrawBorrow` | FINISH/LIQUIDATION | \\u5230\\u671f\\u540e   | \\u8d4e\\u56de\\u62b5\\u62bc\\u54c1  | \\u9500\\u6bc1 JP \\u4ee3\\u5e01+\\u8f6c\\u51fa\\u62b5\\u62bc\\u54c1| \\u53d6\\u56de\\u8d28\\u62bc\\u7684\\u62b5\\u62bc\\u54c1  \"},\"withdrawLend(uint256,uint256)\":{\"notice\":\"\\u6c60\\u7684\\u72b6\\u6001\\u53ef\\u80fd\\u662f\\u5b8c\\u6210\\u6216\\u6e05\\u7b97\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pledage/PledgePool.sol\":\"PledgePool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"contracts/interface/IBscPledgeOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBscPledgeOracle {\\r\\n    function getPrice(address token) external view returns (uint256);\\r\\n\\r\\n    function getPrices(uint256[] calldata assets) external view returns (uint256[] memory);\\r\\n    \\r\\n    function getUnderlyingPrice(uint256 cToken) external view returns (uint256);\\r\\n}\",\"keccak256\":\"0x95da2aeb33e67a6ce127d938364ff6102f22e5ccdbe3a4bb99d4ad3211636872\",\"license\":\"MIT\"},\"contracts/interface/IDebtToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDebtToken {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function mint(address account,uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(address from,uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x84bb3990036c64d6fc57e26c9a8c133761185f9f5b072810cf407553c39dc147\",\"license\":\"MIT\"},\"contracts/interface/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1339b6bc0f4922c7f09285f2344c96c8f584bbeef9e5252e8c1291d6dfcf3276\",\"license\":\"MIT\"},\"contracts/library/SafeTransfer.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract SafeTransfer{\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n    event Redeem(address indexed recieptor,address indexed token,uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice  transfers money to the pool\\r\\n     * @dev function to transfer\\r\\n     * @param token of address\\r\\n     * @param amount of amount\\r\\n     * @return return amount\\r\\n     */\\r\\n    function getPayableAmount(address token,uint256 amount) internal returns (uint256) {\\r\\n        if (token == address(0)){\\r\\n            amount = msg.value;\\r\\n        }else if (amount > 0){\\r\\n            IERC20 oToken = IERC20(token);\\r\\n            oToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev An auxiliary foundation which transter amount stake coins to recieptor.\\r\\n     * @param recieptor account.\\r\\n     * @param token address\\r\\n     * @param amount redeem amount.\\r\\n     */\\r\\n    function _redeem(address payable recieptor,address token,uint256 amount) internal{\\r\\n        if (token == address(0)){\\r\\n            recieptor.transfer(amount);\\r\\n        }else{\\r\\n            IERC20 oToken = IERC20(token);\\r\\n            oToken.safeTransfer(recieptor,amount);\\r\\n        }\\r\\n        emit Redeem(recieptor,token,amount);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xdce5cc0fbb717ff35741cbe2cf3987e56c5a20042857a98e44308a80ec74bfdb\",\"license\":\"MIT\"},\"contracts/multiSignature/multiSignatureClient.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IMultiSignature - \\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u63a5\\u53e3\\r\\n * @dev \\u5b9a\\u4e49\\u4e86\\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u9700\\u8981\\u5b9e\\u73b0\\u7684\\u6838\\u5fc3\\u529f\\u80fd\\u63a5\\u53e3\\r\\n */\\r\\ninterface IMultiSignature {\\r\\n    /**\\r\\n     * @dev \\u83b7\\u53d6\\u6709\\u6548\\u7b7e\\u540d\\u7d22\\u5f15\\r\\n     * @param msghash \\u6d88\\u606f\\u54c8\\u5e0c\\r\\n     * @param lastIndex \\u4e0a\\u6b21\\u68c0\\u67e5\\u7684\\u7d22\\u5f15\\r\\n     * @return uint256 \\u8fd4\\u56de\\u6709\\u6548\\u7684\\u7b7e\\u540d\\u7d22\\u5f15\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u8fbe\\u5230\\u9608\\u503c\\u5219\\u8fd4\\u56de0\\r\\n     */\\r\\n    function getValidSignature(bytes32 msghash, uint256 lastIndex) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title multiSignatureClient - \\u591a\\u7b7e\\u540d\\u5ba2\\u6237\\u7aef\\u5408\\u7ea6\\r\\n * @dev \\u4e3a\\u5176\\u4ed6\\u5408\\u7ea6\\u63d0\\u4f9b\\u591a\\u7b7e\\u540d\\u9a8c\\u8bc1\\u529f\\u80fd\\u7684\\u57fa\\u7840\\u5408\\u7ea6\\r\\n * @notice \\u4efb\\u4f55\\u9700\\u8981\\u591a\\u7b7e\\u540d\\u4fdd\\u62a4\\u7684\\u5408\\u7ea6\\u90fd\\u5e94\\u8be5\\u7ee7\\u627f\\u6b64\\u5408\\u7ea6\\uff0c\\u5e76\\u4f7f\\u7528validCall\\u4fee\\u9970\\u7b26\\r\\n * \\r\\n * === \\u5de5\\u4f5c\\u539f\\u7406 ===\\r\\n * 1. \\u5ba2\\u6237\\u7aef\\u5408\\u7ea6\\u7ee7\\u627f\\u6b64\\u5408\\u7ea6\\uff0c\\u83b7\\u5f97\\u591a\\u7b7e\\u540d\\u9a8c\\u8bc1\\u80fd\\u529b\\r\\n * 2. \\u91cd\\u8981\\u51fd\\u6570\\u4f7f\\u7528validCall\\u4fee\\u9970\\u7b26\\u8fdb\\u884c\\u4fdd\\u62a4\\r\\n * 3. \\u8c03\\u7528\\u65f6\\u4f1a\\u81ea\\u52a8\\u68c0\\u67e5\\u5bf9\\u5e94\\u7684\\u591a\\u7b7e\\u540d\\u7533\\u8bf7\\u662f\\u5426\\u5df2\\u83b7\\u5f97\\u8db3\\u591f\\u7b7e\\u540d\\r\\n * 4. \\u53ea\\u6709\\u901a\\u8fc7\\u591a\\u7b7e\\u540d\\u9a8c\\u8bc1\\u7684\\u8c03\\u7528\\u624d\\u80fd\\u6267\\u884c\\r\\n */\\r\\ncontract multiSignatureClient {\\r\\n    uint256 public constant multiSignaturePosition = uint256(keccak256(\\\"org.multiSignature.storage\\\"));// \\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u5730\\u5740\\u7684\\u5b58\\u50a8\\u4f4d\\u7f6e\\r\\n    uint256 private constant defaultIndex = 0;// \\u9ed8\\u8ba4\\u7d22\\u5f15\\r\\n\\r\\n    /**\\r\\n     * @dev \\u6784\\u9020\\u51fd\\u6570\\r\\n     * @param multiSignature \\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u5730\\u5740\\r\\n     * @notice \\u5c06\\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u5730\\u5740\\u4fdd\\u5b58\\u5230\\u56fa\\u5b9a\\u7684\\u5b58\\u50a8\\u4f4d\\u7f6e\\r\\n     */\\r\\n    constructor(address multiSignature) {\\r\\n        require(multiSignature != address(0), \\\"multiSignatureClient : Multiple signature contract address is zero!\\\");\\r\\n        saveValue(multiSignaturePosition, uint256(uint160(multiSignature)));\\r\\n    }\\r\\n\\r\\n    //\\u4ece\\u5b58\\u50a8\\u4e2d\\u8bfb\\u53d6\\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u5730\\u5740\\r\\n    function getMultiSignatureAddress() public view returns (address){\\r\\n        return address(uint160(getValue(multiSignaturePosition)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u591a\\u7b7e\\u540d\\u9a8c\\u8bc1\\u4fee\\u9970\\u7b26\\r\\n     * @notice \\u4f7f\\u7528\\u6b64\\u4fee\\u9970\\u7b26\\u7684\\u51fd\\u6570\\u53ea\\u6709\\u5728\\u591a\\u7b7e\\u540d\\u9a8c\\u8bc1\\u901a\\u8fc7\\u540e\\u624d\\u80fd\\u6267\\u884c\\r\\n     * @notice \\u8fd9\\u662f\\u6574\\u4e2a\\u591a\\u7b7e\\u540d\\u7cfb\\u7edf\\u7684\\u6838\\u5fc3\\u9a8c\\u8bc1\\u673a\\u5236\\r\\n     */\\r\\n    modifier validCall(){\\r\\n        checkMultiSignature();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u68c0\\u67e5\\u591a\\u7b7e\\u540d\\u9a8c\\u8bc1\\r\\n     * @notice \\u6838\\u5fc3\\u9a8c\\u8bc1\\u903b\\u8f91\\uff1a\\r\\n     * 1. \\u751f\\u6210\\u6d88\\u606f\\u54c8\\u5e0c\\uff08\\u8c03\\u7528\\u8005\\u5730\\u5740 + \\u5f53\\u524d\\u5408\\u7ea6\\u5730\\u5740\\uff09\\r\\n     * 2. \\u5411\\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u67e5\\u8be2\\u8be5\\u54c8\\u5e0c\\u662f\\u5426\\u6709\\u8db3\\u591f\\u7684\\u7b7e\\u540d\\r\\n     * 3. \\u5982\\u679c\\u6ca1\\u6709\\u8db3\\u591f\\u7b7e\\u540d\\uff0c\\u4ea4\\u6613\\u5c06\\u56de\\u6eda\\r\\n     */\\r\\n    function checkMultiSignature() internal view {\\r\\n        uint256 value;\\r\\n        // \\u83b7\\u53d6\\u8c03\\u7528\\u7684\\u4ee5\\u592a\\u5e01\\u503c\\uff08\\u5f53\\u524d\\u672a\\u4f7f\\u7528\\uff0c\\u4e3a\\u672a\\u6765\\u6269\\u5c55\\u9884\\u7559\\uff09\\r\\n        assembly {\\r\\n            value:=callvalue()\\r\\n        }\\r\\n        // \\u751f\\u6210\\u552f\\u4e00\\u7684\\u6d88\\u606f\\u54c8\\u5e0c\\uff1a\\u8c03\\u7528\\u8005\\u5730\\u5740 + \\u76ee\\u6807\\u5408\\u7ea6\\u5730\\u5740\\r\\n        // \\u8fd9\\u786e\\u4fdd\\u4e86\\u6bcf\\u4e2a(\\u8c03\\u7528\\u8005, \\u76ee\\u6807\\u5408\\u7ea6)\\u7ec4\\u5408\\u90fd\\u6709\\u552f\\u4e00\\u7684\\u54c8\\u5e0c\\r\\n        bytes32 msghash = keccak256(abi.encodePacked(msg.sender, address(this)));\\r\\n        // \\u83b7\\u53d6\\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u5730\\u5740\\r\\n        address multiSign=getMultiSignatureAddress();\\r\\n\\r\\n        // \\u67e5\\u8be2\\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\uff0c\\u68c0\\u67e5\\u662f\\u5426\\u6709\\u8db3\\u591f\\u7684\\u7b7e\\u540d\\r\\n        // getValidSignature\\u7684\\u5b9e\\u73b0\\u903b\\u8f91\\uff08\\u5728multiSignature.sol\\u4e2d\\uff09\\uff1a\\r\\n        // 1. \\u904d\\u5386\\u8be5msgHash\\u5bf9\\u5e94\\u7684\\u6240\\u6709\\u7533\\u8bf7\\r\\n        // 2. \\u68c0\\u67e5\\u6bcf\\u4e2a\\u7533\\u8bf7\\u7684\\u7b7e\\u540d\\u6570\\u91cf\\u662f\\u5426 >= threshold\\r\\n        // 3. \\u5982\\u679c\\u627e\\u5230\\u8fbe\\u5230\\u9608\\u503c\\u7684\\u7533\\u8bf7\\uff0c\\u8fd4\\u56de\\u5176\\u7d22\\u5f15+1\\uff08\\u786e\\u4fdd\\u975e\\u96f6\\uff09\\r\\n        // 4. \\u5982\\u679c\\u6ca1\\u6709\\u627e\\u5230\\uff0c\\u8fd4\\u56de0\\r\\n        uint256 newIndex=IMultiSignature(multiSign).getValidSignature(msghash,defaultIndex);\\r\\n        require(newIndex>defaultIndex,\\\"multiSignatureClient : This tx is not aprroved\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u4fdd\\u5b58\\u503c\\u5230\\u6307\\u5b9a\\u5b58\\u50a8\\u4f4d\\u7f6e\\r\\n     * @param position \\u5b58\\u50a8\\u4f4d\\u7f6e\\uff08\\u4f7f\\u7528keccak256\\u751f\\u6210\\u7684\\u552f\\u4e00\\u4f4d\\u7f6e\\uff09\\r\\n     * @param value \\u8981\\u4fdd\\u5b58\\u7684\\u503c\\r\\n     * @notice \\u4f7f\\u7528\\u5185\\u8054\\u6c47\\u7f16\\u76f4\\u63a5\\u64cd\\u4f5c\\u5b58\\u50a8\\uff0c\\u63d0\\u9ad8gas\\u6548\\u7387\\r\\n     */\\r\\n    function saveValue(uint256 position, uint256 value) internal {\\r\\n        assembly {\\r\\n            sstore(position, value)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u4ece\\u6307\\u5b9a\\u5b58\\u50a8\\u4f4d\\u7f6e\\u8bfb\\u53d6\\u503c\\r\\n     * @param position \\u5b58\\u50a8\\u4f4d\\u7f6e\\uff08\\u4f7f\\u7528keccak256\\u751f\\u6210\\u7684\\u552f\\u4e00\\u4f4d\\u7f6e\\uff09\\r\\n     * @return value \\u8bfb\\u53d6\\u7684\\u503c\\r\\n     * @notice \\u4f7f\\u7528\\u5185\\u8054\\u6c47\\u7f16\\u76f4\\u63a5\\u64cd\\u4f5c\\u5b58\\u50a8\\uff0c\\u63d0\\u9ad8gas\\u6548\\u7387\\r\\n     */\\r\\n    function getValue(uint256 position) internal view returns (uint256 value) {\\r\\n        assembly {\\r\\n            value := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x2c55c72f29f3106655ee9ad2b23f08365d6911361961c104d370bc6766b8ff76\",\"license\":\"MIT\"},\"contracts/pledage/PledgePool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../library/SafeTransfer.sol\\\";\\n\\nimport \\\"../interface/IBscPledgeOracle.sol\\\";\\nimport \\\"../interface/IDebtToken.sol\\\";\\nimport \\\"../interface/IUniswapV2Router02.sol\\\";\\nimport \\\"../multiSignature/multiSignatureClient.sol\\\";\\n\\ncontract PledgePool is ReentrancyGuard,multiSignatureClient,SafeTransfer {\\n\\n    using Math for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    // \\u8f85\\u52a9\\u51fd\\u6570\\uff1a\\u5b89\\u5168\\u7684\\u6570\\u5b66\\u8fd0\\u7b97\\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = a.tryAdd(b);\\n        require(success, \\\"SafeMath: addition overflow\\\");\\n        return result;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = a.trySub(b);\\n        require(success, \\\"SafeMath: subtraction overflow\\\");\\n        return result;\\n    }\\n\\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = a.tryMul(b);\\n        require(success, \\\"SafeMath: multiplication overflow\\\");\\n        return result;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = a.tryDiv(b);\\n        require(success, \\\"SafeMath: division overflow\\\");\\n        return result;\\n    }\\n    //default decimals\\n    uint256 constant internal calDecimals=1e18;\\n    //based on the decimals of the commission and interest\\n    uint256 constant internal baseDecimal=1e8;\\n    uint256 public minAmount = 100e18;\\n    //365days\\n    uint256 constant internal baseYear=365 days;\\n\\n    enum PoolState {\\n        MATCH, //\\u5339\\u914d\\u4e2d - \\u7528\\u6237\\u53ef\\u4ee5\\u5b58\\u6b3e\\n        EXECUTION, //\\u6267\\u884c\\u4e2d - \\u501f\\u8d37\\u751f\\u6548\\uff0c\\u8ba1\\u606f\\u5f00\\u59cb\\n        FINISH, //\\u5b8c\\u6210  - \\u6b63\\u5e38\\u5230\\u671f\\u7ed3\\u7b97\\n        LIQUIDATION, //\\u6e05\\u7b97 - \\u89e6\\u53d1\\u98ce\\u9669\\u6e05\\u7b97\\n        UNDONE //\\u672a\\u5b8c\\u6210- \\u5f02\\u5e38\\u72b6\\u6001\\uff0c\\u5141\\u8bb8\\u7d27\\u6025\\u63d0\\u53d6\\n    }\\n    PoolState constant defaultChoice = PoolState.MATCH;\\n    //\\u5168\\u5c40\\u6682\\u505c\\n    bool public globalPaused =false;\\n    //pancake swap router UniSwapV2\\n    address public swapRouter;\\n    //receiving fee address \\n    address public feeAddress;\\n    //oracle address\\n    IBscPledgeOracle public oracle;\\n    //fee\\n    uint256 public lendFee;\\n    uint256 public borrowFee;\\n\\n    struct PoolBaseInfo {\\n        uint256 settleTime; //\\u7ed3\\u7b97\\u65f6\\u95f4  \\u5f00\\u59cb\\u8ba1\\u606f\\u7684\\u65f6\\u95f4\\u70b9\\n        uint256 endTime; //\\u7ed3\\u675f\\u65f6\\u95f4 \\u8d37\\u6b3e\\u7684\\u671f\\u9650\\n        uint256 interestRate; //\\u6c60\\u5b50\\u7684\\u56fa\\u5b9a\\u5229\\u7387 \\u5355\\u4f4d\\u662f1e8 \\u6309\\u5e74\\u7b97\\n        uint256 maxSupply; //\\u6c60\\u5b50\\u6700\\u5927\\u9650\\u989d \\u6bd4\\u5982100\\u4e07 \\u6295\\u8d44\\u4eba\\u6700\\u591a\\u5f80\\u91cc\\u9762\\u653e100\\u4e07\\u8d44\\u91d1\\n        uint256 lendSupply; //\\u524d\\u51fa\\u501f\\u8d44\\u91d1\\u603b\\u91cf \\u51fa\\u501f\\u4eba\\u5b58\\u5165\\u7684\\u8d44\\u91d1\\u603b\\u548c\\n        uint256 borrowSupply; //\\u5f53\\u524d\\u5b9e\\u9645\\u501f\\u51fa\\u7684\\u62b5\\u62bc\\u65b9\\u4ee3\\u5e01\\u6570\\u91cf\\n        uint256 martgageRate; //\\u6c60\\u7684\\u62b5\\u62bc\\u7387\\uff0c\\u5355\\u4f4d\\u662f1e8\\n        address lendToken; //\\u501f\\u6b3e\\u65b9\\u501f\\u51fa\\u4ee3\\u5e01\\u5730\\u5740\\uff08\\u6bd4\\u5982BUSD \\u7a33\\u5b9a\\u5e01\\uff09\\n        address borrowToken; //\\u501f\\u6b3e\\u65b9\\u62b5\\u62bc\\u4ee3\\u5e01\\u5730\\u5740\\uff08\\u6bd4\\u5982BTC \\u62b5\\u62bc\\u5e01\\uff09\\n        PoolState state; //\\u6c60\\u5b50\\u72b6\\u6001 \\\"MATCH\\\" \\\"EXECUTION\\\" \\\"FINISH\\\" \\\"LIQUIDATION\\\" \\\"UNDONE\\\"\\n        IDebtToken spCoin; //sp_token\\u7684ERC20 \\u5730\\u5740 \\u6bd4\\u5982\\uff08spBUSD_1..\\uff09\\u4f9b\\u5e94\\u65b9\\u51ed\\u8bc1\\n        IDebtToken jpCoin; //jp_token\\u7684ERC20 \\u5730\\u5740 \\u6bd4\\u5982\\uff08jpBTC_1\\uff09  \\u62b5\\u62bc\\u51ed\\u8bc1\\n        uint256 autoLiquidateThreshold; //\\u81ea\\u52a8\\u6e05\\u7b97\\u9608\\u503c\\n    }\\n\\n    //total pool base info\\n    PoolBaseInfo[] public poolBaseInfos;\\n\\n    //\\u6bcf\\u4e2a\\u6c60\\u7684\\u6570\\u636e\\u4fe1\\u606f\\n    struct PoolDataInfo {\\n        uint256 settleAmountLend;       // \\u7ed3\\u7b97\\u65f6\\u7684\\u5b9e\\u9645\\u51fa\\u501f\\u91d1\\u989d\\n        uint256 settleAmountBorrow;     // \\u7ed3\\u7b97\\u65f6\\u7684\\u5b9e\\u9645\\u501f\\u6b3e\\u91d1\\u989d\\n        uint256 finishAmountLend;       // \\u5b8c\\u6210\\u65f6\\u7684\\u5b9e\\u9645\\u51fa\\u501f\\u91d1\\u989d\\n        uint256 finishAmountBorrow;     // \\u5b8c\\u6210\\u65f6\\u7684\\u5b9e\\u9645\\u501f\\u6b3e\\u91d1\\u989d\\n        uint256 liquidationAmountLend;   // \\u6e05\\u7b97\\u65f6\\u7684\\u5b9e\\u9645\\u51fa\\u501f\\u91d1\\u989d\\n        uint256 liquidationAmountBorrow; // \\u6e05\\u7b97\\u65f6\\u7684\\u5b9e\\u9645\\u501f\\u6b3e\\u91d1\\u989d\\n    }\\n\\n    //total pool data info\\n    PoolDataInfo[] public poolDataInfos;\\n\\n    struct BorrowInfo {\\n        uint256 stakeAmount;        // \\u7528\\u6237\\u8d28\\u62bc\\u7684\\u62b5\\u62bc\\u54c1\\u91d1\\u989d\\uff08\\u5982BTC\\u6570\\u91cf\\uff09\\n        uint256 refundAmount;       // \\u8d85\\u989d\\u8d28\\u62bc\\u7684\\u9000\\u6b3e\\u91d1\\u989d\\n        bool hasNoRefund;             // \\u662f\\u5426\\u5df2\\u9000\\u8fd8\\u8d85\\u989d\\u8d28\\u62bc\\uff1afalse=\\u672a\\u9000\\u6b3e\\uff0ctrue=\\u5df2\\u9000\\u6b3e\\n        bool hasNoClaim;              // \\u662f\\u5426\\u5df2\\u8ba4\\u9886JP\\u4ee3\\u5e01\\uff1afalse=\\u672a\\u8ba4\\u9886\\uff0ctrue=\\u5df2\\u8ba4\\u9886\\n    }\\n\\n    //  {user.address : {pool.index : user.borrowInfo}}\\n    mapping(address =>mapping(uint256 => BorrowInfo)) public userBorrowInfo;\\n\\n    // \\u501f\\u6b3e\\u7528\\u6237\\u4fe1\\u606f\\n    struct LendInfo {\\n        uint256 stakeAmount;          // \\u7528\\u6237\\u5b58\\u5165\\u7684\\u51fa\\u501f\\u8d44\\u91d1\\u91d1\\u989d\\uff08\\u5982USDC\\u6570\\u91cf\\uff09\\n        uint256 refundAmount;         // \\u8d85\\u989d\\u5b58\\u6b3e\\u7684\\u9000\\u6b3e\\u91d1\\u989d\\n        bool hasNoRefund;             // \\u662f\\u5426\\u5df2\\u9000\\u8fd8\\u8d85\\u989d\\u5b58\\u6b3e\\uff1afalse=\\u672a\\u9000\\u6b3e\\uff0ctrue=\\u5df2\\u9000\\u6b3e\\n        bool hasNoClaim;              // \\u662f\\u5426\\u5df2\\u8ba4\\u9886SP\\u4ee3\\u5e01\\uff1afalse=\\u672a\\u8ba4\\u9886\\uff0ctrue=\\u5df2\\u8ba4\\u9886\\n    }\\n\\n    //  {user.address : {pool.index : user.lendInfo}}\\n    mapping(address =>mapping(uint256 => LendInfo)) public userLendInfo;\\n\\n    // \\u4e8b\\u4ef6\\n    // \\u5b58\\u6b3e\\u501f\\u51fa\\u4e8b\\u4ef6\\uff0cfrom\\u662f\\u5b58\\u6b3e\\u51fa\\u501f\\u8005\\u5730\\u5740\\uff0ctoken\\u662f\\u5b58\\u5165\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\uff0camount\\u662f\\u501f\\u51fa\\u7684\\u6570\\u91cf\\uff0cmintAmount\\u662f\\u751f\\u6210\\u7684\\u6570\\u91cf\\n    event DepositLend(address indexed from,address indexed token,uint256 amount,uint256 mintAmount);\\n    // \\u51fa\\u501f\\u9000\\u8fd8\\u8d85\\u989d\\u5b58\\u6b3e\\u4e8b\\u4ef6\\uff0cfrom\\u662f\\u5b58\\u6b3e\\u51fa\\u501f\\u8005\\u5730\\u5740\\uff0ctoken\\u662f\\u5b58\\u5165\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\uff0crefund\\u662f\\u9000\\u6b3e\\u7684\\u6570\\u91cf\\n    event RefundLend(address indexed from,address indexed token,uint256 refund);\\n    // \\u51fa\\u501f\\u9886\\u53d6SP\\u4ee3\\u5e01\\u4e8b\\u4ef6\\uff0cfrom\\u662f\\u9886\\u53d6\\u8005\\u5730\\u5740\\uff0ctoken\\u662f\\u5b58\\u5165\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\uff0camount\\u9886\\u53d6\\u7684SP\\u4ee3\\u5e01\\u6570\\u91cf\\n    event ClaimLend(address indexed from,address indexed token,uint256 amount);\\n    // \\u51fa\\u501f\\u65b9\\u63d0\\u53d6\\u5b58\\u6b3e\\u4e8b\\u4ef6\\uff0cfrom\\u662f\\u63d0\\u53d6\\u8005\\u5730\\u5740\\uff0ctoken\\u662f\\u63d0\\u53d6\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\uff0camount\\u662f\\u63d0\\u53d6\\u7684\\u6570\\u91cf\\uff0cburnAmount\\u662f\\u9500\\u6bc1SP_coin\\u7684\\u6570\\u91cf\\n    event WithdrawLend(address indexed from,address indexed token,uint256 amount,uint256 burnAmount);\\n    // \\u51fa\\u501f\\u4eba\\u7d27\\u6025\\u63d0\\u53d6\\u5b58\\u6b3e\\u4e8b\\u4ef6\\uff0cfrom\\u662f\\u63d0\\u53d6\\u8005\\u5730\\u5740\\uff0ctoken\\u662f\\u63d0\\u53d6\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\uff0camount\\u662f\\u63d0\\u53d6\\u7684\\u6570\\u91cf\\n    event EmergencyLendWithdrawal(address indexed from,address indexed token,uint256 amount);\\n\\n    //---------------------------------------------\\n    // \\u501f\\u6b3e\\u65b9\\u5b58\\u6b3e\\u4e8b\\u4ef6\\n    event DepositBorrow(address indexed from,address indexed token,uint256 amount,uint256 mintAmount);\\n    event RefundBorrow(address indexed from,address indexed token,uint256 refund);\\n    event ClaimBorrow(address indexed from, address indexed token, uint256 amount); \\n    // \\u63d0\\u53d6\\u501f\\u5165\\u4e8b\\u4ef6\\uff0cfrom\\u662f\\u63d0\\u53d6\\u8005\\u5730\\u5740\\uff0ctoken\\u662f\\u63d0\\u53d6\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\uff0camount\\u662f\\u63d0\\u53d6\\u7684\\u6570\\u91cf\\uff0cburnAmount\\u662f\\u9500\\u6bc1\\u7684\\u6570\\u91cf\\n    event WithdrawBorrow(address indexed from,address indexed token,uint256 amount,uint256 burnAmount); \\n    event EmergencyBorrowWithdrawal(address indexed from, address indexed token, uint256 amount); \\n\\n    // \\u72b6\\u6001\\u6539\\u53d8\\u4e8b\\u4ef6\\uff0c_pid\\u662f\\u6c60\\u7d22\\u5f15\\uff0coldState\\u662f\\u65e7\\u72b6\\u6001\\uff0cnewState\\u662f\\u65b0\\u72b6\\u6001\\n    event StateChange(uint256 indexed _pid, uint256 indexed oldState, uint256 indexed newState);\\n    // \\u8bbe\\u7f6e\\u8d39\\u7528\\u4e8b\\u4ef6\\uff0cnewLendFee\\u662f\\u65b0\\u7684\\u501f\\u51fa\\u8d39\\u7528\\uff0cnewBorrowFee\\u662f\\u65b0\\u7684\\u501f\\u5165\\u8d39\\u7528\\n    event SetFee(uint256 indexed newLendFee, uint256 indexed newBorrowFee);\\n    // \\u4ea4\\u6362\\u4e8b\\u4ef6\\uff0cfromCoin\\u662f\\u4ea4\\u6362\\u524d\\u7684\\u5e01\\u79cd\\u5730\\u5740\\uff0ctoCoin\\u662f\\u4ea4\\u6362\\u540e\\u7684\\u5e01\\u79cd\\u5730\\u5740\\uff0cfromValue\\u662f\\u4ea4\\u6362\\u524d\\u7684\\u6570\\u91cf\\uff0ctoValue\\u662f\\u4ea4\\u6362\\u540e\\u7684\\u6570\\u91cf\\n    event Swap(address indexed fromCoin,address indexed toCoin,uint256 fromValue,uint256 toValue);\\n    event SetSwapRouterAddress(address indexed oldSwapAddress, address indexed newSwapAddress); \\n    event SetFeeAddress(address indexed oldFeeAddress, address indexed newFeeAddress);\\n    event SetMinAmount(uint256 indexed oldMinAmount, uint256 indexed newMinAmount);\\n\\n    constructor(\\n        address _oracle,\\n        address _swapRouter,\\n        address payable _feeAddress, \\n        address _multiSignature)\\n    multiSignatureClient(_multiSignature) {\\n        require(_oracle != address(0),\\\"PledgePool : oracle is zero address\\\");\\n        require(_swapRouter != address(0),\\\"PledgePool : swapRouter is zero address\\\");\\n        require(_feeAddress != address(0),\\\"PledgePool : feeAddress is zero address\\\");\\n        oracle=IBscPledgeOracle(_oracle);\\n        swapRouter=_swapRouter;\\n        feeAddress=_feeAddress;\\n        lendFee=0;\\n        borrowFee=0;\\n    }\\n\\n    function setFee(uint256 _lendFee,uint256 _borrowFee) validCall external {\\n        lendFee=_lendFee;\\n        borrowFee=_borrowFee;\\n        emit SetFee(_lendFee,_borrowFee);\\n    }\\n\\n    function setSwapRouter(address _swapRouter) validCall external {\\n        require(_swapRouter != address(0),\\\"PledgePool : swapRouter is zero address\\\");\\n        emit SetSwapRouterAddress(swapRouter,_swapRouter);\\n        swapRouter=_swapRouter;\\n    }\\n\\n    /**\\n     * @dev Set up the address to receive the handling fee\\n     * @notice Only allow administrators to operate\\n     */\\n    function setFeeAddress(address _feeAddress) validCall external {\\n        require(_feeAddress != address(0),\\\"PledgePool : feeAddress is zero address\\\");\\n        emit SetFeeAddress(feeAddress,_feeAddress);\\n        feeAddress=_feeAddress;\\n    }\\n\\n    function setMinAmount(uint256 _minAmount) validCall external {\\n        require(_minAmount > 0,\\\"PledgePool : minAmount is zero\\\");\\n        emit SetMinAmount(minAmount,_minAmount);\\n        minAmount=_minAmount;\\n    }\\n\\n    \\n    function PoolLength() external view returns (uint256) {\\n        return poolBaseInfos.length;\\n    }\\n    /**\\n     * @dev \\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684\\u501f\\u8d37\\u6c60\\u3002\\u51fd\\u6570\\u63a5\\u6536\\u4e00\\u7cfb\\u5217\\u53c2\\u6570\\uff0c\\n     * \\u5305\\u62ec\\u7ed3\\u7b97\\u65f6\\u95f4\\u3001\\u7ed3\\u675f\\u65f6\\u95f4\\u3001\\u5229\\u7387\\u3001\\u6700\\u5927\\u4f9b\\u5e94\\u91cf\\u3001\\u62b5\\u62bc\\u7387\\u3001\\u5b58\\u5165\\u4ee3\\u5e01\\u3001\\u501f\\u51fa\\u4ee3\\u5e01\\u3001SP\\u4ee3\\u5e01\\u3001JP\\u4ee3\\u5e01\\u548c\\u81ea\\u52a8\\u6e05\\u7b97\\u9608\\u503c\\u3002\\n     *  Can only be called by the owner.\\n     */\\n    function createPool(uint256 _settleTime,uint256 _endTime,\\n        uint256 _interestRate,uint256 _maxSupply,uint256 _martgageRate,\\n        address _lendToken,address _borrowToken,address _spToken,\\n        address _jpToken,uint256 _autoLiquidateThreshold) validCall public  {\\n        //\\u9700\\u8981\\u7ed3\\u675f\\u65f6\\u95f4\\u5927\\u4e8e\\u7ed3\\u7b97\\u65f6\\u95f4\\n        require(_endTime > _settleTime,\\\"createPool : endTime must be greater than settleTime\\\");\\n        require(_jpToken != address(0),\\\"createPool : jpToken is zero address\\\");\\n        require(_spToken!= address(0),\\\"createPool : spToken is zero address\\\");\\n\\n        poolBaseInfos.push(PoolBaseInfo({\\n            settleTime: _settleTime,\\n            endTime: _endTime,\\n            interestRate: _interestRate,\\n            maxSupply: _maxSupply,\\n            lendSupply: 0,\\n            borrowSupply: 0,\\n            martgageRate: _martgageRate,\\n            lendToken: _lendToken,\\n            borrowToken: _borrowToken,\\n            state: defaultChoice,\\n            spCoin: IDebtToken(_spToken),\\n            jpCoin: IDebtToken(_jpToken),\\n            autoLiquidateThreshold: _autoLiquidateThreshold\\n        }));\\n        //\\u63a8\\u5165\\u6c60\\u6570\\u636e\\u4fe1\\u606f\\n        poolDataInfos.push(PoolDataInfo({\\n            settleAmountLend: 0,\\n            settleAmountBorrow: 0,\\n            finishAmountLend: 0,\\n            finishAmountBorrow: 0,\\n            liquidationAmountLend: 0,\\n            liquidationAmountBorrow: 0\\n        }));\\n    }\\n\\n    function getPoolState(uint256 _pid) public view returns (uint256){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        return uint256(pool.state);\\n    }\\n\\n    /**\\n     * @dev \\u51fa\\u501f\\u4eba\\u6267\\u884c\\u5b58\\u6b3e\\u64cd\\u4f5c\\uff0c\\u5c06\\u8d44\\u91d1\\u5b58\\u5165\\u501f\\u8d37\\u6c60\\n     * @notice \\u6c60\\u72b6\\u6001\\u5fc5\\u987b\\u4e3aMATCH\\n     * @param _pid \\u662f\\u6c60\\u7d22\\u5f15\\n     * | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f |\\n     * | `depositLend` | MATCH | \\u7ed3\\u7b97\\u524d | \\u5b58\\u5165\\u8d44\\u91d1 | \\u8f6c\\u5165\\u6c60\\u4e2d | \\u63d0\\u4f9b\\u501f\\u8d37\\u8d44\\u91d1 |\\n     * @param _stakeAmount \\u662f\\u7528\\u6237\\u7684\\u8d28\\u62bc\\u91d1\\u989d\\n     */\\n    function depositLend(uint256 _pid,uint256 _stakeAmount) external payable nonReentrant notPause timeBeforeSettle(_pid)\\n        stateMatch(_pid) \\n    {\\n        PoolBaseInfo storage pool =poolBaseInfos[_pid];\\n        LendInfo storage lendInfo = userLendInfo[msg.sender][_pid];\\n        // \\u68c0\\u67e5\\u5b58\\u6b3e\\u91d1\\u989d\\u662f\\u5426\\u8d85\\u8fc7\\u6c60\\u7684\\u5269\\u4f59\\u5bb9\\u91cf\\n        require(_stakeAmount <= safeSub(pool.maxSupply, pool.lendSupply), \\\"depositLend : stakeAmount is greater than maxSupply\\\");\\n        uint256 amount = getPayableAmount(pool.lendToken,_stakeAmount);\\n        require(amount>minAmount, \\\"depositLend: amount less than minimum deposit\\\");\\n\\n        lendInfo.hasNoClaim=false;  // \\u91cd\\u7f6e\\u9886\\u53d6\\u6807\\u5fd7\\uff0c\\u5141\\u8bb8\\u7528\\u6237\\u9886\\u53d6SP\\u4ee3\\u5e01\\n        lendInfo.hasNoRefund=false; // \\u91cd\\u7f6e\\u9000\\u6b3e\\u6807\\u5fd7\\uff0c\\u5141\\u8bb8\\u7528\\u6237\\u7533\\u8bf7\\u9000\\u6b3e\\n        //\\u5904\\u7406\\u8d44\\u91d1\\u72b6\\u6001\\u66f4\\u65b0\\n        if(pool.lendToken == address(0)){\\n            //\\u5982\\u679c\\u662fETH:\\u4f7f\\u7528msg.value \\u76f4\\u63a5\\u66f4\\u65b0\\u4f59\\u989d\\n            lendInfo.stakeAmount = safeAdd(lendInfo.stakeAmount, msg.value);\\n            pool.lendSupply = safeAdd(pool.lendSupply, msg.value);\\n        }else{\\n            //\\u5982\\u679c\\u662fERC20\\u4ee3\\u5e01:\\u4f7f\\u7528SafeERC20.safeTransferFrom \\u4ece\\u7528\\u6237\\u8d26\\u6237\\u8f6c\\u5165\\n            lendInfo.stakeAmount = safeAdd(lendInfo.stakeAmount, amount);\\n            pool.lendSupply = safeAdd(pool.lendSupply, amount);\\n        }\\n        emit DepositLend(msg.sender,pool.lendToken,_stakeAmount,amount);\\n    }\\n\\n    /**\\n     * @dev \\u9000\\u8fd8\\u8fc7\\u91cf\\u5b58\\u6b3e\\u7ed9\\u5b58\\u6b3e\\u4eba\\n     * @notice \\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210\\n     * | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u63d0\\u53d6\\u91d1\\u989d | \\u662f\\u5426\\u8ba1\\u7b97\\u5229\\u606f | \\u4f7f\\u7528\\u573a\\u666f |\\n     * | `refundLend` | EXECUTION/FINISH/LIQUIDATION | \\u8d85\\u989d\\u90e8\\u5206 | \\u274c \\u4e0d\\u8ba1\\u7b97\\u5229\\u606f | \\u9000\\u8fd8\\u8d85\\u989d\\u5b58\\u6b3e |\\n     * @param _pid \\u662f\\u6c60\\u7d22\\u5f15\\n     */\\n    function refundLend(uint256 _pid) external nonReentrant notPause timeAfterSettle(_pid)\\n    stateNotMatchUndone(_pid)\\n    {\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        LendInfo storage lendInfo = userLendInfo[msg.sender][_pid];\\n\\n        require(lendInfo.stakeAmount>0,\\\"refundLend : not pledged\\\"); // \\u9700\\u8981\\u7528\\u6237\\u5df2\\u7ecf\\u8d28\\u62bc\\u4e86\\u4e00\\u5b9a\\u6570\\u91cf\\n        require(safeSub(pool.lendSupply, data.settleAmountLend) > 0, \\\"refundLend : not refund\\\");// \\u9700\\u8981\\u6c60\\u4e2d\\u8fd8\\u6709\\u672a\\u9000\\u8fd8\\u7684\\u91d1\\u989d\\n        require(!lendInfo.hasNoRefund,\\\"refundLend : already refunded\\\");// \\u9700\\u8981\\u7528\\u6237\\u6ca1\\u6709\\u7533\\u8bf7\\u8fc7\\u9000\\u6b3e\\n\\n        //\\u7528\\u6237\\u4efd\\u989d=\\u5f53\\u524d\\u8d28\\u62bc\\u91d1\\u989d/\\u603b\\u91d1\\u989d\\n        uint256 userShare = safeDiv(safeMul(lendInfo.stakeAmount, calDecimals), pool.lendSupply);\\n        // refundAmount = \\u603b\\u9000\\u6b3e\\u91d1\\u989d * \\u7528\\u6237\\u4efd\\u989d\\n        uint256 refundAmount = safeDiv(safeMul(safeSub(pool.lendSupply, data.settleAmountLend), userShare), calDecimals);\\n\\n        lendInfo.refundAmount=refundAmount;\\n        lendInfo.hasNoRefund=true;\\n        // \\u9000\\u8fd8\\u8d44\\u91d1\\n        _redeem(payable(msg.sender),pool.lendToken,refundAmount);\\n        // \\u66f4\\u65b0\\u7528\\u6237\\u4fe1\\u606f\\n        lendInfo.hasNoRefund = true;\\n        lendInfo.refundAmount = safeAdd(refundAmount, lendInfo.refundAmount);\\n        emit RefundLend(msg.sender,pool.lendToken,refundAmount);\\n    }\\n\\n     /**\\n     * @dev \\u5b58\\u6b3e\\u4eba\\u63a5\\u6536 sp_token,\\u4e3b\\u8981\\u529f\\u80fd\\u662f\\u8ba9\\u5b58\\u6b3e\\u4eba\\u9886\\u53d6 sp_token\\n     * @notice \\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210\\n     * @param _pid \\u662f\\u6c60\\u7d22\\u5f15 \\n     * | \\u51fd\\u6570 | \\u89d2\\u8272 | \\u64cd\\u4f5c | \\u76ee\\u7684 |\\n     * | claimLend | \\u51fa\\u501f\\u4eba | \\u83b7\\u5f97SP\\u4ee3\\u5e01 | \\u83b7\\u5f97\\u8d44\\u91d1\\u51ed\\u8bc1 |\\n     */\\n    function claimLend(uint256 _pid) external nonReentrant notPause timeAfterSettle(_pid)\\n    stateNotMatchUndone(_pid)\\n    {\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        LendInfo storage lendInfo = userLendInfo[msg.sender][_pid];\\n        //\\u91d1\\u989d\\u9650\\u5236\\n        require(lendInfo.stakeAmount>0,\\\"claimLend :cannot get sp_token\\\"); //\\u9700\\u8981\\u7528\\u6237\\u7684\\u8d28\\u62bc\\u91d1\\u989d\\u5927\\u4e8e0\\n        require(lendInfo.hasNoClaim==false,\\\"claimLend :already claimed\\\"); //\\u9700\\u8981\\u7528\\u6237\\u6ca1\\u6709\\u9886\\u53d6\\u8fc7sp_token\\n    \\n        //\\u7528\\u6237\\u4efd\\u989d=\\u5f53\\u524d\\u8d28\\u62bc\\u91d1\\u989d/\\u603b\\u91d1\\u989d\\n        uint256 userShare = safeDiv(safeMul(lendInfo.stakeAmount, calDecimals), pool.lendSupply);\\n        uint256 totalSpAmount=data.settleAmountLend;// \\u603b\\u7684Sp\\u91d1\\u989d\\u7b49\\u4e8e\\u501f\\u6b3e\\u7ed3\\u7b97\\u91d1\\u989d\\n        // \\u7528\\u6237 sp \\u91d1\\u989d = totalSpAmount * \\u7528\\u6237\\u4efd\\u989d\\n        uint256 spAmount = safeDiv(safeMul(totalSpAmount, userShare), calDecimals);\\n        pool.spCoin.mint(msg.sender,spAmount);        // \\u94f8\\u9020 sp token \\u7ed9\\u5b58\\u6b3e\\u4eba\\n        lendInfo.hasNoClaim=true; // \\u66f4\\u65b0\\u7528\\u6237\\u4fe1\\u606f\\n        emit ClaimLend(msg.sender, pool.lendToken, spAmount); // \\u89e6\\u53d1\\u9886\\u53d6\\u5b58\\u6b3e\\u4eba\\u9886\\u53d6SP\\u4ee3\\u5e01\\u4e8b\\u4ef6  \\n    }\\n\\n    /**\\n     * @dev \\u5b58\\u6b3e\\u4eba\\u53d6\\u56de\\u672c\\u91d1\\u548c\\u5229\\u606f\\n     * @notice \\u6c60\\u7684\\u72b6\\u6001\\u53ef\\u80fd\\u662f\\u5b8c\\u6210\\u6216\\u6e05\\u7b97\\n     * @param _pid \\u662f\\u6c60\\u7d22\\u5f15\\n     * @param _spAmount \\u662f\\u9500\\u6bc1\\u7684sp\\u6570\\u91cf\\n     * | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u63d0\\u53d6\\u91d1\\u989d | \\u662f\\u5426\\u8ba1\\u7b97\\u5229\\u606f | \\u4f7f\\u7528\\u573a\\u666f |\\n     * | `withdrawLend` | FINISH/LIQUIDATION | \\u6309SP\\u4ee3\\u5e01\\u6bd4\\u4f8b | \\u2705 \\u8ba1\\u7b97\\u5229\\u606f | \\u6b63\\u5e38\\u5230\\u671f\\u63d0\\u53d6\\u6216\\u8005\\u6e05\\u7b97\\u63d0\\u53d6 |\\n     */\\n    function withdrawLend(uint256 _pid,uint256 _spAmount) external nonReentrant notPause\\n    stateFinishLiquidation(_pid)\\n    {\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        require(_spAmount>0,\\\"withdrawLend : spAmount is zero\\\");\\n        //\\u9500\\u6bc1sp_token\\n        pool.spCoin.burn(msg.sender,_spAmount);\\n        uint256 totalSpAmount=data.settleAmountLend;// \\u603b\\u7684Sp\\u91d1\\u989d\\u7b49\\u4e8e\\u51fa\\u501f\\u4eba\\u501f\\u6b3e\\u7ed3\\u7b97\\u91d1\\u989d\\n        // \\u7528\\u6237 sp \\u91d1\\u989d = totalSpAmount * \\u7528\\u6237\\u4efd\\u989d\\n        uint256 spShare = safeDiv(safeMul(_spAmount, calDecimals), totalSpAmount);\\n        //\\u5b8c\\u6210\\n        if(pool.state==PoolState.FINISH){\\n            require(block.timestamp>=pool.endTime,\\\"withdrawLend : not end time\\\");\\n            //\\u8d4e\\u56de\\u91d1\\u989d = finishAmountLend * sp\\u4efd\\u989d\\n            uint256 redeemAmount = safeDiv(safeMul(data.finishAmountLend, spShare), calDecimals);\\n            //\\u9000\\u6b3e\\n            _redeem(payable(msg.sender),pool.lendToken,redeemAmount);\\n            emit WithdrawLend(msg.sender,pool.lendToken,redeemAmount,_spAmount);\\n        }\\n        //\\u6e05\\u7b97\\n        if (pool.state==PoolState.LIQUIDATION){\\n            require(block.timestamp>=pool.settleTime,\\\"withdrawLend : less than settle time\\\");\\n            //\\u8d4e\\u56de\\u91d1\\u989d = liquidationAmountLend * sp\\u4efd\\u989d\\n            uint256 redeemAmount = safeDiv(safeMul(data.liquidationAmountLend, spShare), calDecimals);\\n            //\\u9000\\u6b3e\\n            _redeem(payable(msg.sender),pool.lendToken,redeemAmount);\\n            emit WithdrawLend(msg.sender,pool.lendToken,redeemAmount,_spAmount);\\n        }\\n    }\\n    /**\\n     * @dev \\u51fa\\u501f\\u4eba\\u7d27\\u6025\\u63d0\\u53d6\\u5b58\\u6b3e\\uff0c\\u7528\\u4e8e\\u5904\\u7406\\u6c60\\u5f02\\u5e38\\u60c5\\u51b5\\n     * @notice \\u6c60\\u72b6\\u6001\\u5fc5\\u987b\\u662f\\u672a\\u5b8c\\u6210 \\n     * \\u4ec0\\u4e48\\u60c5\\u51b5\\u4e0b\\u4f1a\\u51fa\\u73b0UNDONE\\uff1f\\n     * 1. **\\u53ea\\u6709\\u5b58\\u6b3e\\u6ca1\\u6709\\u501f\\u6b3e**\\uff1a\\u51fa\\u501f\\u4eba\\u5b58\\u5165\\u8d44\\u91d1\\uff0c\\u4f46\\u6ca1\\u6709\\u501f\\u6b3e\\u4eba\\u8d28\\u62bc\\u62b5\\u62bc\\u54c1\\n     * 2. **\\u53ea\\u6709\\u501f\\u6b3e\\u6ca1\\u6709\\u5b58\\u6b3e**\\uff1a\\u501f\\u6b3e\\u4eba\\u8d28\\u62bc\\u62b5\\u62bc\\u54c1\\uff0c\\u4f46\\u6ca1\\u6709\\u51fa\\u501f\\u4eba\\u63d0\\u4f9b\\u8d44\\u91d1\\n     * 3. **\\u6c60\\u521b\\u5efa\\u5931\\u8d25**\\uff1a\\u6c60\\u7684\\u914d\\u7f6e\\u6709\\u95ee\\u9898\\uff0c\\u65e0\\u6cd5\\u6b63\\u5e38\\u8fd0\\u4f5c\\n     * | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f |\\n     * | `emergencyLendWithdrawal` | UNDONE | \\u65e0\\u9650\\u5236 | \\u7d27\\u6025\\u9000\\u51fa | \\u8f6c\\u51fa\\u5168\\u90e8\\u5b58\\u6b3e | \\u5f02\\u5e38\\u60c5\\u51b5\\u5b89\\u5168\\u9000\\u51fa |\\n     * @param _pid \\u662f\\u6c60\\u7d22\\u5f15\\n     */\\n    function emergencyLendWithdrawal(uint256 _pid) external nonReentrant notPause stateUndone(_pid)\\n    {\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];//\\u83b7\\u53d6\\u6c60\\u5b50\\u57fa\\u672c\\u4fe1\\u606f\\n        require(pool.lendSupply>0,\\\"emergencyLendWithdrawal : lendSupply is zero\\\");//\\u9a8c\\u8bc1\\u6c60\\u7684\\u8d37\\u6b3e\\u4f9b\\u5e94\\u91cf\\u5927\\u4e8e0\\n\\n        LendInfo storage lendInfo = userLendInfo[msg.sender][_pid];\\n        //\\u9a8c\\u8bc1\\u7528\\u6237\\u662f\\u5426\\u6709\\u5b58\\u6b3e\\u8bb0\\u5f55\\n        require(lendInfo.stakeAmount>0,\\\"emergencyLendWithdrawal : not pledged\\\");\\n        //\\u9a8c\\u8bc1\\u7528\\u6237\\u662f\\u5426\\u5df2\\u7ecf\\u8fdb\\u884c\\u8fc7\\u9000\\u6b3e\\n        require(lendInfo.hasNoRefund==false,\\\"emergencyLendWithdrawal : already refunded\\\");\\n        //\\u6267\\u884c\\u8d4e\\u56de\\u64cd\\u4f5c\\uff0c\\u63d0\\u53d6\\u5168\\u90e8\\u5b58\\u6b3e\\n        _redeem(payable(msg.sender),pool.lendToken,lendInfo.stakeAmount); \\n        //\\u8bbe\\u7f6e\\u5df2\\u7ecf\\u9000\\u6b3e\\u6807\\u5fd7\\u4e3a\\u771f\\n        lendInfo.hasNoRefund=true;\\n        emit EmergencyLendWithdrawal(msg.sender,pool.lendToken,lendInfo.stakeAmount);\\n    }\\n\\n    /**\\n     * @dev \\u501f\\u6b3e\\u4eba\\u8d28\\u62bc\\u64cd\\u4f5c\\n     * @param _pid \\u662f\\u6c60\\u5b50\\u7d22\\u5f15\\n     * @param _stakeAmount \\u662f\\u7528\\u6237\\u8d28\\u62bc\\u7684\\u6570\\u91cf\\n     */\\n    function depositBorrow(uint256 _pid,uint256 _stakeAmount) external payable nonReentrant notPause timeBeforeSettle(_pid) stateMatch(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        BorrowInfo storage borrowInfo = userBorrowInfo[msg.sender][_pid];\\n\\n        uint256 amount = getPayableAmount(pool.borrowToken,_stakeAmount);// \\u83b7\\u53d6\\u5e94\\u4ed8\\u91d1\\u989d\\n        require(amount > 0, 'depositBorrow: deposit amount is zero'); // \\u8981\\u6c42\\u8d28\\u62bc\\u91d1\\u989d\\u5927\\u4e8e0\\n        borrowInfo.hasNoClaim = false; // \\u8bbe\\u7f6e\\u7528\\u6237\\u672a\\u63d0\\u53d6\\u8d28\\u62bc\\u7269\\n        borrowInfo.hasNoRefund = false; // \\u8bbe\\u7f6e\\u7528\\u6237\\u672a\\u9000\\u6b3e\\n         // \\u66f4\\u65b0\\u4fe1\\u606f\\n        if (pool.borrowToken == address(0)){ // \\u5982\\u679c\\u501f\\u6b3e\\u4ee3\\u5e01\\u662f0\\u5730\\u5740\\uff08\\u5373ETH\\uff09\\n            borrowInfo.stakeAmount = safeAdd(borrowInfo.stakeAmount, msg.value); // \\u66f4\\u65b0\\u7528\\u6237\\u8d28\\u62bc\\u91d1\\u989d\\n            pool.borrowSupply = safeAdd(pool.borrowSupply, msg.value); // \\u66f4\\u65b0\\u6c60\\u5b50\\u501f\\u6b3e\\u4f9b\\u5e94\\u91cf\\n        } else{ // \\u5982\\u679c\\u501f\\u6b3e\\u4ee3\\u5e01\\u4e0d\\u662f0\\u5730\\u5740\\uff08\\u5373\\u5176\\u4ed6ERC20\\u4ee3\\u5e01\\uff09\\n            borrowInfo.stakeAmount = safeAdd(borrowInfo.stakeAmount, _stakeAmount); // \\u66f4\\u65b0\\u7528\\u6237\\u8d28\\u62bc\\u91d1\\u989d\\n            pool.borrowSupply = safeAdd(pool.borrowSupply, _stakeAmount); // \\u66f4\\u65b0\\u6c60\\u5b50\\u501f\\u6b3e\\u4f9b\\u5e94\\u91cf\\n        }\\n        emit DepositBorrow(msg.sender, pool.borrowToken, _stakeAmount, amount); // \\u89e6\\u53d1\\u8d28\\u62bc\\u501f\\u6b3e\\u4e8b\\u4ef6\\n    }\\n\\n    /**\\n     * @dev \\u9000\\u8fd8\\u7ed9\\u501f\\u6b3e\\u4eba\\u7684\\u8d85\\u989d\\u62b5\\u62bc\\u54c1\\n     * @notice \\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210\\n     * | \\u51fd\\u6570           | \\u72b6\\u6001\\u8981\\u6c42     | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b   | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f   \\n     * | `refundBorrow` | EXECUTION/FINISH/LIQUIDATION | \\u7ed3\\u7b97\\u540e   | \\u9000\\u8fd8\\u8d85\\u989d  | \\u8f6c\\u51fa\\u8d85\\u989d\\u62b5\\u62bc\\u54c1| \\u9000\\u8fd8\\u8d85\\u989d\\u8d28\\u62bc   \\n     * @param _pid \\u662f\\u6c60\\u72b6\\u6001\\n     */\\n    function refundBorrow(uint256 _pid) external nonReentrant notPause timeAfterSettle(_pid) stateNotMatchUndone(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        BorrowInfo storage borrowInfo = userBorrowInfo[msg.sender][_pid];\\n        require(safeSub(pool.borrowSupply, data.settleAmountBorrow) > 0, \\\"refundBorrow : not refund\\\");// \\u9700\\u8981\\u501f\\u6b3e\\u4f9b\\u5e94\\u91cf\\u51cf\\u53bb\\u7ed3\\u7b97\\u501f\\u6b3e\\u91cf\\u5927\\u4e8e0\\n        require(borrowInfo.stakeAmount>0,\\\"refundBorrow : not pledged\\\");// \\u9700\\u8981\\u501f\\u6b3e\\u4eba\\u7684\\u8d28\\u62bc\\u91cf\\u5927\\u4e8e0\\n        require(borrowInfo.hasNoRefund==false,\\\"refundBorrow : already refunded\\\");// \\u9700\\u8981\\u501f\\u6b3e\\u4eba\\u6ca1\\u6709\\u9000\\u6b3e\\n        //\\u7528\\u6237\\u4efd\\u989d=\\u5f53\\u524d\\u8d28\\u62bc\\u91d1\\u989d/\\u603b\\u91d1\\u989d\\n        uint256 userShare=safeDiv(safeMul(borrowInfo.stakeAmount,calDecimals),pool.borrowSupply);\\n        // refundAmount = \\u603b\\u9000\\u6b3e\\u91d1\\u989d * \\u7528\\u6237\\u4efd\\u989d\\n        uint256 refundAmount = safeDiv(safeMul(safeSub(pool.borrowSupply, data.settleAmountBorrow), userShare), calDecimals);\\n        borrowInfo.refundAmount=refundAmount; // \\u66f4\\u65b0\\u501f\\u6b3e\\u4eba\\u7684\\u9000\\u6b3e\\u91d1\\u989d\\n        borrowInfo.hasNoRefund=true;// \\u8bbe\\u7f6e\\u501f\\u6b3e\\u4eba\\u5df2\\u7ecf\\u9000\\u6b3e\\n        // \\u9000\\u8fd8\\u8d44\\u91d1\\n        _redeem(payable(msg.sender),pool.borrowToken,refundAmount);\\n        emit RefundBorrow(msg.sender,pool.borrowToken,refundAmount);\\n    }\\n    /**\\n     * @dev \\u501f\\u6b3e\\u4eba\\u63a5\\u6536 sp_token \\u548c\\u8d37\\u6b3e\\u8d44\\u91d1\\n     * @notice \\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210\\n     * @param _pid \\u662f\\u6c60\\u72b6\\u6001\\n     * | \\u51fd\\u6570           | \\u72b6\\u6001\\u8981\\u6c42     | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b   | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f   \\n     * | `claimBorrow` | EXECUTION/FINISH/LIQUIDATION | \\u7ed3\\u7b97\\u540e   | \\u9886\\u53d6\\u8d37\\u6b3e  | \\u94f8\\u9020 JP \\u4ee3\\u5e01+\\u8f6c\\u51fa\\u501f\\u6b3e| \\u83b7\\u5f97\\u501f\\u6b3e\\u8d44\\u91d1  \\n     */\\n    function claimBorrow(uint256 _pid) external nonReentrant notPause timeAfterSettle(_pid) stateNotMatchUndone(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        BorrowInfo storage borrowInfo = userBorrowInfo[msg.sender][_pid];\\n        require(borrowInfo.stakeAmount>0,\\\"claimBorrow : cannot get jp_token\\\");// \\u9700\\u8981\\u501f\\u6b3e\\u4eba\\u7684\\u8d28\\u62bc\\u91cf\\u5927\\u4e8e0\\n        require(borrowInfo.hasNoClaim==false,\\\"claimBorrow : already claimed\\\");// \\u9700\\u8981\\u501f\\u6b3e\\u4eba\\u6ca1\\u6709\\u9886\\u53d6\\u8fc7jp_token\\n    \\n        // \\u603bJP\\u6570\\u91cf = \\u5b9e\\u9645\\u7ed3\\u7b97\\u7684\\u501f\\u6b3e\\u91d1\\u989d(1e18) \\u00d7 \\u62b5\\u62bc\\u7387(1e8) (\\u62b5\\u62bc\\u7387 = \\u501f\\u6b3e\\u91d1\\u989d / \\u62b5\\u62bc\\u54c1\\u4ef7\\u503c, 150%\\u62b5\\u62bc\\u7387\\uff1a\\u9700\\u8981\\u8d28\\u62bc1.5\\u500d\\u4ef7\\u503c\\u7684\\u62b5\\u62bc\\u54c1)\\n        uint256 totalJpAmount = safeDiv(safeMul(data.settleAmountLend, pool.martgageRate), baseDecimal);\\n        // \\u7528\\u6237\\u4efd\\u989d = \\u8d28\\u62bc\\u91d1\\u989d / \\u603b\\u8d28\\u62bc\\u91d1\\u989d\\n        uint256 userShare=safeDiv(safeMul(borrowInfo.stakeAmount, calDecimals), pool.borrowSupply);\\n        uint256 jpAmount=safeDiv(safeMul(totalJpAmount, userShare), calDecimals);\\n\\n        // \\u94f8\\u9020 jp token \\u7ed9\\u501f\\u6b3e\\u4eba \\n        pool.jpCoin.mint(msg.sender,jpAmount);\\n        //\\u7d22\\u53d6\\u8d37\\u6b3e\\u8d44\\u91d1\\n        uint256 borrowAmount = safeDiv(safeMul(data.settleAmountLend, userShare), calDecimals);// \\u8ba1\\u7b97\\u7528\\u6237\\u5b9e\\u9645\\u53ef\\u501f\\u91d1\\u989d\\n        _redeem(payable(msg.sender),pool.lendToken,borrowAmount);// \\u8f6c\\u51fa\\u501f\\u6b3e\\u8d44\\u91d1\\u7ed9\\u501f\\u6b3e\\u4eba\\n        borrowInfo.hasNoClaim = true;// \\u66f4\\u65b0\\u72b6\\u6001\\uff0c\\u9632\\u6b62\\u91cd\\u590d\\u9886\\u53d6\\n        emit ClaimBorrow(msg.sender,pool.borrowToken,borrowAmount);\\n    }\\n    /**\\n     * @dev \\u501f\\u6b3e\\u4eba\\u8d4e\\u56de\\u8d28\\u62bc\\n     * @notice \\n     * | \\u51fd\\u6570           | \\u72b6\\u6001\\u8981\\u6c42     | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b   | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f   \\n     * | `withdrawBorrow` | FINISH/LIQUIDATION | \\u5230\\u671f\\u540e   | \\u8d4e\\u56de\\u62b5\\u62bc\\u54c1  | \\u9500\\u6bc1 JP \\u4ee3\\u5e01+\\u8f6c\\u51fa\\u62b5\\u62bc\\u54c1| \\u53d6\\u56de\\u8d28\\u62bc\\u7684\\u62b5\\u62bc\\u54c1  \\n     * @param _pid \\u662f\\u6c60\\u72b6\\u6001\\n     * @param _jpAmount \\u662f\\u7528\\u6237\\u9500\\u6bc1JPtoken\\u7684\\u6570\\u91cf\\n     */\\n    function withdrawBorrow(uint256 _pid,uint256 _jpAmount) external nonReentrant notPause stateFinishLiquidation(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        // \\u8981\\u6c42\\u63d0\\u53d6\\u7684\\u91d1\\u989d\\u5927\\u4e8e0\\n        require(_jpAmount > 0, 'withdrawBorrow: withdraw amount is zero');\\n        pool.jpCoin.burn(msg.sender,_jpAmount);\\n        uint256 totaljpAmount = safeDiv(safeMul(data.settleAmountLend, pool.martgageRate), baseDecimal);\\n        uint256 jpShare = safeDiv(safeMul(_jpAmount, calDecimals), totaljpAmount);\\n        if(pool.state==PoolState.FINISH){\\n            // \\u8981\\u6c42\\u5f53\\u524d\\u65f6\\u95f4\\u5927\\u4e8e\\u7ed3\\u675f\\u65f6\\u95f4\\n            require(block.timestamp>=pool.endTime,\\\"withdrawBorrow : less than end time\\\");\\n            uint256 redeemAmount = safeDiv(safeMul(data.finishAmountBorrow, jpShare), calDecimals);\\n            _redeem(payable(msg.sender),pool.borrowToken,redeemAmount);\\n            emit WithdrawBorrow(msg.sender,pool.borrowToken,redeemAmount,_jpAmount);\\n        }\\n        if(pool.state==PoolState.LIQUIDATION){\\n             // \\u8981\\u6c42\\u5f53\\u524d\\u65f6\\u95f4\\u5927\\u4e8e\\u5339\\u914d\\u65f6\\u95f4\\n            require(block.timestamp>=pool.settleTime,\\\"withdrawBorrow : less than match time\\\");\\n            uint256 redeemAmount = safeDiv(safeMul(data.liquidationAmountBorrow, jpShare), calDecimals);\\n            _redeem(payable(msg.sender),pool.borrowToken,redeemAmount);\\n            emit WithdrawBorrow(msg.sender,pool.borrowToken,redeemAmount,_jpAmount);\\n        }\\n    }\\n    \\n    /**\\n     * @dev \\u7d27\\u6025\\u501f\\u6b3e\\u63d0\\u53d6\\n     * @notice \\u5728\\u6781\\u7aef\\u60c5\\u51b5\\u4e0b\\uff0c\\u603b\\u5b58\\u6b3e\\u4e3a0\\uff0c\\u6216\\u8005\\u603b\\u4fdd\\u8bc1\\u91d1\\u4e3a0\\uff0c\\n     * \\u5728\\u67d0\\u4e9b\\u6781\\u7aef\\u60c5\\u51b5\\u4e0b\\uff0c\\u5982\\u603b\\u5b58\\u6b3e\\u4e3a0\\u6216\\u603b\\u4fdd\\u8bc1\\u91d1\\u4e3a0\\u65f6\\uff0c\\u501f\\u6b3e\\u8005\\u53ef\\u4ee5\\u8fdb\\u884c\\u7d27\\u6025\\u63d0\\u53d6\\u3002\\n     * \\u9996\\u5148\\uff0c\\u4ee3\\u7801\\u4f1a\\u83b7\\u53d6\\u6c60\\u5b50\\u7684\\u57fa\\u672c\\u4fe1\\u606f\\u548c\\u501f\\u6b3e\\u8005\\u7684\\u501f\\u6b3e\\u4fe1\\u606f\\uff0c\\u7136\\u540e\\u68c0\\u67e5\\u501f\\u6b3e\\u4f9b\\u5e94\\u548c\\u501f\\u6b3e\\u8005\\u7684\\u8d28\\u62bc\\u91d1\\u989d\\u662f\\u5426\\u5927\\u4e8e0\\uff0c\\n     * \\u4ee5\\u53ca\\u501f\\u6b3e\\u8005\\u662f\\u5426\\u5df2\\u7ecf\\u8fdb\\u884c\\u8fc7\\u9000\\u6b3e\\u3002\\u5982\\u679c\\u8fd9\\u4e9b\\u6761\\u4ef6\\u90fd\\u6ee1\\u8db3\\uff0c\\n     * \\u90a3\\u4e48\\u5c31\\u4f1a\\u6267\\u884c\\u8d4e\\u56de\\u64cd\\u4f5c\\uff0c\\u5e76\\u6807\\u8bb0\\u501f\\u6b3e\\u8005\\u5df2\\u7ecf\\u9000\\u6b3e\\u3002\\n     * \\u6700\\u540e\\uff0c\\u89e6\\u53d1\\u4e00\\u4e2a\\u7d27\\u6025\\u501f\\u6b3e\\u63d0\\u53d6\\u7684\\u4e8b\\u4ef6\\u3002\\n     * @param _pid \\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\\n     */\\n    function emergencyBorrowWithdrawal(uint256 _pid) external nonReentrant notPause stateUndone(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        // \\u786e\\u4fdd\\u501f\\u6b3e\\u4f9b\\u5e94\\u5927\\u4e8e0\\n        require(pool.borrowSupply>0,\\\"emergencyBorrowWithdrawal : not withdrawal\\\");\\n        // \\u83b7\\u53d6\\u501f\\u6b3e\\u8005\\u7684\\u501f\\u6b3e\\u4fe1\\u606f\\n        BorrowInfo storage borrowInfo = userBorrowInfo[msg.sender][_pid];\\n        // \\u786e\\u4fdd\\u501f\\u6b3e\\u8005\\u7684\\u8d28\\u62bc\\u91d1\\u989d\\u5927\\u4e8e0\\n        require(borrowInfo.stakeAmount > 0, \\\"refundBorrow: not pledged\\\");\\n        // \\u786e\\u4fdd\\u501f\\u6b3e\\u8005\\u6ca1\\u6709\\u8fdb\\u884c\\u8fc7\\u9000\\u6b3e\\n        require(!borrowInfo.hasNoRefund, \\\"refundBorrow: again refund\\\");\\n         // \\u6267\\u884c\\u8d4e\\u56de\\u64cd\\u4f5c\\n        _redeem(payable(msg.sender),pool.borrowToken,borrowInfo.stakeAmount);\\n        // \\u6807\\u8bb0\\u501f\\u6b3e\\u8005\\u5df2\\u7ecf\\u9000\\u6b3e\\n        borrowInfo.hasNoRefund = true;\\n        // \\u89e6\\u53d1\\u7d27\\u6025\\u501f\\u6b3e\\u63d0\\u53d6\\u4e8b\\u4ef6\\n        emit EmergencyBorrowWithdrawal(msg.sender, pool.borrowToken, borrowInfo.stakeAmount);\\n    }\\n\\n    function checkoutSettle(uint256 _pid) public view returns(bool){\\n        return block.timestamp>=poolBaseInfos[_pid].settleTime;\\n    }\\n\\n    function settle(uint256 _pid) public validCall{\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data= poolDataInfos[_pid];\\n        require(checkoutSettle(_pid),\\\"settle: time is less than settle time\\\");\\n        require(pool.state==PoolState.MATCH,\\\"settle: pool state must be MATCH\\\");\\n        if(pool.lendSupply>0 && pool.borrowSupply>0){\\n            //\\u83b7\\u53d6\\u8d44\\u4ea7\\u5bf9\\u4ef7\\u683c\\n            uint256[2] memory prices=getUnderlyingPriceView(_pid);\\n            //\\u8ba1\\u7b97\\u8d28\\u62bc\\u4fdd\\u8bc1\\u91d1\\u603b\\u4ef7\\u503c =\\u4ef7\\u683c\\u6bd4\\u7387\\uff08\\u62b5\\u62bc\\u54c1\\u4ef7\\u683c/\\u51fa\\u501f\\u4ee3\\u5e01\\u4ef7\\u683c\\uff09* \\u62b5\\u62bc\\u54c1\\u6570\\u91cf\\n            uint256 valueRatio=safeDiv(safeMul(prices[1],calDecimals),prices[0]);\\n            uint256 totalValue=safeDiv(safeMul(pool.borrowSupply,valueRatio),calDecimals);\\n            //\\u8ba1\\u7b97\\u5b9e\\u9645\\u4ef7\\u503c = \\u603b\\u4ef7\\u503c \\u00f7\\u62b5\\u62bc\\u7387\\n            // totalValue = 50,000 USDC\\n            // \\u62b5\\u62bc\\u7387 = 150%\\uff081.5\\u500d\\uff09\\n            // actualValue = 50,000 \\u00d7 1e8 \\u00f7 150,000,000 = 33,333.33 USDC\\n            uint256 actualValue=safeDiv(safeMul(totalValue,baseDecimal),pool.martgageRate);\\n            if(pool.lendSupply>actualValue){\\n                // \\u603b\\u501f\\u6b3e\\u5927\\u4e8e\\u603b\\u501f\\u51fa\\n                data.settleAmountLend=actualValue;\\n                data.settleAmountBorrow=pool.borrowSupply;\\n            }else{\\n                // \\u603b\\u501f\\u6b3e\\u5c0f\\u4e8e\\u603b\\u501f\\u51fa\\n                data.settleAmountLend=pool.lendSupply;\\n                //\\u7ed3\\u7b97\\u65f6\\u7684\\u5b9e\\u9645\\u501f\\u6b3e\\u91d1\\u989d settleAmountBorrow = (lendSupply \\u00d7 martgageRate) \\u00f7 (borrowTokenPrice \\u00d7 baseDecimal \\u00f7 lendTokenPrice)\\n                uint256 priceRatio = safeDiv(safeMul(prices[1], baseDecimal), prices[0]);\\n                data.settleAmountBorrow = safeDiv(safeMul(pool.lendSupply, pool.martgageRate), priceRatio);\\n            }\\n            // \\u66f4\\u65b0\\u6c60\\u5b50\\u72b6\\u6001\\u4e3a\\u6267\\u884c\\n            pool.state=PoolState.EXECUTION;\\n             // \\u89e6\\u53d1\\u4e8b\\u4ef6\\n            emit StateChange(_pid,uint256(PoolState.MATCH), uint256(PoolState.EXECUTION));\\n\\n        } else {\\n            // \\u6781\\u7aef\\u60c5\\u51b5\\uff0c\\u501f\\u6b3e\\u6216\\u501f\\u51fa\\u4efb\\u4e00\\u4e3a0\\n            pool.state=PoolState.UNDONE;\\n            data.settleAmountLend=pool.lendSupply;\\n            data.settleAmountBorrow=pool.borrowSupply;\\n            // \\u89e6\\u53d1\\u4e8b\\u4ef6\\n            emit StateChange(_pid,uint256(PoolState.MATCH), uint256(PoolState.UNDONE));\\n        }\\n    }\\n\\n    function checkoutFinish(uint256 _pid) public view returns(bool){\\n        return block.timestamp>=poolBaseInfos[_pid].endTime;\\n    }\\n\\n    /**\\n     * @dev \\u5b8c\\u6210\\u4e00\\u4e2a\\u501f\\u8d37\\u6c60\\u7684\\u64cd\\u4f5c\\uff0c\\u5305\\u62ec\\u8ba1\\u7b97\\u5229\\u606f\\u3001\\u6267\\u884c\\u4ea4\\u6362\\u64cd\\u4f5c\\u3001\\u8d4e\\u56de\\u8d39\\u7528\\u548c\\u66f4\\u65b0\\u6c60\\u5b50\\u72b6\\u6001\\u7b49\\u6b65\\u9aa4\\u3002\\n     * @param _pid \\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\\n     */\\n    function finish(uint256 _pid) public validCall{\\n        // \\u83b7\\u53d6\\u57fa\\u7840\\u6c60\\u5b50\\u4fe1\\u606f\\u548c\\u6570\\u636e\\u4fe1\\u606f\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        require(checkoutFinish(_pid),\\\"finish: less than end time\\\");\\n        require(pool.state==PoolState.EXECUTION,\\\"finish: pool state must be execution\\\");\\n\\n        (address token0,address token1)=(pool.borrowToken,pool.lendToken);\\n        // \\u8ba1\\u7b97\\u65f6\\u95f4\\u6bd4\\u7387(1e8) = ((\\u7ed3\\u675f\\u65f6\\u95f4 - \\u7ed3\\u7b97\\u65f6\\u95f4) * \\u57fa\\u7840\\u5c0f\\u6570)/365\\u5929\\n        uint256 timeRatio = safeDiv(safeMul(safeSub(pool.endTime, pool.settleTime), baseDecimal), baseYear);\\n        // \\u8ba1\\u7b97\\u5229\\u606f(1e18) = \\u57fa\\u7840\\u5229\\u606f\\uff08\\u7ed3\\u7b97\\u8d37\\u6b3e\\u91d1\\u989d(1e18)\\u00d7 \\u5229\\u7387(1e8) \\uff09\\u00d7 \\u65f6\\u95f4\\u6bd4\\u7387(1e8)\\n        uint256 interest = safeDiv(safeMul(timeRatio, safeMul(pool.interestRate, data.settleAmountLend)), 1e16);\\n        uint256 lendAmount = safeAdd(data.settleAmountLend, interest); // \\u8ba1\\u7b97\\u8d37\\u6b3e\\u91d1\\u989d = \\u7ed3\\u7b97\\u8d37\\u6b3e\\u91d1\\u989d + \\u5229\\u606f\\n        // \\u8ba1\\u7b97\\u9700\\u8981\\u53d8\\u73b0\\u7684\\u62b5\\u62bc\\u54c1\\u4ef7\\u503c = \\u8d37\\u6b3e\\u91d1\\u989d * (1 + lendFee\\u8d39\\u7528)\\n        uint256 sellAmount = safeDiv(safeMul(lendAmount, safeAdd(lendFee, baseDecimal)), baseDecimal);\\n         // \\u6267\\u884c\\u4ee3\\u5e01\\u4ea4\\u6362\\u64cd\\u4f5c amountSell\\uff1a\\u5b9e\\u9645\\u5356\\u51fa\\u7684\\u62b5\\u62bc\\u54c1\\u6570\\u91cf amountIn\\uff1a\\u5b9e\\u9645\\u83b7\\u5f97\\u7684\\u51fa\\u501f\\u4ee3\\u5e01\\u6570\\u91cf\\n        (uint256 amountSell,uint256 amountIn) = _sellExactAmount(swapRouter,token0,token1,sellAmount);\\n        require(amountIn >= lendAmount,\\\"finish: Slippage is too high\\\");\\n        if(amountIn>lendAmount){\\n            uint256 feeAmount = safeSub(amountIn, lendAmount);\\n            //\\u5982\\u679c\\u53d8\\u73b0\\u6536\\u76ca\\u8d85\\u8fc7\\u8fd8\\u6b3e\\u9700\\u6c42\\uff1a\\u8d85\\u989d\\u90e8\\u5206\\u4f5c\\u4e3a\\u534f\\u8bae\\u8d39\\u7528\\n            _redeem(payable(feeAddress),pool.lendToken, feeAmount);\\n            data.finishAmountLend = safeSub(amountIn, feeAmount); //\\u66f4\\u65b0\\u5b8c\\u6210\\u65f6\\u7684\\u51fa\\u501f\\u91d1\\u989d\\n        }else{\\n             data.finishAmountLend = amountIn;\\n        }\\n\\n          // \\u8ba1\\u7b97\\u5269\\u4f59\\u7684\\u62b5\\u62bc\\u54c1\\u6570\\u91cf\\n          uint256 remainNowAmount = safeSub(data.settleAmountBorrow, amountSell);\\n          uint256 remainBorrowAmount=redeemFees(borrowFee,pool.borrowToken,remainNowAmount);//\\u8fd4\\u56de\\u6263\\u9664\\u8d39\\u7528\\u540e\\u7684\\u5269\\u4f59\\u91d1\\u989d\\n          data.finishAmountBorrow=remainBorrowAmount;\\n\\n          pool.state=PoolState.FINISH;\\n          emit StateChange(_pid,uint256(PoolState.EXECUTION), uint256(PoolState.FINISH));\\n    }\\n\\n    /**\\n     * @dev \\u68c0\\u67e5\\u6e05\\u7b97\\u6761\\u4ef6,\\n     * @param _pid \\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\\n     */\\n    function checkoutLiquidation(uint256 _pid) external view returns(bool){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        uint256[2] memory prices=getUnderlyingPriceView(_pid);\\n        // \\u4fdd\\u8bc1\\u91d1\\u5f53\\u524d\\u4ef7\\u503c =  \\u4ef7\\u683c\\u6bd4\\u7387\\uff08\\u62b5\\u62bc\\u54c1\\u4ef7\\u683c/\\u51fa\\u501f\\u4ee3\\u5e01\\u4ef7\\u683c\\uff09* \\u62b5\\u62bc\\u54c1\\u6570\\u91cf\\n        uint256 priceRatio = safeDiv(safeMul(prices[1], calDecimals), prices[0]);\\n        uint256 borrowValueNow = safeDiv(safeMul(data.settleAmountBorrow, priceRatio), calDecimals);\\n        // \\u6e05\\u7b97\\u9608\\u503c = settleAmountLend * (1 + autoLiquidateThreshold)\\n        uint256 valueThreshold = safeDiv(safeMul(data.settleAmountLend, safeAdd(baseDecimal, pool.autoLiquidateThreshold)), baseDecimal);\\n        return borrowValueNow<valueThreshold;\\n    }\\n\\n\\n    /**\\n     * @dev \\u6e05\\u7b97\\n     * @param _pid \\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\\n     */\\n    function liquidate(uint256 _pid) public validCall{\\n        PoolDataInfo storage data = poolDataInfos[_pid]; \\n        PoolBaseInfo storage pool = poolBaseInfos[_pid]; \\n        require(block.timestamp > pool.settleTime, \\\"liquidate: time is less than settle time\\\"); // \\u9700\\u8981\\u5f53\\u524d\\u65f6\\u95f4\\u5927\\u4e8e\\u7ed3\\u7b97\\u65f6\\u95f4\\n        require(pool.state == PoolState.EXECUTION,\\\"liquidate: pool state must be execution\\\"); // \\u9700\\u8981\\u6c60\\u5b50\\u7684\\u72b6\\u6001\\u662f\\u6267\\u884c\\u72b6\\u6001\\n\\n        (address token0,address token1)=(pool.borrowToken,pool.lendToken);\\n         // \\u65f6\\u95f4\\u6bd4\\u7387(1e8) = ((\\u7ed3\\u675f\\u65f6\\u95f4 - \\u7ed3\\u7b97\\u65f6\\u95f4) * \\u57fa\\u7840\\u5c0f\\u6570)/365\\u5929\\n        uint256 timeRatio = safeDiv(safeMul(safeSub(pool.endTime, pool.settleTime), baseDecimal), baseYear);\\n        // \\u8ba1\\u7b97\\u5229\\u606f(1e18) = \\u57fa\\u7840\\u5229\\u606f\\uff08\\u7ed3\\u7b97\\u8d37\\u6b3e\\u91d1\\u989d(1e18)\\u00d7 \\u5229\\u7387(1e8) \\uff09\\u00d7 \\u65f6\\u95f4\\u6bd4\\u7387(1e8)\\n        uint256 interest = safeDiv(safeMul(timeRatio, safeMul(pool.interestRate, data.settleAmountLend)), 1e16);\\n        // \\u8ba1\\u7b97\\u8d37\\u6b3e\\u91d1\\u989d = \\u7ed3\\u7b97\\u8d37\\u6b3e\\u91d1\\u989d + \\u5229\\u606f\\n        uint256 lendAmount = safeAdd(data.settleAmountLend, interest);\\n        // \\u6dfb\\u52a0\\u8d37\\u6b3e\\u8d39\\u7528\\n        uint256 sellAmount = safeDiv(safeMul(lendAmount, safeAdd(lendFee, baseDecimal)), baseDecimal);\\n        (uint256 amountSell,uint256 amountIn) = _sellExactAmount(swapRouter,token0,token1,sellAmount); // \\u5356\\u51fa\\u51c6\\u786e\\u7684\\u91d1\\u989d\\n        // \\u53ef\\u80fd\\u4f1a\\u6709\\u6ed1\\u70b9\\uff0camountIn - lendAmount < 0;\\n        if (amountIn > lendAmount) {\\n            uint256 feeAmount = safeSub(amountIn, lendAmount); // \\u8d39\\u7528\\u91d1\\u989d\\n            // \\u8d37\\u6b3e\\u8d39\\u7528\\n            _redeem(payable(feeAddress),pool.lendToken, feeAmount);\\n            data.liquidationAmountLend = safeSub(amountIn, feeAmount);\\n        }else {\\n            data.liquidationAmountLend = amountIn;\\n        }\\n        // liquidationAmountBorrow  \\u501f\\u6b3e\\u8d39\\u7528\\n        uint256 remainNowAmount = safeSub(data.settleAmountBorrow, amountSell); // \\u5269\\u4f59\\u7684\\u73b0\\u5728\\u7684\\u91d1\\u989d\\n        uint256 remainBorrowAmount = redeemFees(borrowFee,pool.borrowToken,remainNowAmount); // \\u5269\\u4f59\\u7684\\u501f\\u6b3e\\u91d1\\u989d\\n        data.liquidationAmountBorrow = remainBorrowAmount;\\n        // \\u66f4\\u65b0\\u6c60\\u5b50\\u72b6\\u6001\\n        pool.state = PoolState.LIQUIDATION;\\n         // \\u4e8b\\u4ef6\\n        emit StateChange(_pid,uint256(PoolState.EXECUTION), uint256(PoolState.LIQUIDATION));\\n    }\\n\\n    /**\\n     * @dev \\u8d39\\u7528\\u8ba1\\u7b97,\\u8ba1\\u7b97\\u5e76\\u8d4e\\u56de\\u8d39\\u7528\\u3002\\n     * @notice \\u5982\\u679c\\u8ba1\\u7b97\\u51fa\\u7684\\u8d39\\u7528\\u5927\\u4e8e0\\uff0c\\u5b83\\u5c06\\u4ece\\u8d39\\u7528\\u5730\\u5740\\u8d4e\\u56de\\u76f8\\u5e94\\u7684\\u8d39\\u7528\\u3002\\n     * @param feeRatio \\u662f\\u8d39\\u7387\\n     * @param token \\u662f\\u4ee3\\u5e01\\u5730\\u5740\\n     * @param amount \\u662f\\u91d1\\u989d\\n     * @return \\u8fd4\\u56de\\u6263\\u9664\\u8d39\\u7528\\u540e\\u7684\\u5269\\u4f59\\u91d1\\u989d\\n     */\\n    function redeemFees(uint256 feeRatio, address token, uint256 amount) internal returns (uint256){\\n        // \\u8ba1\\u7b97\\u8d39\\u7528 = \\u91d1\\u989d * \\u8d39\\u7387 / \\u57fa\\u6570\\n        uint256 fee = safeDiv(safeMul(amount, feeRatio), baseDecimal);\\n        if(fee>0){\\n            _redeem(payable(feeAddress),token,fee);\\n        }\\n        return safeSub(amount, fee);\\n    }\\n\\n    function getUnderlyingPriceView(uint256 _pid) public view returns(uint256[2] memory){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        uint256[] memory assets=new uint256[](2);        // \\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684\\u6570\\u7ec4\\u6765\\u5b58\\u50a8\\u8d44\\u4ea7\\n        // \\u5c06\\u8d44\\u4ea7\\u8f6c\\u6362\\u4e3auint256\\u7c7b\\u578b\\n        assets[0]=uint256(uint160(pool.lendToken));\\n        assets[1]=uint256(uint160(pool.borrowToken));\\n        uint256[] memory prices=oracle.getPrices(assets);        // \\u4ece\\u9884\\u8a00\\u673a\\u83b7\\u53d6\\u8d44\\u4ea7\\u7684\\u4ef7\\u683c\\n        return [prices[0],prices[1]];\\n    }\\n\\n    //============UniSwapV2 =================\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u4ee3\\u5e01\\u4ea4\\u6362\\u8def\\u5f84\\n     * @notice \\u6784\\u5efa\\u4ece token0 \\u5230 token1 \\u7684\\u4ea4\\u6362\\u8def\\u5f84\\uff0c\\u652f\\u6301 ETH \\u5305\\u88c5\\n     * @param _swapRouter DEX\\u8def\\u7531\\u5668\\u5730\\u5740\\uff08\\u5982PancakeSwap\\uff09\\n     * @param token0 \\u6e90\\u4ee3\\u5e01\\u5730\\u5740\\uff08\\u8981\\u5356\\u51fa\\u7684\\u4ee3\\u5e01\\uff09\\n     * @param token1 \\u76ee\\u6807\\u4ee3\\u5e01\\u5730\\u5740\\uff08\\u8981\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\uff09\\n     * @return path \\u4ea4\\u6362\\u8def\\u5f84\\u6570\\u7ec4\\n     */\\n    function _getSwapPath(address _swapRouter,address token0, address token1) internal pure returns(address[] memory path){\\n        IUniswapV2Router02 IUniswap=IUniswapV2Router02(_swapRouter);\\n        path = new address[](2);\\n        path[0] = token0 == address(0) ? IUniswap.WETH() : token0;\\n        path[1] = token1 == address(0) ? IUniswap.WETH() : token1;\\n    }\\n\\n    /**\\n     * @dev \\u6839\\u636e\\u671f\\u671b\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\uff0c\\u8ba1\\u7b97\\u9700\\u8981\\u6295\\u5165\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\n     * @notice \\u8fd9\\u662f DEX \\u7684\\\"\\u53cd\\u5411\\u8ba1\\u7b97\\\"\\u529f\\u80fd\\uff0c\\u7528\\u4e8e\\u7cbe\\u786e\\u63a7\\u5236\\u4ea4\\u6362\\n     * \\n     * @param _swapRouter DEX\\u8def\\u7531\\u5668\\u5730\\u5740\\n     * @param token0 \\u6e90\\u4ee3\\u5e01\\u5730\\u5740\\uff08\\u8981\\u5356\\u51fa\\u7684\\u4ee3\\u5e01\\uff09\\n     * @param token1 \\u76ee\\u6807\\u4ee3\\u5e01\\u5730\\u5740\\uff08\\u8981\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\uff09\\n     * @param amountOut \\u671f\\u671b\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\n     * @return \\u9700\\u8981\\u6295\\u5165\\u7684\\u6e90\\u4ee3\\u5e01\\u6570\\u91cf\\n     */\\n    function _getAmountIn(address _swapRouter, address token0, address token1, uint256 amountOut) internal view returns(uint256){\\n        IUniswapV2Router02 IUniswap = IUniswapV2Router02(_swapRouter);\\n        address[] memory path = _getSwapPath(_swapRouter,token0,token1);\\n        uint256[] memory amounts = IUniswap.getAmountsIn(amountOut,path);\\n        return amounts[0];\\n    }\\n\\n    /**\\n     * @dev \\u7cbe\\u786e\\u5356\\u51fa\\u4ee3\\u5e01\\uff1a\\u6839\\u636e\\u671f\\u671b\\u83b7\\u5f97\\u7684\\u8f93\\u51fa\\u6570\\u91cf\\uff0c\\u8ba1\\u7b97\\u5e76\\u6267\\u884c\\u4ea4\\u6362\\n     * @param _swapRouter DEX\\u8def\\u7531\\u5668\\u5730\\u5740\\n     * @param token0 \\u8981\\u5356\\u51fa\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\n     * @param token1 \\u8981\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\n     * @param amountOut \\u671f\\u671b\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\n     * @return (amountSell, amountIn) \\u5b9e\\u9645\\u5356\\u51fa\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\uff08\\u53ef\\u80fd\\u56e0\\u6ed1\\u70b9\\u800c\\u53d8\\u5316\\uff09\\u548c\\u5b9e\\u9645\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\uff08\\u5e94\\u8be5 >= amountout\\uff09\\n     * \\n     * === \\u6267\\u884c\\u6d41\\u7a0b ===\\n     * 1. \\u8ba1\\u7b97\\u9636\\u6bb5\\uff1a\\u8c03\\u7528 _getAmountIn \\u8ba1\\u7b97\\u9700\\u8981\\u5356\\u51fa\\u7684\\u6570\\u91cf\\n     * 2. \\u6267\\u884c\\u9636\\u6bb5\\uff1a\\u8c03\\u7528 _swap \\u6267\\u884c\\u5b9e\\u9645\\u4ea4\\u6362\\n     * 3. \\u8fd4\\u56de\\u7ed3\\u679c\\uff1a\\u63d0\\u4f9b\\u5356\\u51fa\\u548c\\u83b7\\u5f97\\u7684\\u6570\\u91cf\\n     * \\n     * === \\u4f7f\\u7528\\u573a\\u666f ===\\n     * - finish \\u51fd\\u6570\\uff1a\\u53d8\\u73b0\\u62b5\\u62bc\\u54c1\\u83b7\\u5f97\\u8fd8\\u6b3e\\u8d44\\u91d1\\n     * - liquidate \\u51fd\\u6570\\uff1a\\u6e05\\u7b97\\u65f6\\u53d8\\u73b0\\u62b5\\u62bc\\u54c1\\n     */\\n    function _sellExactAmount(address _swapRouter,address token0,address token1,uint256 amountOut) internal returns(uint256,uint256){\\n        uint256 amountSell=amountOut>0?_getAmountIn(_swapRouter,token0,token1,amountOut):0;\\n        return(amountSell,_swap(_swapRouter,token0,token1,amountSell));\\n    }\\n\\n    /**\\n     * @dev \\u6267\\u884c\\u5b9e\\u9645\\u7684\\u4ee3\\u5e01\\u4ea4\\u6362\\u64cd\\u4f5c\\n     * @param _swapRouter DEX\\u8def\\u7531\\u5668\\u5730\\u5740\\n     * @param token0 \\u6e90\\u4ee3\\u5e01\\u5730\\u5740\\n     * @param token1 \\u76ee\\u6807\\u4ee3\\u5e01\\u5730\\u5740\\n     * @param amount0 \\u8981\\u4ea4\\u6362\\u7684\\u6e90\\u4ee3\\u5e01\\u6570\\u91cf\\n     * @return \\u5b9e\\u9645\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\n     * \\n     * === \\u4ea4\\u6362\\u7c7b\\u578b\\u652f\\u6301 ===\\n     * 1. ETH \\u2192 \\u4ee3\\u5e01\\uff1a\\u4f7f\\u7528 swapExactETHForTokens\\n     * 2. \\u4ee3\\u5e01 \\u2192 ETH\\uff1a\\u4f7f\\u7528 swapExactTokensForETH  \\n     * 3. \\u4ee3\\u5e01 \\u2192 \\u4ee3\\u5e01\\uff1a\\u4f7f\\u7528 swapExactTokensForTokens\\n     * \\n     * === \\u6ce8\\u610f\\u4e8b\\u9879 ===\\n     * - \\u4f7f\\u7528\\u65e0\\u9650\\u6388\\u6743\\u63d0\\u9ad8\\u6548\\u7387\\n     * - \\u8d85\\u65f6\\u8bbe\\u7f6e\\u4e3a now+30\\uff0c\\u9632\\u6b62\\u4ea4\\u6613\\u5361\\u6b7b \\n     * - \\u8fd4\\u56de\\u7684\\u662f\\u5b9e\\u9645\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\uff08\\u53ef\\u80fd\\u6709\\u6ed1\\u70b9\\uff09\\n     */\\n    function _swap(address _swapRouter, address token0, address token1, uint256 amount0) internal returns(uint256){\\n        // \\u5982\\u679c\\u6e90\\u4ee3\\u5e01\\u4e0d\\u662f ETH\\uff0c\\u8bbe\\u7f6e\\u6388\\u6743\\n        if(token0!=address(0)){\\n            _safeApprove(token0,address(_swapRouter),type(uint256).max);\\n        }\\n         // \\u5982\\u679c\\u76ee\\u6807\\u4ee3\\u5e01\\u4e0d\\u662f ETH\\uff0c\\u8bbe\\u7f6e\\u6388\\u6743\\n         if(token1!=address(0)){\\n            _safeApprove(token1,address(_swapRouter),type(uint256).max);\\n         }\\n         IUniswapV2Router02 IUniswap=IUniswapV2Router02(_swapRouter);\\n         address[] memory path=_getSwapPath(_swapRouter,token0,token1);\\n         uint256[] memory amounts;\\n         if(token0==address(0)){\\n            //swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n            amounts=IUniswap.swapExactETHForTokens{value:amount0}(0,path,address(this),block.timestamp+30);\\n         }else if(token1==address(0)){\\n            //swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n            amounts=IUniswap.swapTokensForExactETH(amount0,0,path,address(this),block.timestamp+30);\\n         }else{\\n            amounts = IUniswap.swapExactTokensForTokens(amount0,0, path, address(this), block.timestamp+30);\\n        }\\n        emit Swap(token0,token1,amounts[0],amounts[amounts.length-1]);\\n        return amounts[amounts.length-1];\\n    }\\n\\n    /**\\n     * @dev \\u5b89\\u5168\\u5730\\u4e3a\\u4ee3\\u5e01\\u8bbe\\u7f6e\\u6388\\u6743\\n     * @notice \\u4f7f\\u7528\\u5e95\\u5c42\\u8c03\\u7528\\u5b9e\\u73b0\\u6388\\u6743\\uff0c\\u907f\\u514d ERC20 \\u6807\\u51c6\\u4e0d\\u4e00\\u81f4\\u7684\\u95ee\\u9898\\n     * @param token \\u8981\\u6388\\u6743\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\n     * @param to \\u88ab\\u6388\\u6743\\u7684\\u5730\\u5740\\uff08\\u901a\\u5e38\\u662f DEX \\u8def\\u7531\\u5668\\uff09\\n     * @param value \\u6388\\u6743\\u6570\\u91cf\\uff08\\u8fd9\\u91cc\\u4f7f\\u7528 uint256(-1) \\u8868\\u793a\\u65e0\\u9650\\u6388\\u6743\\uff09\\n     * \\n     * === \\u6388\\u6743\\u673a\\u5236 ===\\n     * 1. \\u8c03\\u7528\\u4ee3\\u5e01\\u5408\\u7ea6\\u7684 approve \\u51fd\\u6570\\n     * 2. \\u68c0\\u67e5\\u8c03\\u7528\\u662f\\u5426\\u6210\\u529f\\n     * 3. \\u9a8c\\u8bc1\\u8fd4\\u56de\\u503c\\uff08\\u5982\\u679c\\u4ee3\\u5e01\\u652f\\u6301\\uff09\\n     * \\n     * === \\u4e3a\\u4ec0\\u4e48\\u4f7f\\u7528\\u65e0\\u9650\\u6388\\u6743 ===\\n     * 1. \\u63d0\\u9ad8\\u6548\\u7387\\uff1a\\u907f\\u514d\\u6bcf\\u6b21\\u4ea4\\u6362\\u90fd\\u91cd\\u65b0\\u6388\\u6743\\n     * 2. \\u51cf\\u5c11 gas \\u6d88\\u8017\\uff1a\\u4e00\\u6b21\\u6388\\u6743\\uff0c\\u591a\\u6b21\\u4f7f\\u7528\\n     * 3. \\u7b80\\u5316\\u903b\\u8f91\\uff1a\\u4e0d\\u9700\\u8981\\u8ddf\\u8e2a\\u5269\\u4f59\\u6388\\u6743\\u6570\\u91cf\\n     * \\n     * === \\u51fd\\u6570\\u9009\\u62e9\\u5668 ===\\n     * 0x095ea7b3 = approve(address,uint256) \\u7684\\u51fd\\u6570\\u9009\\u62e9\\u5668\\n     */\\n    function _safeApprove(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"!safeApprove\\\");\\n    }\\n\\n    function setPause() public validCall{\\n        globalPaused=!globalPaused;\\n    }\\n\\n    modifier notPause() {\\n        require(globalPaused==false,\\\"PledgePool : Stake has been suspended\\\");\\n        _;\\n    }\\n\\n    modifier timeBeforeSettle(uint256 _pid) {\\n        require(block.timestamp<poolBaseInfos[_pid].settleTime,\\\"PledgePool : Less than settle time\\\");\\n        _;\\n    }\\n\\n    modifier timeAfterSettle(uint256 _pid) {\\n        require(block.timestamp>=poolBaseInfos[_pid].settleTime,\\\"PledgePool : After settle time\\\");\\n        _;\\n    }\\n\\n\\n    modifier stateMatch(uint256 _pid) {\\n        require(poolBaseInfos[_pid].state == PoolState.MATCH, \\\"state: Pool status is not equal to match\\\");\\n        _;\\n    }\\n\\n    modifier stateNotMatchUndone(uint256 _pid) {\\n        require(poolBaseInfos[_pid].state == PoolState.EXECUTION \\n        || poolBaseInfos[_pid].state == PoolState.FINISH || \\n        poolBaseInfos[_pid].state == PoolState.LIQUIDATION,\\n        \\\"state: not match and undone\\\");\\n        _;\\n    }\\n\\n    modifier stateFinishLiquidation(uint256 _pid) {\\n        require(poolBaseInfos[_pid].state == PoolState.FINISH || poolBaseInfos[_pid].state == PoolState.LIQUIDATION,\\\"state: finish liquidation\\\");\\n        _;\\n    }\\n\\n    modifier stateUndone(uint256 _pid) {\\n        require(poolBaseInfos[_pid].state == PoolState.UNDONE,\\\"state: state must be undone\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x0fb4ecba4473e5738cb3ada129da259bc14cfb40e9205da5919754e0ab522ee5\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 2740,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "_status",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9987,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "minAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10004,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "globalPaused",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 10006,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "swapRouter",
            "offset": 1,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 10008,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "feeAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 10011,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "oracle",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IBscPledgeOracle)8002"
          },
          {
            "astId": 10013,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "lendFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10015,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "borrowFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 10049,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "poolBaseInfos",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(PoolBaseInfo)10045_storage)dyn_storage"
          },
          {
            "astId": 10066,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "poolDataInfos",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(PoolDataInfo)10062_storage)dyn_storage"
          },
          {
            "astId": 10082,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "userBorrowInfo",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(BorrowInfo)10075_storage))"
          },
          {
            "astId": 10098,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "userLendInfo",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(LendInfo)10091_storage))"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(PoolBaseInfo)10045_storage)dyn_storage": {
            "base": "t_struct(PoolBaseInfo)10045_storage",
            "encoding": "dynamic_array",
            "label": "struct PledgePool.PoolBaseInfo[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PoolDataInfo)10062_storage)dyn_storage": {
            "base": "t_struct(PoolDataInfo)10062_storage",
            "encoding": "dynamic_array",
            "label": "struct PledgePool.PoolDataInfo[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IBscPledgeOracle)8002": {
            "encoding": "inplace",
            "label": "contract IBscPledgeOracle",
            "numberOfBytes": "20"
          },
          "t_contract(IDebtToken)8035": {
            "encoding": "inplace",
            "label": "contract IDebtToken",
            "numberOfBytes": "20"
          },
          "t_enum(PoolState)9996": {
            "encoding": "inplace",
            "label": "enum PledgePool.PoolState",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(BorrowInfo)10075_storage))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(uint256 => struct PledgePool.BorrowInfo))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_uint256,t_struct(BorrowInfo)10075_storage)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(LendInfo)10091_storage))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(uint256 => struct PledgePool.LendInfo))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_uint256,t_struct(LendInfo)10091_storage)"
          },
          "t_mapping(t_uint256,t_struct(BorrowInfo)10075_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct PledgePool.BorrowInfo)",
            "numberOfBytes": "32",
            "value": "t_struct(BorrowInfo)10075_storage"
          },
          "t_mapping(t_uint256,t_struct(LendInfo)10091_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct PledgePool.LendInfo)",
            "numberOfBytes": "32",
            "value": "t_struct(LendInfo)10091_storage"
          },
          "t_struct(BorrowInfo)10075_storage": {
            "encoding": "inplace",
            "label": "struct PledgePool.BorrowInfo",
            "members": [
              {
                "astId": 10068,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "stakeAmount",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 10070,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "refundAmount",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 10072,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "hasNoRefund",
                "offset": 0,
                "slot": "2",
                "type": "t_bool"
              },
              {
                "astId": 10074,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "hasNoClaim",
                "offset": 1,
                "slot": "2",
                "type": "t_bool"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LendInfo)10091_storage": {
            "encoding": "inplace",
            "label": "struct PledgePool.LendInfo",
            "members": [
              {
                "astId": 10084,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "stakeAmount",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 10086,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "refundAmount",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 10088,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "hasNoRefund",
                "offset": 0,
                "slot": "2",
                "type": "t_bool"
              },
              {
                "astId": 10090,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "hasNoClaim",
                "offset": 1,
                "slot": "2",
                "type": "t_bool"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(PoolBaseInfo)10045_storage": {
            "encoding": "inplace",
            "label": "struct PledgePool.PoolBaseInfo",
            "members": [
              {
                "astId": 10017,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "settleTime",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 10019,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "endTime",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 10021,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "interestRate",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 10023,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "maxSupply",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 10025,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "lendSupply",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
              },
              {
                "astId": 10027,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "borrowSupply",
                "offset": 0,
                "slot": "5",
                "type": "t_uint256"
              },
              {
                "astId": 10029,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "martgageRate",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
              },
              {
                "astId": 10031,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "lendToken",
                "offset": 0,
                "slot": "7",
                "type": "t_address"
              },
              {
                "astId": 10033,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "borrowToken",
                "offset": 0,
                "slot": "8",
                "type": "t_address"
              },
              {
                "astId": 10036,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "state",
                "offset": 20,
                "slot": "8",
                "type": "t_enum(PoolState)9996"
              },
              {
                "astId": 10039,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "spCoin",
                "offset": 0,
                "slot": "9",
                "type": "t_contract(IDebtToken)8035"
              },
              {
                "astId": 10042,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "jpCoin",
                "offset": 0,
                "slot": "10",
                "type": "t_contract(IDebtToken)8035"
              },
              {
                "astId": 10044,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "autoLiquidateThreshold",
                "offset": 0,
                "slot": "11",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(PoolDataInfo)10062_storage": {
            "encoding": "inplace",
            "label": "struct PledgePool.PoolDataInfo",
            "members": [
              {
                "astId": 10051,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "settleAmountLend",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 10053,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "settleAmountBorrow",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 10055,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "finishAmountLend",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 10057,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "finishAmountBorrow",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 10059,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "liquidationAmountLend",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
              },
              {
                "astId": 10061,
                "contract": "contracts/pledage/PledgePool.sol:PledgePool",
                "label": "liquidationAmountBorrow",
                "offset": 0,
                "slot": "5",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "claimBorrow(uint256)": {
            "notice": "池状态不等于匹配和未完成"
          },
          "claimLend(uint256)": {
            "notice": "池状态不等于匹配和未完成"
          },
          "depositLend(uint256,uint256)": {
            "notice": "池状态必须为MATCH"
          },
          "emergencyBorrowWithdrawal(uint256)": {
            "notice": "在极端情况下，总存款为0，或者总保证金为0， 在某些极端情况下，如总存款为0或总保证金为0时，借款者可以进行紧急提取。 首先，代码会获取池子的基本信息和借款者的借款信息，然后检查借款供应和借款者的质押金额是否大于0， 以及借款者是否已经进行过退款。如果这些条件都满足， 那么就会执行赎回操作，并标记借款者已经退款。 最后，触发一个紧急借款提取的事件。"
          },
          "emergencyLendWithdrawal(uint256)": {
            "notice": "池状态必须是未完成  什么情况下会出现UNDONE？ 1. **只有存款没有借款**：出借人存入资金，但没有借款人质押抵押品 2. **只有借款没有存款**：借款人质押抵押品，但没有出借人提供资金 3. **池创建失败**：池的配置有问题，无法正常运作 | 函数 | 状态要求 | 时间要求 | 操作类型 | 代币处理 | 使用场景 | | `emergencyLendWithdrawal` | UNDONE | 无限制 | 紧急退出 | 转出全部存款 | 异常情况安全退出 |"
          },
          "refundBorrow(uint256)": {
            "notice": "池状态不等于匹配和未完成 | 函数           | 状态要求     | 时间要求 | 操作类型   | 代币处理 | 使用场景    | `refundBorrow` | EXECUTION/FINISH/LIQUIDATION | 结算后   | 退还超额  | 转出超额抵押品| 退还超额质押   "
          },
          "refundLend(uint256)": {
            "notice": "池状态不等于匹配和未完成 | 函数 | 状态要求 | 提取金额 | 是否计算利息 | 使用场景 | | `refundLend` | EXECUTION/FINISH/LIQUIDATION | 超额部分 | ❌ 不计算利息 | 退还超额存款 |"
          },
          "setFeeAddress(address)": {
            "notice": "Only allow administrators to operate"
          },
          "withdrawBorrow(uint256,uint256)": {
            "notice": " | 函数           | 状态要求     | 时间要求 | 操作类型   | 代币处理 | 使用场景    | `withdrawBorrow` | FINISH/LIQUIDATION | 到期后   | 赎回抵押品  | 销毁 JP 代币+转出抵押品| 取回质押的抵押品  "
          },
          "withdrawLend(uint256,uint256)": {
            "notice": "池的状态可能是完成或清算"
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC1363.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Arrays.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Arrays.sol)\\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Comparators} from \\\"./Comparators.sol\\\";\\nimport {SlotDerivation} from \\\"./SlotDerivation.sol\\\";\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using SlotDerivation for bytes32;\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        uint256[] memory array,\\n        function(uint256, uint256) pure returns (bool) comp\\n    ) internal pure returns (uint256[] memory) {\\n        _quickSort(_begin(array), _end(array), comp);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\\n     */\\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\\n        sort(array, Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of address (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        address[] memory array,\\n        function(address, address) pure returns (bool) comp\\n    ) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\\n     */\\n    function sort(address[] memory array) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        bytes32[] memory array,\\n        function(bytes32, bytes32) pure returns (bool) comp\\n    ) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\\n     */\\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\\n     * at end (exclusive). Sorting follows the `comp` comparator.\\n     *\\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\\n     *\\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\\n     * be used only if the limits are within a memory array.\\n     */\\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\\n        unchecked {\\n            if (end - begin < 0x40) return;\\n\\n            // Use first element as pivot\\n            uint256 pivot = _mload(begin);\\n            // Position where the pivot should be at the end of the loop\\n            uint256 pos = begin;\\n\\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\\n                if (comp(_mload(it), pivot)) {\\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\\n                    // position of the pivot and move the value there.\\n                    pos += 0x20;\\n                    _swap(pos, it);\\n                }\\n            }\\n\\n            _swap(begin, pos); // Swap pivot into place\\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first element of `array`.\\n     */\\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\\n        assembly (\\\"memory-safe\\\") {\\n            ptr := add(array, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\\n     * that comes just after the last element of the array.\\n     */\\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\\n        unchecked {\\n            return _begin(array) + array.length * 0x20;\\n        }\\n    }\\n\\n    /**\\n     * @dev Load memory word (as a uint256) at location `ptr`.\\n     */\\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\\n        assembly {\\n            value := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\\n     */\\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\\n        assembly {\\n            let value1 := mload(ptr1)\\n            let value2 := mload(ptr2)\\n            mstore(ptr1, value2)\\n            mstore(ptr2, value1)\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address memory array to uint256 memory array\\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(address, address) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(bytes32, bytes32) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\\n     * contain no repeated elements.\\n     *\\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\\n     * support for repeated elements in the array. The {lowerBound} function should\\n     * be used instead.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value greater or equal than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\\n     */\\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value strictly greater than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\\n     */\\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {lowerBound}, but with an array in memory.\\n     */\\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {upperBound}, but with an array in memory.\\n     */\\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes[] storage arr, uint256 pos) internal pure returns (StorageSlot.BytesSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytesSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(string[] storage arr, uint256 pos) internal pure returns (StorageSlot.StringSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getStringSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes[] memory arr, uint256 pos) internal pure returns (bytes memory res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(string[] memory arr, uint256 pos) internal pure returns (string memory res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(string[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Comparators.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to compare values.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Comparators {\\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a < b;\\n    }\\n\\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a > b;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Errors.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2²⁵⁶ + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\\n            // This is going to be our x_0 (and ε_0)\\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\\n            //              = ((x_n² + a) / (2 * x_n))² - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\\n            //              = (x_n² - a)² / (2 * x_n)²\\n            //              = ((x_n² - a) / (2 * x_n))²\\n            //              ≥ 0\\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\\n            //         = | ε_n² / (2 * x_n) |\\n            //         = ε_n² / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // ε_1 = ε_0² / | (2 * x_0) |\\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\\n            //     ≤ 2**(e-3) / 3\\n            //     ≤ 2**(e-3-log2(3))\\n            //     ≤ 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\\n            //         ≤ 2**(2*e-2*k) / 2**e\\n            //         ≤ 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\\n\\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Panic.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/SlotDerivation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/SlotDerivation.sol)\\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\\n * the solidity language / compiler.\\n *\\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\\n *\\n * Example usage:\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using StorageSlot for bytes32;\\n *     using SlotDerivation for bytes32;\\n *\\n *     // Declare a namespace\\n *     string private constant _NAMESPACE = \\\"<namespace>\\\"; // eg. OpenZeppelin.Slot\\n *\\n *     function setValueInNamespace(uint256 key, address newValue) internal {\\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\\n *     }\\n *\\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {StorageSlot}.\\n *\\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\\n * upgrade safety will ignore the slots accessed through this library.\\n *\\n * _Available since v5.1._\\n */\\nlibrary SlotDerivation {\\n    /**\\n     * @dev Derive an ERC-7201 slot from a string (namespace).\\n     */\\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\\n            slot := and(keccak256(0x00, 0x20), not(0xff))\\n        }\\n    }\\n\\n    /**\\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\\n     */\\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\\n        unchecked {\\n            return bytes32(uint256(slot) + pos);\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\\n     */\\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, slot)\\n            result := keccak256(0x00, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, and(key, shr(96, not(0))))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, iszero(iszero(key)))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Arrays} from \\\"../Arrays.sol\\\";\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n * - Set can be cleared (all elements removed) in O(n).\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * The following types are supported:\\n *\\n * - `bytes32` (`Bytes32Set`) since v3.3.0\\n * - `address` (`AddressSet`) since v3.3.0\\n * - `uint256` (`UintSet`) since v3.3.0\\n * - `string` (`StringSet`) since v5.4.0\\n * - `bytes` (`BytesSet`) since v5.4.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: This function has an unbounded cost that scales with set size. Developers should keep in mind that\\n     * using it may render the function uncallable if the set grows to the point where clearing it consumes too much\\n     * gas to fit in a block.\\n     */\\n    function _clear(Set storage set) private {\\n        uint256 len = _length(set);\\n        for (uint256 i = 0; i < len; ++i) {\\n            delete set._positions[set._values[i]];\\n        }\\n        Arrays.unsafeSetLength(set._values, 0);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set, uint256 start, uint256 end) private view returns (bytes32[] memory) {\\n        unchecked {\\n            end = Math.min(end, _length(set));\\n            start = Math.min(start, end);\\n\\n            uint256 len = end - start;\\n            bytes32[] memory result = new bytes32[](len);\\n            for (uint256 i = 0; i < len; ++i) {\\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\\n            }\\n            return result;\\n        }\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(Bytes32Set storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner, start, end);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(AddressSet storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner, start, end);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(UintSet storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner, start, end);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    struct StringSet {\\n        // Storage of set values\\n        string[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(string value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(StringSet storage set, string memory value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(StringSet storage set, string memory value) internal returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                string memory lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(StringSet storage set) internal {\\n        uint256 len = length(set);\\n        for (uint256 i = 0; i < len; ++i) {\\n            delete set._positions[set._values[i]];\\n        }\\n        Arrays.unsafeSetLength(set._values, 0);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(StringSet storage set, string memory value) internal view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(StringSet storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(StringSet storage set, uint256 index) internal view returns (string memory) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(StringSet storage set) internal view returns (string[] memory) {\\n        return set._values;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(StringSet storage set, uint256 start, uint256 end) internal view returns (string[] memory) {\\n        unchecked {\\n            end = Math.min(end, length(set));\\n            start = Math.min(start, end);\\n\\n            uint256 len = end - start;\\n            string[] memory result = new string[](len);\\n            for (uint256 i = 0; i < len; ++i) {\\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\\n            }\\n            return result;\\n        }\\n    }\\n\\n    struct BytesSet {\\n        // Storage of set values\\n        bytes[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(BytesSet storage set, bytes memory value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(BytesSet storage set, bytes memory value) internal returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes memory lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(BytesSet storage set) internal {\\n        uint256 len = length(set);\\n        for (uint256 i = 0; i < len; ++i) {\\n            delete set._positions[set._values[i]];\\n        }\\n        Arrays.unsafeSetLength(set._values, 0);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(BytesSet storage set, bytes memory value) internal view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(BytesSet storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(BytesSet storage set, uint256 index) internal view returns (bytes memory) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(BytesSet storage set) internal view returns (bytes[] memory) {\\n        return set._values;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(BytesSet storage set, uint256 start, uint256 end) internal view returns (bytes[] memory) {\\n        unchecked {\\n            end = Math.min(end, length(set));\\n            start = Math.min(start, end);\\n\\n            uint256 len = end - start;\\n            bytes[] memory result = new bytes[](len);\\n            for (uint256 i = 0; i < len; ++i) {\\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\\n            }\\n            return result;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/interface/IBscPledgeOracle.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBscPledgeOracle {\\r\\n    function getPrice(address token) external view returns (uint256);\\r\\n\\r\\n    function getPrices(uint256[] calldata assets) external view returns (uint256[] memory);\\r\\n    \\r\\n    function getUnderlyingPrice(uint256 cToken) external view returns (uint256);\\r\\n}\"\n    },\n    \"contracts/interface/IDebtToken.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDebtToken {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function mint(address account,uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(address from,uint256 amount) external returns (bool);\\r\\n}\\r\\n\"\n    },\n    \"contracts/interface/IUniswapV2Router02.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/library/SafeTransfer.sol\": {\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract SafeTransfer{\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n    event Redeem(address indexed recieptor,address indexed token,uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice  transfers money to the pool\\r\\n     * @dev function to transfer\\r\\n     * @param token of address\\r\\n     * @param amount of amount\\r\\n     * @return return amount\\r\\n     */\\r\\n    function getPayableAmount(address token,uint256 amount) internal returns (uint256) {\\r\\n        if (token == address(0)){\\r\\n            amount = msg.value;\\r\\n        }else if (amount > 0){\\r\\n            IERC20 oToken = IERC20(token);\\r\\n            oToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev An auxiliary foundation which transter amount stake coins to recieptor.\\r\\n     * @param recieptor account.\\r\\n     * @param token address\\r\\n     * @param amount redeem amount.\\r\\n     */\\r\\n    function _redeem(address payable recieptor,address token,uint256 amount) internal{\\r\\n        if (token == address(0)){\\r\\n            recieptor.transfer(amount);\\r\\n        }else{\\r\\n            IERC20 oToken = IERC20(token);\\r\\n            oToken.safeTransfer(recieptor,amount);\\r\\n        }\\r\\n        emit Redeem(recieptor,token,amount);\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/multiSignature/multiSignature.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./multiSignatureClient.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title whiteListAddress - 白名单地址管理库\\r\\n * @dev 提供地址数组的增删查功能，用于管理签名者白名单\\r\\n */\\r\\nlibrary whiteListAddress {\\r\\n    //add whiteList\\r\\n    function addWhiteListAddress(address[] storage whiteList,address temp) internal {\\r\\n        if(!isEligibleAddress(whiteList,temp)){\\r\\n            whiteList.push(temp);\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n     * @dev 从白名单中移除地址\\r\\n     * @param whiteList 白名单地址数组（存储引用）\\r\\n     * @param temp 要移除的地址\\r\\n     * @return bool 返回是否成功移除\\r\\n     * @notice 使用交换删除法，将最后一个元素移到被删除位置，然后删除最后一个元素\\r\\n     */\\r\\n    function removeWhiteListAddress(address[] storage whiteList,address temp) internal returns (bool) {\\r\\n        uint256 len=whiteList.length;\\r\\n        uint256 i=0;\\r\\n        for (;i<len;i++){\\r\\n            if(whiteList[i]==temp){\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if(i<len){\\r\\n            // 如果删除的不是最后一个元素，将最后一个元素移到被删除位置\\r\\n            if(i<len-1){\\r\\n                whiteList[i]=whiteList[len-1];\\r\\n            }\\r\\n            // 删除最后一个元素\\r\\n            whiteList.pop();\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    //check if the address is in the whiteList\\r\\n    function isEligibleAddress(address[] storage whiteList,address temp) internal view returns (bool) {\\r\\n        uint256 len=whiteList.length;\\r\\n        for (uint256 i=0;i<len;i++){\\r\\n            if(whiteList[i]==temp){\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title multiSignature - 多签名合约\\r\\n * @dev 实现多签名治理机制，要求多个签名者同意才能执行重要操作\\r\\n * @notice 这是整个系统的核心治理合约，所有重要操作都需要通过多签名验证\\r\\n */\\r\\ncontract multiSignature is multiSignatureClient {\\r\\n\\r\\n    uint256 private constant defaultIndex=0; // 默认申请索引\\r\\n    using whiteListAddress for address[];  // 使用白名单地址库\\r\\n    address[] public signatureOwners; // 签名者地址数组\\r\\n    uint256 public threshold; // 签名阈值（需要多少个签名才能通过）\\r\\n    \\r\\n    struct signatureInfo{\\r\\n        address applicant; // 申请人地址\\r\\n        address[] signatures; // 签名者列表\\r\\n    }\\r\\n    // 消息哈希 => 签名信息数组的映射\\r\\n    mapping(bytes32=>signatureInfo[]) signatureMap;\\r\\n\\r\\n    event TransferOwner(address indexed sender, address indexed oldOwner, address indexed newOwner);\\r\\n    event CreateApplication(address indexed from,address indexed to,bytes32 indexed msgHash);\\r\\n    /**\\r\\n     * @dev 签名申请事件\\r\\n     * @param from 签名者地址\\r\\n     * @param msgHash 消息哈希\\r\\n     * @param index 申请索引\\r\\n     */\\r\\n    event SignApplication(address indexed from, bytes32 indexed msgHash,uint256 index); \\r\\n    event RevokeApplication(address indexed from,bytes32 indexed msgHash,uint256 index);\\r\\n\\r\\n    /**\\r\\n     * @dev 构造函数\\r\\n     * @param owners 初始签名者地址数组\\r\\n     * @param limitedSignNum 签名阈值\\r\\n     * @notice 签名者数量必须大于等于签名阈值\\r\\n     */\\r\\n    constructor(address[] memory owners, uint256 limitedSignNum) multiSignatureClient(address(this)) {\\r\\n        require(owners.length>=limitedSignNum,\\\"Multiple Signature : Signature threshold is greater than owners' length!\\\");\\r\\n        signatureOwners=owners;\\r\\n        threshold=limitedSignNum;\\r\\n    }\\r\\n    /**\\r\\n     * @dev 转移签名者所有权\\r\\n     * @param index 要替换的签名者在数组中的索引\\r\\n     * @param newOwner 新的签名者地址\\r\\n     * @notice 只有现有签名者且通过多签名验证才能调用\\r\\n     */\\r\\n    function transferOwner(uint256 index, address newOwner) public onlyOwner validCall{\\r\\n        require(index<signatureOwners.length,\\\"Multiple Signature : Owner index is overflow!\\\");\\r\\n        emit TransferOwner(msg.sender,signatureOwners[index],newOwner);\\r\\n        signatureOwners[index]=newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 创建多签名申请\\r\\n     * @param to 申请目标合约地址\\r\\n     * @return uint256 返回申请的索引\\r\\n     * @notice 任何人都可以创建申请，但需要足够的签名才能生效\\r\\n     */\\r\\n    function createApplication(address to) external returns (uint256) {\\r\\n        // 生成唯一的消息哈希\\r\\n        bytes32 msgHash =getApplicationHash(msg.sender,to);\\r\\n        uint256 index=signatureMap[msgHash].length;\\r\\n        //创建新的签名消息，初始时签名数组为空\\r\\n        signatureMap[msgHash].push(signatureInfo(msg.sender,new address[](0)));\\r\\n        emit CreateApplication(msg.sender,to,msgHash);\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 对申请进行签名\\r\\n     * @param msghash 申请的消息哈希\\r\\n     * @notice 只有签名者可以调用，且会自动添加到签名列表中\\r\\n     *  === defaultIndex使用说明 ===\\r\\n     * 当前实现中总是使用defaultIndex(0)，表示：\\r\\n     * 1. 只对第一个申请进行签名（简化实现）\\r\\n     * 2. 一个msgHash在当前版本中只有一个有效申请\\r\\n     * 3. 未来可扩展为支持多个申请，用户可选择对哪个申请签名\\r\\n     */\\r\\n    function signApplication(bytes32 msghash) external onlyOwner validIndex(msghash,defaultIndex){\\r\\n        emit SignApplication(msg.sender,msghash,defaultIndex);\\r\\n        // 将签名者地址添加到该申请的签名列表中\\r\\n        signatureMap[msghash][defaultIndex].signatures.push(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 撤销对申请的签名\\r\\n     * @param msghash 申请的消息哈希\\r\\n     * @notice 只有已签名的签名者可以撤销自己的签名\\r\\n     * 同signApplication，当前只支持对索引0的申请撤销签名\\r\\n     * 这与signApplication保持一致，确保操作的对称性\\r\\n     */\\r\\n    function revokeApplication(bytes32 msghash)external onlyOwner validIndex(msghash,defaultIndex){\\r\\n        emit RevokeApplication(msg.sender,msghash,defaultIndex);\\r\\n        signatureMap[msghash][defaultIndex].signatures.removeWhiteListAddress(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 获取有效的签名索引\\r\\n     * @param msghash 消息哈希\\r\\n     * @param lastIndex 上次检查的索引\\r\\n     * @return uint256 返回达到阈值的申请索引+1，如果没有则返回0\\r\\n     * @notice 这是多签名验证的核心函数，由客户端合约调用\\r\\n     */\\r\\n   function getValidSignature(bytes32 msghash,uint256 lastIndex) external view returns (uint256){\\r\\n        signatureInfo[] storage signInfo=signatureMap[msghash];\\r\\n         // 从lastIndex开始检查每个申请\\r\\n        for (uint256 i=lastIndex;i<signInfo.length;i++){\\r\\n            // 如果签名数量达到阈值，返回索引+1\\r\\n            if(signInfo[i].signatures.length>=threshold){\\r\\n                return i+1;\\r\\n            }\\r\\n        }\\r\\n        return 0;// 没有达到阈值的申请\\r\\n   }\\r\\n\\r\\n    /**\\r\\n     * @dev 生成申请哈希\\r\\n     * @param from 申请发起者地址\\r\\n     * @param to 申请目标地址\\r\\n     * @return bytes32 生成的消息哈希\\r\\n     * @notice 哈希由发起者和目标地址组成，确保唯一性\\r\\n     */\\r\\n    function getApplicationHash(address from,address to) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(from,to));\\r\\n    }\\r\\n    /**\\r\\n     * @dev 获取申请信息\\r\\n     * @param msghash 消息哈希\\r\\n     * @param index 申请索引\\r\\n     * @return address 申请者地址\\r\\n     * @return address[] 签名者地址数组\\r\\n     */\\r\\n    function getApplicationInfo(bytes32 msghash,uint256 index) validIndex(msghash,index) public view returns (address,address[] memory){\\r\\n        signatureInfo memory info=signatureMap[msghash][index];\\r\\n        return (info.applicant,info.signatures);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 获取某个消息哈希的申请数量\\r\\n     * @param msghash 消息哈希\\r\\n     * @return uint256 申请数量\\r\\n     */\\r\\n    function getApplicationCount(bytes32 msghash) public view returns (uint256){\\r\\n        return signatureMap[msghash].length;\\r\\n    }\\r\\n\\r\\n\\r\\n    // === 修饰符 ===\\r\\n    /**\\r\\n     * @dev 只有签名者可以调用的修饰符\\r\\n     * @notice 检查调用者是否在签名者白名单中\\r\\n     */\\r\\n    modifier onlyOwner{\\r\\n        require(signatureOwners.isEligibleAddress(msg.sender),\\\"Multiple Signature : caller is not in the ownerList!\\\");\\r\\n        _;\\r\\n    }\\r\\n    /**\\r\\n     * @dev 验证申请索引是否有效的修饰符\\r\\n     * @param msghash 消息哈希\\r\\n     * @param index 申请索引\\r\\n     * @notice 确保索引不会越界\\r\\n     */\\r\\n    modifier validIndex(bytes32 msghash,uint256 index){\\r\\n        require(index<signatureMap[msghash].length,\\\"Multiple Signature : Message index is overflow!\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/multiSignature/multiSignatureClient.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IMultiSignature - 多签名合约接口\\r\\n * @dev 定义了多签名合约需要实现的核心功能接口\\r\\n */\\r\\ninterface IMultiSignature {\\r\\n    /**\\r\\n     * @dev 获取有效签名索引\\r\\n     * @param msghash 消息哈希\\r\\n     * @param lastIndex 上次检查的索引\\r\\n     * @return uint256 返回有效的签名索引，如果没有达到阈值则返回0\\r\\n     */\\r\\n    function getValidSignature(bytes32 msghash, uint256 lastIndex) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title multiSignatureClient - 多签名客户端合约\\r\\n * @dev 为其他合约提供多签名验证功能的基础合约\\r\\n * @notice 任何需要多签名保护的合约都应该继承此合约，并使用validCall修饰符\\r\\n * \\r\\n * === 工作原理 ===\\r\\n * 1. 客户端合约继承此合约，获得多签名验证能力\\r\\n * 2. 重要函数使用validCall修饰符进行保护\\r\\n * 3. 调用时会自动检查对应的多签名申请是否已获得足够签名\\r\\n * 4. 只有通过多签名验证的调用才能执行\\r\\n */\\r\\ncontract multiSignatureClient {\\r\\n    uint256 public constant multiSignaturePosition = uint256(keccak256(\\\"org.multiSignature.storage\\\"));// 多签名合约地址的存储位置\\r\\n    uint256 private constant defaultIndex = 0;// 默认索引\\r\\n\\r\\n    /**\\r\\n     * @dev 构造函数\\r\\n     * @param multiSignature 多签名合约地址\\r\\n     * @notice 将多签名合约地址保存到固定的存储位置\\r\\n     */\\r\\n    constructor(address multiSignature) {\\r\\n        require(multiSignature != address(0), \\\"multiSignatureClient : Multiple signature contract address is zero!\\\");\\r\\n        saveValue(multiSignaturePosition, uint256(uint160(multiSignature)));\\r\\n    }\\r\\n\\r\\n    //从存储中读取多签名合约地址\\r\\n    function getMultiSignatureAddress() public view returns (address){\\r\\n        return address(uint160(getValue(multiSignaturePosition)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 多签名验证修饰符\\r\\n     * @notice 使用此修饰符的函数只有在多签名验证通过后才能执行\\r\\n     * @notice 这是整个多签名系统的核心验证机制\\r\\n     */\\r\\n    modifier validCall(){\\r\\n        checkMultiSignature();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 检查多签名验证\\r\\n     * @notice 核心验证逻辑：\\r\\n     * 1. 生成消息哈希（调用者地址 + 当前合约地址）\\r\\n     * 2. 向多签名合约查询该哈希是否有足够的签名\\r\\n     * 3. 如果没有足够签名，交易将回滚\\r\\n     */\\r\\n    function checkMultiSignature() internal view {\\r\\n        uint256 value;\\r\\n        // 获取调用的以太币值（当前未使用，为未来扩展预留）\\r\\n        assembly {\\r\\n            value:=callvalue()\\r\\n        }\\r\\n        // 生成唯一的消息哈希：调用者地址 + 目标合约地址\\r\\n        // 这确保了每个(调用者, 目标合约)组合都有唯一的哈希\\r\\n        bytes32 msghash = keccak256(abi.encodePacked(msg.sender, address(this)));\\r\\n        // 获取多签名合约地址\\r\\n        address multiSign=getMultiSignatureAddress();\\r\\n\\r\\n        // 查询多签名合约，检查是否有足够的签名\\r\\n        // getValidSignature的实现逻辑（在multiSignature.sol中）：\\r\\n        // 1. 遍历该msgHash对应的所有申请\\r\\n        // 2. 检查每个申请的签名数量是否 >= threshold\\r\\n        // 3. 如果找到达到阈值的申请，返回其索引+1（确保非零）\\r\\n        // 4. 如果没有找到，返回0\\r\\n        uint256 newIndex=IMultiSignature(multiSign).getValidSignature(msghash,defaultIndex);\\r\\n        require(newIndex>defaultIndex,\\\"multiSignatureClient : This tx is not aprroved\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 保存值到指定存储位置\\r\\n     * @param position 存储位置（使用keccak256生成的唯一位置）\\r\\n     * @param value 要保存的值\\r\\n     * @notice 使用内联汇编直接操作存储，提高gas效率\\r\\n     */\\r\\n    function saveValue(uint256 position, uint256 value) internal {\\r\\n        assembly {\\r\\n            sstore(position, value)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 从指定存储位置读取值\\r\\n     * @param position 存储位置（使用keccak256生成的唯一位置）\\r\\n     * @return value 读取的值\\r\\n     * @notice 使用内联汇编直接操作存储，提高gas效率\\r\\n     */\\r\\n    function getValue(uint256 position) internal view returns (uint256 value) {\\r\\n        assembly {\\r\\n            value := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n}\"\n    },\n    \"contracts/pledage/AddressPrivileges.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../multiSignature/multiSignatureClient.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AddressPrivileges - 地址权限管理合约\\r\\n * @dev 基于OpenZeppelin的EnumerableSet实现高效的地址权限管理\\r\\n * @notice 此合约专门用于管理铸币者(Minter)权限，支持添加、删除、查询和遍历操作\\r\\n * \\r\\n * === EnumerableSet核心优势 ===\\r\\n * 1. **去重性**: 自动确保地址不会重复添加\\r\\n * 2. **高效查询**: O(1)时间复杂度检查地址是否存在\\r\\n * 3. **可遍历**: 支持通过索引访问集合中的元素\\r\\n * 4. **安全删除**: 删除元素时自动重新排列，避免空隙\\r\\n * 5. **Gas优化**: 相比数组+映射的组合，更节省gas\\r\\n * \\r\\n * === 与普通数组的对比 ===\\r\\n * 普通数组approach:\\r\\n * - 需要额外映射检查重复: mapping(address => bool) \\r\\n * - 删除元素复杂，需要移动元素或留空隙\\r\\n * - 查询是否存在需要遍历数组 O(n)\\r\\n * \\r\\n * EnumerableSet approach:\\r\\n * - 内部自动去重，无需额外映射\\r\\n * - 删除时自动优化存储结构\\r\\n * - 查询时间复杂度 O(1)\\r\\n */\\r\\ncontract AddressPrivileges is multiSignatureClient{\\r\\n\\r\\n    constructor(address multiSignature) multiSignatureClient(multiSignature){\\r\\n    }\\r\\n\\r\\n    // 引入EnumerableSet库的AddressSet类型\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    // 私有的铸币者地址集合\\r\\n    // EnumerableSet.AddressSet内部结构：\\r\\n    // - Set._inner: bytes32集合存储地址\\r\\n    // - Set._indexes: 映射地址到索引的关系\\r\\n    // 这种设计既支持快速查找，又支持索引遍历\\r\\n    EnumerableSet.AddressSet private _minters;\\r\\n\\r\\n    /**\\r\\n     * @notice 添加铸币者地址\\r\\n     * @dev 使用EnumerableSet.add()确保地址唯一性\\r\\n     * @param _addMinter 要添加的铸币者地址\\r\\n     * @return bool 添加成功返回true，地址已存在返回false\\r\\n     * \\r\\n     * === EnumerableSet.add()内部逻辑 ===\\r\\n     * 1. 检查元素是否已存在\\r\\n     * 2. 如果不存在，添加到内部数组\\r\\n     * 3. 更新索引映射\\r\\n     * 4. 返回操作结果\\r\\n     */\\r\\n    function addMinter(address _addMinter) public validCall returns (bool){\\r\\n        require(_addMinter!=address(0),\\\"Token : _addMinter address is zero!\\\");\\r\\n        return EnumerableSet.add(_minters,_addMinter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice 删除铸币者地址\\r\\n     * @dev 使用EnumerableSet.remove()安全删除地址\\r\\n     * @param _delMinter 要删除的铸币者地址\\r\\n     * @return bool 删除成功返回true，地址不存在返回false\\r\\n     * \\r\\n     * === EnumerableSet.remove()内部逻辑 ===\\r\\n     * 1. 检查元素是否存在\\r\\n     * 2. 如果存在，将最后一个元素移到被删除位置\\r\\n     * 3. 删除最后一个元素\\r\\n     * 4. 更新索引映射\\r\\n     * 5. 返回操作结果\\r\\n     * 这种\\\"交换删除\\\"方式避免了数组中的空隙，保持存储紧凑\\r\\n     */\\r\\n    function delMinter(address _delMinter) public validCall returns (bool){\\r\\n        require(_delMinter!=address(0),\\\"Token : _delMinter address is zero!\\\");\\r\\n        return EnumerableSet.remove(_minters,_delMinter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice 获取铸币者列表长度\\r\\n     * @dev 直接返回EnumerableSet的长度\\r\\n     * @return uint256 铸币者总数\\r\\n     */\\r\\n    function getMinterLength() public view returns (uint256) {\\r\\n        return EnumerableSet.length(_minters);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice 检查地址是否为铸币者\\r\\n     * @dev 使用EnumerableSet.contains()进行O(1)查询\\r\\n     * @param account 要检查的地址\\r\\n     * @return bool 是铸币者返回true，否则返回false\\r\\n     */\\r\\n    function isMinter(address account) public view returns (bool){\\r\\n        return EnumerableSet.contains(_minters,account);\\r\\n    }\\r\\n\\r\\n     /**\\r\\n      * @notice 根据索引获取铸币者地址\\r\\n      * @dev 使用EnumerableSet.at()通过索引访问元素\\r\\n      * @param _index 索引位置\\r\\n      * @return address 对应索引的铸币者地址\\r\\n      */\\r\\n    function getMinter(uint256 _index) public view returns (address) {\\r\\n        require(_index<getMinterLength()-1,\\\"Token : index out of bounds\\\");\\r\\n        return EnumerableSet.at(_minters,_index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 只有铸币者可以调用的修饰符\\r\\n     * @notice 使用isMinter()进行权限验证，利用EnumerableSet的高效查询\\r\\n     */\\r\\n    modifier onlyMinter(){\\r\\n        require(isMinter(msg.sender),\\\"Token: caller is not a minter!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\n    },\n    \"contracts/pledage/BscPledgeOracle.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../multiSignature/multiSignatureClient.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BscPledgeOracle - BSC质押协议价格预言机\\r\\n * @dev 混合价格预言机系统，支持Chainlink聚合器和手动价格设置\\r\\n * @notice 为Pledge系统提供可靠的价格数据，支持多种资产的价格查询\\r\\n * \\r\\n * === 核心设计特性 ===\\r\\n * 1. **双重价格源**：Chainlink聚合器（优先） + 手动设置价格（备用）\\r\\n * 2. **精度统一**：所有价格统一转换为18位小数精度\\r\\n * 3. **多签名控制**：价格设置和聚合器配置需要多签名验证\\r\\n * 4. **灵活配置**：支持动态添加/修改资产的价格源\\r\\n * \\r\\n * === 价格查询优先级 ===\\r\\n * 1. 如果配置了Chainlink聚合器 → 使用链上实时价格\\r\\n * 2. 如果没有聚合器 → 使用手动设置的价格\\r\\n * 3. 如果都没有 → 返回0（表示价格不可用）\\r\\n * \\r\\n * === 精度处理逻辑 ===\\r\\n * - Chainlink价格通常是8位小数（如BTC/USD $50000.12345678）\\r\\n * - 本系统统一使用18位小数（以太坊标准）\\r\\n * - 自动进行精度转换以确保计算准确性\\r\\n */\\r\\ncontract BscPledgeOracle is multiSignatureClient {\\r\\n\\r\\n    /**\\r\\n     * @dev 资产到Chainlink聚合器的映射\\r\\n     * key: 资产标识符（地址转uint256或自定义ID）\\r\\n     * value: Chainlink聚合器接口\\r\\n     */\\r\\n    mapping(uint256 => AggregatorV3Interface) internal assetsMap;\\r\\n\\r\\n    /**\\r\\n     * @dev 资产精度映射\\r\\n     * key: 资产标识符\\r\\n     * value: 该资产的小数位数（如USDC=6, WETH=18）\\r\\n     */\\r\\n    mapping(uint256 => uint256) internal decimalsMap;\\r\\n\\r\\n    /**\\r\\n     * @dev 手动设置的价格映射（备用价格源）\\r\\n     * key: 资产标识符\\r\\n     * value: 手动设置的价格（18位小数精度）\\r\\n     */\\r\\n    mapping(uint256 => uint256) internal pricesMap;\\r\\n\\r\\n    /**\\r\\n     * @dev 全局精度除数，用于Chainlink价格调整\\r\\n     * 默认为1，可通过setDecimals调整\\r\\n     */\\r\\n    uint256 internal decimals = 1;\\r\\n\\r\\n    constructor(address _multiSignature) multiSignatureClient(_multiSignature) {\\r\\n         // === BSC测试网聚合器地址示例 ===\\r\\n        // 这些地址在实际部署时可以启用，配置常用资产的Chainlink聚合器\\r\\n        \\r\\n        // BNB/USD聚合器\\r\\n        // assetsMap[uint256(0x0000000000000000000000000000000000000000)] = AggregatorV3Interface(0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526);\\r\\n        \\r\\n        // DAI/USD聚合器  \\r\\n        // assetsMap[uint256(0xf2bDB4ba16b7862A1bf0BE03CD5eE25147d7F096)] = AggregatorV3Interface(0xE4eE17114774713d2De0eC0f035d4F7665fc025D);\\r\\n        \\r\\n        // BTC/USD聚合器\\r\\n        // assetsMap[uint256(0xF592aa48875a5FDE73Ba64B527477849C73787ad)] = AggregatorV3Interface(0x5741306c21795FdCBb9b265Ea0255F499DFe515C);\\r\\n        \\r\\n        // BUSD/USD聚合器\\r\\n        // assetsMap[uint256(0xDc6dF65b2fA0322394a8af628Ad25Be7D7F413c2)] = AggregatorV3Interface(0x9331b55D9830EF609A2aBCfAc0FBCE050A52fdEa);\\r\\n\\r\\n        // === 对应的资产精度配置 ===\\r\\n        // decimalsMap[uint256(0x0000000000000000000000000000000000000000)] = 18; // BNB\\r\\n        // decimalsMap[uint256(0xf2bDB4ba16b7862A1bf0BE03CD5eE25147d7F096)] = 18; // DAI\\r\\n        // decimalsMap[uint256(0xF592aa48875a5FDE73Ba64B527477849C73787ad)] = 18; // BTC\\r\\n        // decimalsMap[uint256(0xDc6dF65b2fA0322394a8af628Ad25Be7D7F413c2)] = 18; // BUSD\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice 设置全局精度参数\\r\\n     * @dev 用于调整Chainlink价格的精度转换\\r\\n     * @param newDecimals 新的精度除数\\r\\n     * \\r\\n     * === 使用场景 ===\\r\\n     * - Chainlink聚合器返回8位小数，设置为1e8进行标准化\\r\\n     * - 特殊情况下需要全局调整价格精度\\r\\n     */\\r\\n    function setDecimals(uint256 newDecimals) public validCall{\\r\\n        decimals=newDecimals;\\r\\n    }\\r\\n    /**\\r\\n     * @notice 批量设置资产价格\\r\\n     * @dev 手动设置多个资产的价格（备用价格源）\\r\\n     * @param assets 资产ID数组\\r\\n     * @param prices 对应的价格数组（18位小数精度）\\r\\n     */\\r\\n    function setPrices(uint256[] memory assets, uint256[] memory prices) external validCall{\\r\\n        require(assets.length==prices.length,\\\"input arrays length are not equal\\\");\\r\\n        uint256 len=assets.length;\\r\\n        for (uint256 i=0;i<len;i++){\\r\\n            pricesMap[assets[i]]=prices[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // === 价格获取流程 ===\\r\\n    /**\\r\\n     * @notice 批量获取资产价格\\r\\n     * @dev 返回多个资产的当前价格\\r\\n     * @param assets 资产ID数组\\r\\n     * @return uint256[] 对应的价格数组（18位小数精度）\\r\\n     */\\r\\n    function getPrices(uint256[] memory assets) external view returns (uint256[] memory){\\r\\n        uint256 len=assets.length;\\r\\n        uint256[] memory prices=new uint256[](len);\\r\\n        for (uint256 i=0;i<len;i++){\\r\\n            prices[i]=getUnderlyingPrice(assets[i]);\\r\\n        }\\r\\n        return prices;\\r\\n    }\\r\\n    /**\\r\\n     * @notice 获取单个资产价格（通过地址）\\r\\n     * @dev 将资产地址转换为uint256后获取价格\\r\\n     * @param asset 资产合约地址\\r\\n     * @return uint256 资产价格（18位小数精度）\\r\\n     */\\r\\n    function getPrice(address asset) public view returns (uint256){\\r\\n        return getUnderlyingPrice(uint256(uint160(asset)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice 获取单个资产价格（核心函数）\\r\\n     * @dev 实现双重价格源的价格获取逻辑\\r\\n     * @param underlying 资产标识符（地址转uint256或自定义ID）\\r\\n     * @return uint256 资产价格（18位小数精度）\\r\\n     */\\r\\n    function getUnderlyingPrice(uint256 underlying) public view returns (uint256){\\r\\n        //获取配置的chainlink聚合器\\r\\n        AggregatorV3Interface assetsPrice=assetsMap[underlying];\\r\\n        //优先使用chainlink聚合器价格\\r\\n        if (address(assetsPrice)!=address(0)){\\r\\n            // 调用Chainlink聚合器获取最新价格数据\\r\\n            (,int256 price,,,) = assetsPrice.latestRoundData();\\r\\n            // 根据资产精度进行转换\\r\\n            uint256 tokenDecimals=decimalsMap[underlying];\\r\\n            if (tokenDecimals<18){\\r\\n                // 例如：USDC(6位) → 18位\\r\\n                // price: $1.000000 (8位小数) → 需要补足到18位\\r\\n                return uint256(price)/decimals*(10**(18-tokenDecimals));\\r\\n            }else if (tokenDecimals>18){\\r\\n                // 理论情况：如果代币精度超过18位 → 需要降低精度\\r\\n                return uint256(price)/decimals/(10**(tokenDecimals-18));\\r\\n            }else{\\r\\n                // 如果精度正好是18位 → 直接除以精度\\r\\n                return uint256(price)/decimals;\\r\\n            }\\r\\n        }else{\\r\\n            // 如果没有聚合器 → 返回手动设置的价格\\r\\n            return pricesMap[underlying];\\r\\n        }\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @notice 设置单个资产的手动价格（通过地址）\\r\\n     * @dev 为资产设置备用价格\\r\\n     * @param asset 资产合约地址\\r\\n     * @param price 价格值（18位小数精度）\\r\\n     */\\r\\n    function setPrice(address asset,uint256 price) public validCall {\\r\\n        pricesMap[uint256(uint160(asset))] = price;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice 设置单个资产的手动价格（通过ID）\\r\\n     * @dev 为资产设置备用价格\\r\\n     * @param underlying 资产标识符\\r\\n     * @param price 价格值（18位小数精度）\\r\\n     */\\r\\n    function setUnderlyingPrice(uint256 underlying,uint256 price) public validCall {\\r\\n        require(underlying>0 , \\\"underlying cannot be zero\\\");\\r\\n        pricesMap[underlying] = price;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice 设置资产的Chainlink聚合器（通过地址）\\r\\n     * @dev 为资产配置Chainlink价格源\\r\\n     * @param asset 资产合约地址\\r\\n     * @param aggregator Chainlink聚合器地址\\r\\n     * @param _decimals 资产的小数位数\\r\\n     */\\r\\n    function setAssetAggregator(address asset,address aggregator,uint256 _decimals) public validCall{\\r\\n        assetsMap[uint256(uint160(asset))]=AggregatorV3Interface(aggregator);\\r\\n        decimalsMap[uint256(uint160(asset))]=_decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice 设置资产的Chainlink聚合器（通过ID）\\r\\n     * @dev 为资产配置Chainlink价格源\\r\\n     * @param underlying 资产标识符\\r\\n     * @param aggregator Chainlink聚合器地址\\r\\n     * @param _decimals 资产的小数位数\\r\\n     */\\r\\n    function setUnderlyingAggregator(uint256 underlying,address aggregator,uint256 _decimals) public validCall {\\r\\n        require(underlying>0 , \\\"underlying cannot be zero\\\");\\r\\n        assetsMap[underlying] = AggregatorV3Interface(aggregator);\\r\\n        decimalsMap[underlying] = _decimals;\\r\\n    }\\r\\n    /**\\r\\n     * @notice 获取资产的聚合器信息（通过地址）\\r\\n     * @dev 查询资产配置的Chainlink聚合器和精度\\r\\n     * @param asset 资产合约地址\\r\\n     * @return address 聚合器地址\\r\\n     * @return uint256 资产精度\\r\\n     */\\r\\n    function getAssetsAggregator(address asset) public view returns (address,uint256) {\\r\\n        return (address(assetsMap[uint256(uint160(asset))]),decimalsMap[uint256(uint160(asset))]);\\r\\n    }\\r\\n\\r\\n     /**\\r\\n       * @notice 获取资产的聚合器信息（通过ID）\\r\\n       * @dev 查询资产配置的Chainlink聚合器和精度\\r\\n       * @param underlying 资产标识符\\r\\n       * @return address 聚合器地址\\r\\n       * @return uint256 资产精度\\r\\n       */\\r\\n    function getUnderlyingAggregator(uint256 underlying) public view returns (address,uint256) {\\r\\n        return (address(assetsMap[underlying]),decimalsMap[underlying]);\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/pledage/DebtToken.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./AddressPrivileges.sol\\\";\\r\\n\\r\\ncontract DebtToken is ERC20,AddressPrivileges {\\r\\n    \\r\\n    constructor(string memory _name, string memory _symbol,address multiSignature) \\r\\n    ERC20(_name,_symbol) \\r\\n    AddressPrivileges(multiSignature){\\r\\n    }\\r\\n\\r\\n    function mint (address _to, uint256 _amount) onlyMinter public returns(bool) {\\r\\n        _mint(_to,_amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burn (address _from, uint256 _amount) onlyMinter public returns(bool) {\\r\\n        _burn(_from,_amount);\\r\\n        return true;\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/pledage/PledgePool.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../library/SafeTransfer.sol\\\";\\n\\nimport \\\"../interface/IBscPledgeOracle.sol\\\";\\nimport \\\"../interface/IDebtToken.sol\\\";\\nimport \\\"../interface/IUniswapV2Router02.sol\\\";\\nimport \\\"../multiSignature/multiSignatureClient.sol\\\";\\n\\ncontract PledgePool is ReentrancyGuard,multiSignatureClient,SafeTransfer {\\n\\n    using Math for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    // 辅助函数：安全的数学运算\\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = a.tryAdd(b);\\n        require(success, \\\"SafeMath: addition overflow\\\");\\n        return result;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = a.trySub(b);\\n        require(success, \\\"SafeMath: subtraction overflow\\\");\\n        return result;\\n    }\\n\\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = a.tryMul(b);\\n        require(success, \\\"SafeMath: multiplication overflow\\\");\\n        return result;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = a.tryDiv(b);\\n        require(success, \\\"SafeMath: division overflow\\\");\\n        return result;\\n    }\\n    //default decimals\\n    uint256 constant internal calDecimals=1e18;\\n    //based on the decimals of the commission and interest\\n    uint256 constant internal baseDecimal=1e8;\\n    uint256 public minAmount = 100e18;\\n    //365days\\n    uint256 constant internal baseYear=365 days;\\n\\n    enum PoolState {\\n        MATCH, //匹配中 - 用户可以存款\\n        EXECUTION, //执行中 - 借贷生效，计息开始\\n        FINISH, //完成  - 正常到期结算\\n        LIQUIDATION, //清算 - 触发风险清算\\n        UNDONE //未完成- 异常状态，允许紧急提取\\n    }\\n    PoolState constant defaultChoice = PoolState.MATCH;\\n    //全局暂停\\n    bool public globalPaused =false;\\n    //pancake swap router UniSwapV2\\n    address public swapRouter;\\n    //receiving fee address \\n    address public feeAddress;\\n    //oracle address\\n    IBscPledgeOracle public oracle;\\n    //fee\\n    uint256 public lendFee;\\n    uint256 public borrowFee;\\n\\n    struct PoolBaseInfo {\\n        uint256 settleTime; //结算时间  开始计息的时间点\\n        uint256 endTime; //结束时间 贷款的期限\\n        uint256 interestRate; //池子的固定利率 单位是1e8 按年算\\n        uint256 maxSupply; //池子最大限额 比如100万 投资人最多往里面放100万资金\\n        uint256 lendSupply; //前出借资金总量 出借人存入的资金总和\\n        uint256 borrowSupply; //当前实际借出的抵押方代币数量\\n        uint256 martgageRate; //池的抵押率，单位是1e8\\n        address lendToken; //借款方借出代币地址（比如BUSD 稳定币）\\n        address borrowToken; //借款方抵押代币地址（比如BTC 抵押币）\\n        PoolState state; //池子状态 \\\"MATCH\\\" \\\"EXECUTION\\\" \\\"FINISH\\\" \\\"LIQUIDATION\\\" \\\"UNDONE\\\"\\n        IDebtToken spCoin; //sp_token的ERC20 地址 比如（spBUSD_1..）供应方凭证\\n        IDebtToken jpCoin; //jp_token的ERC20 地址 比如（jpBTC_1）  抵押凭证\\n        uint256 autoLiquidateThreshold; //自动清算阈值\\n    }\\n\\n    //total pool base info\\n    PoolBaseInfo[] public poolBaseInfos;\\n\\n    //每个池的数据信息\\n    struct PoolDataInfo {\\n        uint256 settleAmountLend;       // 结算时的实际出借金额\\n        uint256 settleAmountBorrow;     // 结算时的实际借款金额\\n        uint256 finishAmountLend;       // 完成时的实际出借金额\\n        uint256 finishAmountBorrow;     // 完成时的实际借款金额\\n        uint256 liquidationAmountLend;   // 清算时的实际出借金额\\n        uint256 liquidationAmountBorrow; // 清算时的实际借款金额\\n    }\\n\\n    //total pool data info\\n    PoolDataInfo[] public poolDataInfos;\\n\\n    struct BorrowInfo {\\n        uint256 stakeAmount;        // 用户质押的抵押品金额（如BTC数量）\\n        uint256 refundAmount;       // 超额质押的退款金额\\n        bool hasNoRefund;             // 是否已退还超额质押：false=未退款，true=已退款\\n        bool hasNoClaim;              // 是否已认领JP代币：false=未认领，true=已认领\\n    }\\n\\n    //  {user.address : {pool.index : user.borrowInfo}}\\n    mapping(address =>mapping(uint256 => BorrowInfo)) public userBorrowInfo;\\n\\n    // 借款用户信息\\n    struct LendInfo {\\n        uint256 stakeAmount;          // 用户存入的出借资金金额（如USDC数量）\\n        uint256 refundAmount;         // 超额存款的退款金额\\n        bool hasNoRefund;             // 是否已退还超额存款：false=未退款，true=已退款\\n        bool hasNoClaim;              // 是否已认领SP代币：false=未认领，true=已认领\\n    }\\n\\n    //  {user.address : {pool.index : user.lendInfo}}\\n    mapping(address =>mapping(uint256 => LendInfo)) public userLendInfo;\\n\\n    // 事件\\n    // 存款借出事件，from是存款出借者地址，token是存入的代币地址，amount是借出的数量，mintAmount是生成的数量\\n    event DepositLend(address indexed from,address indexed token,uint256 amount,uint256 mintAmount);\\n    // 出借退还超额存款事件，from是存款出借者地址，token是存入的代币地址，refund是退款的数量\\n    event RefundLend(address indexed from,address indexed token,uint256 refund);\\n    // 出借领取SP代币事件，from是领取者地址，token是存入的代币地址，amount领取的SP代币数量\\n    event ClaimLend(address indexed from,address indexed token,uint256 amount);\\n    // 出借方提取存款事件，from是提取者地址，token是提取的代币地址，amount是提取的数量，burnAmount是销毁SP_coin的数量\\n    event WithdrawLend(address indexed from,address indexed token,uint256 amount,uint256 burnAmount);\\n    // 出借人紧急提取存款事件，from是提取者地址，token是提取的代币地址，amount是提取的数量\\n    event EmergencyLendWithdrawal(address indexed from,address indexed token,uint256 amount);\\n\\n    //---------------------------------------------\\n    // 借款方存款事件\\n    event DepositBorrow(address indexed from,address indexed token,uint256 amount,uint256 mintAmount);\\n    event RefundBorrow(address indexed from,address indexed token,uint256 refund);\\n    event ClaimBorrow(address indexed from, address indexed token, uint256 amount); \\n    // 提取借入事件，from是提取者地址，token是提取的代币地址，amount是提取的数量，burnAmount是销毁的数量\\n    event WithdrawBorrow(address indexed from,address indexed token,uint256 amount,uint256 burnAmount); \\n    event EmergencyBorrowWithdrawal(address indexed from, address indexed token, uint256 amount); \\n\\n    // 状态改变事件，_pid是池索引，oldState是旧状态，newState是新状态\\n    event StateChange(uint256 indexed _pid, uint256 indexed oldState, uint256 indexed newState);\\n    // 设置费用事件，newLendFee是新的借出费用，newBorrowFee是新的借入费用\\n    event SetFee(uint256 indexed newLendFee, uint256 indexed newBorrowFee);\\n    // 交换事件，fromCoin是交换前的币种地址，toCoin是交换后的币种地址，fromValue是交换前的数量，toValue是交换后的数量\\n    event Swap(address indexed fromCoin,address indexed toCoin,uint256 fromValue,uint256 toValue);\\n    event SetSwapRouterAddress(address indexed oldSwapAddress, address indexed newSwapAddress); \\n    event SetFeeAddress(address indexed oldFeeAddress, address indexed newFeeAddress);\\n    event SetMinAmount(uint256 indexed oldMinAmount, uint256 indexed newMinAmount);\\n\\n    constructor(\\n        address _oracle,\\n        address _swapRouter,\\n        address payable _feeAddress, \\n        address _multiSignature)\\n    multiSignatureClient(_multiSignature) {\\n        require(_oracle != address(0),\\\"PledgePool : oracle is zero address\\\");\\n        require(_swapRouter != address(0),\\\"PledgePool : swapRouter is zero address\\\");\\n        require(_feeAddress != address(0),\\\"PledgePool : feeAddress is zero address\\\");\\n        oracle=IBscPledgeOracle(_oracle);\\n        swapRouter=_swapRouter;\\n        feeAddress=_feeAddress;\\n        lendFee=0;\\n        borrowFee=0;\\n    }\\n\\n    function setFee(uint256 _lendFee,uint256 _borrowFee) validCall external {\\n        lendFee=_lendFee;\\n        borrowFee=_borrowFee;\\n        emit SetFee(_lendFee,_borrowFee);\\n    }\\n\\n    function setSwapRouter(address _swapRouter) validCall external {\\n        require(_swapRouter != address(0),\\\"PledgePool : swapRouter is zero address\\\");\\n        emit SetSwapRouterAddress(swapRouter,_swapRouter);\\n        swapRouter=_swapRouter;\\n    }\\n\\n    /**\\n     * @dev Set up the address to receive the handling fee\\n     * @notice Only allow administrators to operate\\n     */\\n    function setFeeAddress(address _feeAddress) validCall external {\\n        require(_feeAddress != address(0),\\\"PledgePool : feeAddress is zero address\\\");\\n        emit SetFeeAddress(feeAddress,_feeAddress);\\n        feeAddress=_feeAddress;\\n    }\\n\\n    function setMinAmount(uint256 _minAmount) validCall external {\\n        require(_minAmount > 0,\\\"PledgePool : minAmount is zero\\\");\\n        emit SetMinAmount(minAmount,_minAmount);\\n        minAmount=_minAmount;\\n    }\\n\\n    \\n    function PoolLength() external view returns (uint256) {\\n        return poolBaseInfos.length;\\n    }\\n    /**\\n     * @dev 创建一个新的借贷池。函数接收一系列参数，\\n     * 包括结算时间、结束时间、利率、最大供应量、抵押率、存入代币、借出代币、SP代币、JP代币和自动清算阈值。\\n     *  Can only be called by the owner.\\n     */\\n    function createPool(uint256 _settleTime,uint256 _endTime,\\n        uint256 _interestRate,uint256 _maxSupply,uint256 _martgageRate,\\n        address _lendToken,address _borrowToken,address _spToken,\\n        address _jpToken,uint256 _autoLiquidateThreshold) validCall public  {\\n        //需要结束时间大于结算时间\\n        require(_endTime > _settleTime,\\\"createPool : endTime must be greater than settleTime\\\");\\n        require(_jpToken != address(0),\\\"createPool : jpToken is zero address\\\");\\n        require(_spToken!= address(0),\\\"createPool : spToken is zero address\\\");\\n\\n        poolBaseInfos.push(PoolBaseInfo({\\n            settleTime: _settleTime,\\n            endTime: _endTime,\\n            interestRate: _interestRate,\\n            maxSupply: _maxSupply,\\n            lendSupply: 0,\\n            borrowSupply: 0,\\n            martgageRate: _martgageRate,\\n            lendToken: _lendToken,\\n            borrowToken: _borrowToken,\\n            state: defaultChoice,\\n            spCoin: IDebtToken(_spToken),\\n            jpCoin: IDebtToken(_jpToken),\\n            autoLiquidateThreshold: _autoLiquidateThreshold\\n        }));\\n        //推入池数据信息\\n        poolDataInfos.push(PoolDataInfo({\\n            settleAmountLend: 0,\\n            settleAmountBorrow: 0,\\n            finishAmountLend: 0,\\n            finishAmountBorrow: 0,\\n            liquidationAmountLend: 0,\\n            liquidationAmountBorrow: 0\\n        }));\\n    }\\n\\n    function getPoolState(uint256 _pid) public view returns (uint256){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        return uint256(pool.state);\\n    }\\n\\n    /**\\n     * @dev 出借人执行存款操作，将资金存入借贷池\\n     * @notice 池状态必须为MATCH\\n     * @param _pid 是池索引\\n     * | 函数 | 状态要求 | 时间要求 | 操作类型 | 代币处理 | 使用场景 |\\n     * | `depositLend` | MATCH | 结算前 | 存入资金 | 转入池中 | 提供借贷资金 |\\n     * @param _stakeAmount 是用户的质押金额\\n     */\\n    function depositLend(uint256 _pid,uint256 _stakeAmount) external payable nonReentrant notPause timeBeforeSettle(_pid)\\n        stateMatch(_pid) \\n    {\\n        PoolBaseInfo storage pool =poolBaseInfos[_pid];\\n        LendInfo storage lendInfo = userLendInfo[msg.sender][_pid];\\n        // 检查存款金额是否超过池的剩余容量\\n        require(_stakeAmount <= safeSub(pool.maxSupply, pool.lendSupply), \\\"depositLend : stakeAmount is greater than maxSupply\\\");\\n        uint256 amount = getPayableAmount(pool.lendToken,_stakeAmount);\\n        require(amount>minAmount, \\\"depositLend: amount less than minimum deposit\\\");\\n\\n        lendInfo.hasNoClaim=false;  // 重置领取标志，允许用户领取SP代币\\n        lendInfo.hasNoRefund=false; // 重置退款标志，允许用户申请退款\\n        //处理资金状态更新\\n        if(pool.lendToken == address(0)){\\n            //如果是ETH:使用msg.value 直接更新余额\\n            lendInfo.stakeAmount = safeAdd(lendInfo.stakeAmount, msg.value);\\n            pool.lendSupply = safeAdd(pool.lendSupply, msg.value);\\n        }else{\\n            //如果是ERC20代币:使用SafeERC20.safeTransferFrom 从用户账户转入\\n            lendInfo.stakeAmount = safeAdd(lendInfo.stakeAmount, amount);\\n            pool.lendSupply = safeAdd(pool.lendSupply, amount);\\n        }\\n        emit DepositLend(msg.sender,pool.lendToken,_stakeAmount,amount);\\n    }\\n\\n    /**\\n     * @dev 退还过量存款给存款人\\n     * @notice 池状态不等于匹配和未完成\\n     * | 函数 | 状态要求 | 提取金额 | 是否计算利息 | 使用场景 |\\n     * | `refundLend` | EXECUTION/FINISH/LIQUIDATION | 超额部分 | ❌ 不计算利息 | 退还超额存款 |\\n     * @param _pid 是池索引\\n     */\\n    function refundLend(uint256 _pid) external nonReentrant notPause timeAfterSettle(_pid)\\n    stateNotMatchUndone(_pid)\\n    {\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        LendInfo storage lendInfo = userLendInfo[msg.sender][_pid];\\n\\n        require(lendInfo.stakeAmount>0,\\\"refundLend : not pledged\\\"); // 需要用户已经质押了一定数量\\n        require(safeSub(pool.lendSupply, data.settleAmountLend) > 0, \\\"refundLend : not refund\\\");// 需要池中还有未退还的金额\\n        require(!lendInfo.hasNoRefund,\\\"refundLend : already refunded\\\");// 需要用户没有申请过退款\\n\\n        //用户份额=当前质押金额/总金额\\n        uint256 userShare = safeDiv(safeMul(lendInfo.stakeAmount, calDecimals), pool.lendSupply);\\n        // refundAmount = 总退款金额 * 用户份额\\n        uint256 refundAmount = safeDiv(safeMul(safeSub(pool.lendSupply, data.settleAmountLend), userShare), calDecimals);\\n\\n        lendInfo.refundAmount=refundAmount;\\n        lendInfo.hasNoRefund=true;\\n        // 退还资金\\n        _redeem(payable(msg.sender),pool.lendToken,refundAmount);\\n        // 更新用户信息\\n        lendInfo.hasNoRefund = true;\\n        lendInfo.refundAmount = safeAdd(refundAmount, lendInfo.refundAmount);\\n        emit RefundLend(msg.sender,pool.lendToken,refundAmount);\\n    }\\n\\n     /**\\n     * @dev 存款人接收 sp_token,主要功能是让存款人领取 sp_token\\n     * @notice 池状态不等于匹配和未完成\\n     * @param _pid 是池索引 \\n     * | 函数 | 角色 | 操作 | 目的 |\\n     * | claimLend | 出借人 | 获得SP代币 | 获得资金凭证 |\\n     */\\n    function claimLend(uint256 _pid) external nonReentrant notPause timeAfterSettle(_pid)\\n    stateNotMatchUndone(_pid)\\n    {\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        LendInfo storage lendInfo = userLendInfo[msg.sender][_pid];\\n        //金额限制\\n        require(lendInfo.stakeAmount>0,\\\"claimLend :cannot get sp_token\\\"); //需要用户的质押金额大于0\\n        require(lendInfo.hasNoClaim==false,\\\"claimLend :already claimed\\\"); //需要用户没有领取过sp_token\\n    \\n        //用户份额=当前质押金额/总金额\\n        uint256 userShare = safeDiv(safeMul(lendInfo.stakeAmount, calDecimals), pool.lendSupply);\\n        uint256 totalSpAmount=data.settleAmountLend;// 总的Sp金额等于借款结算金额\\n        // 用户 sp 金额 = totalSpAmount * 用户份额\\n        uint256 spAmount = safeDiv(safeMul(totalSpAmount, userShare), calDecimals);\\n        pool.spCoin.mint(msg.sender,spAmount);        // 铸造 sp token 给存款人\\n        lendInfo.hasNoClaim=true; // 更新用户信息\\n        emit ClaimLend(msg.sender, pool.lendToken, spAmount); // 触发领取存款人领取SP代币事件  \\n    }\\n\\n    /**\\n     * @dev 存款人取回本金和利息\\n     * @notice 池的状态可能是完成或清算\\n     * @param _pid 是池索引\\n     * @param _spAmount 是销毁的sp数量\\n     * | 函数 | 状态要求 | 提取金额 | 是否计算利息 | 使用场景 |\\n     * | `withdrawLend` | FINISH/LIQUIDATION | 按SP代币比例 | ✅ 计算利息 | 正常到期提取或者清算提取 |\\n     */\\n    function withdrawLend(uint256 _pid,uint256 _spAmount) external nonReentrant notPause\\n    stateFinishLiquidation(_pid)\\n    {\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        require(_spAmount>0,\\\"withdrawLend : spAmount is zero\\\");\\n        //销毁sp_token\\n        pool.spCoin.burn(msg.sender,_spAmount);\\n        uint256 totalSpAmount=data.settleAmountLend;// 总的Sp金额等于出借人借款结算金额\\n        // 用户 sp 金额 = totalSpAmount * 用户份额\\n        uint256 spShare = safeDiv(safeMul(_spAmount, calDecimals), totalSpAmount);\\n        //完成\\n        if(pool.state==PoolState.FINISH){\\n            require(block.timestamp>=pool.endTime,\\\"withdrawLend : not end time\\\");\\n            //赎回金额 = finishAmountLend * sp份额\\n            uint256 redeemAmount = safeDiv(safeMul(data.finishAmountLend, spShare), calDecimals);\\n            //退款\\n            _redeem(payable(msg.sender),pool.lendToken,redeemAmount);\\n            emit WithdrawLend(msg.sender,pool.lendToken,redeemAmount,_spAmount);\\n        }\\n        //清算\\n        if (pool.state==PoolState.LIQUIDATION){\\n            require(block.timestamp>=pool.settleTime,\\\"withdrawLend : less than settle time\\\");\\n            //赎回金额 = liquidationAmountLend * sp份额\\n            uint256 redeemAmount = safeDiv(safeMul(data.liquidationAmountLend, spShare), calDecimals);\\n            //退款\\n            _redeem(payable(msg.sender),pool.lendToken,redeemAmount);\\n            emit WithdrawLend(msg.sender,pool.lendToken,redeemAmount,_spAmount);\\n        }\\n    }\\n    /**\\n     * @dev 出借人紧急提取存款，用于处理池异常情况\\n     * @notice 池状态必须是未完成 \\n     * 什么情况下会出现UNDONE？\\n     * 1. **只有存款没有借款**：出借人存入资金，但没有借款人质押抵押品\\n     * 2. **只有借款没有存款**：借款人质押抵押品，但没有出借人提供资金\\n     * 3. **池创建失败**：池的配置有问题，无法正常运作\\n     * | 函数 | 状态要求 | 时间要求 | 操作类型 | 代币处理 | 使用场景 |\\n     * | `emergencyLendWithdrawal` | UNDONE | 无限制 | 紧急退出 | 转出全部存款 | 异常情况安全退出 |\\n     * @param _pid 是池索引\\n     */\\n    function emergencyLendWithdrawal(uint256 _pid) external nonReentrant notPause stateUndone(_pid)\\n    {\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];//获取池子基本信息\\n        require(pool.lendSupply>0,\\\"emergencyLendWithdrawal : lendSupply is zero\\\");//验证池的贷款供应量大于0\\n\\n        LendInfo storage lendInfo = userLendInfo[msg.sender][_pid];\\n        //验证用户是否有存款记录\\n        require(lendInfo.stakeAmount>0,\\\"emergencyLendWithdrawal : not pledged\\\");\\n        //验证用户是否已经进行过退款\\n        require(lendInfo.hasNoRefund==false,\\\"emergencyLendWithdrawal : already refunded\\\");\\n        //执行赎回操作，提取全部存款\\n        _redeem(payable(msg.sender),pool.lendToken,lendInfo.stakeAmount); \\n        //设置已经退款标志为真\\n        lendInfo.hasNoRefund=true;\\n        emit EmergencyLendWithdrawal(msg.sender,pool.lendToken,lendInfo.stakeAmount);\\n    }\\n\\n    /**\\n     * @dev 借款人质押操作\\n     * @param _pid 是池子索引\\n     * @param _stakeAmount 是用户质押的数量\\n     */\\n    function depositBorrow(uint256 _pid,uint256 _stakeAmount) external payable nonReentrant notPause timeBeforeSettle(_pid) stateMatch(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        BorrowInfo storage borrowInfo = userBorrowInfo[msg.sender][_pid];\\n\\n        uint256 amount = getPayableAmount(pool.borrowToken,_stakeAmount);// 获取应付金额\\n        require(amount > 0, 'depositBorrow: deposit amount is zero'); // 要求质押金额大于0\\n        borrowInfo.hasNoClaim = false; // 设置用户未提取质押物\\n        borrowInfo.hasNoRefund = false; // 设置用户未退款\\n         // 更新信息\\n        if (pool.borrowToken == address(0)){ // 如果借款代币是0地址（即ETH）\\n            borrowInfo.stakeAmount = safeAdd(borrowInfo.stakeAmount, msg.value); // 更新用户质押金额\\n            pool.borrowSupply = safeAdd(pool.borrowSupply, msg.value); // 更新池子借款供应量\\n        } else{ // 如果借款代币不是0地址（即其他ERC20代币）\\n            borrowInfo.stakeAmount = safeAdd(borrowInfo.stakeAmount, _stakeAmount); // 更新用户质押金额\\n            pool.borrowSupply = safeAdd(pool.borrowSupply, _stakeAmount); // 更新池子借款供应量\\n        }\\n        emit DepositBorrow(msg.sender, pool.borrowToken, _stakeAmount, amount); // 触发质押借款事件\\n    }\\n\\n    /**\\n     * @dev 退还给借款人的超额抵押品\\n     * @notice 池状态不等于匹配和未完成\\n     * | 函数           | 状态要求     | 时间要求 | 操作类型   | 代币处理 | 使用场景   \\n     * | `refundBorrow` | EXECUTION/FINISH/LIQUIDATION | 结算后   | 退还超额  | 转出超额抵押品| 退还超额质押   \\n     * @param _pid 是池状态\\n     */\\n    function refundBorrow(uint256 _pid) external nonReentrant notPause timeAfterSettle(_pid) stateNotMatchUndone(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        BorrowInfo storage borrowInfo = userBorrowInfo[msg.sender][_pid];\\n        require(safeSub(pool.borrowSupply, data.settleAmountBorrow) > 0, \\\"refundBorrow : not refund\\\");// 需要借款供应量减去结算借款量大于0\\n        require(borrowInfo.stakeAmount>0,\\\"refundBorrow : not pledged\\\");// 需要借款人的质押量大于0\\n        require(borrowInfo.hasNoRefund==false,\\\"refundBorrow : already refunded\\\");// 需要借款人没有退款\\n        //用户份额=当前质押金额/总金额\\n        uint256 userShare=safeDiv(safeMul(borrowInfo.stakeAmount,calDecimals),pool.borrowSupply);\\n        // refundAmount = 总退款金额 * 用户份额\\n        uint256 refundAmount = safeDiv(safeMul(safeSub(pool.borrowSupply, data.settleAmountBorrow), userShare), calDecimals);\\n        borrowInfo.refundAmount=refundAmount; // 更新借款人的退款金额\\n        borrowInfo.hasNoRefund=true;// 设置借款人已经退款\\n        // 退还资金\\n        _redeem(payable(msg.sender),pool.borrowToken,refundAmount);\\n        emit RefundBorrow(msg.sender,pool.borrowToken,refundAmount);\\n    }\\n    /**\\n     * @dev 借款人接收 sp_token 和贷款资金\\n     * @notice 池状态不等于匹配和未完成\\n     * @param _pid 是池状态\\n     * | 函数           | 状态要求     | 时间要求 | 操作类型   | 代币处理 | 使用场景   \\n     * | `claimBorrow` | EXECUTION/FINISH/LIQUIDATION | 结算后   | 领取贷款  | 铸造 JP 代币+转出借款| 获得借款资金  \\n     */\\n    function claimBorrow(uint256 _pid) external nonReentrant notPause timeAfterSettle(_pid) stateNotMatchUndone(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        BorrowInfo storage borrowInfo = userBorrowInfo[msg.sender][_pid];\\n        require(borrowInfo.stakeAmount>0,\\\"claimBorrow : cannot get jp_token\\\");// 需要借款人的质押量大于0\\n        require(borrowInfo.hasNoClaim==false,\\\"claimBorrow : already claimed\\\");// 需要借款人没有领取过jp_token\\n    \\n        // 总JP数量 = 实际结算的借款金额(1e18) × 抵押率(1e8) (抵押率 = 借款金额 / 抵押品价值, 150%抵押率：需要质押1.5倍价值的抵押品)\\n        uint256 totalJpAmount = safeDiv(safeMul(data.settleAmountLend, pool.martgageRate), baseDecimal);\\n        // 用户份额 = 质押金额 / 总质押金额\\n        uint256 userShare=safeDiv(safeMul(borrowInfo.stakeAmount, calDecimals), pool.borrowSupply);\\n        uint256 jpAmount=safeDiv(safeMul(totalJpAmount, userShare), calDecimals);\\n\\n        // 铸造 jp token 给借款人 \\n        pool.jpCoin.mint(msg.sender,jpAmount);\\n        //索取贷款资金\\n        uint256 borrowAmount = safeDiv(safeMul(data.settleAmountLend, userShare), calDecimals);// 计算用户实际可借金额\\n        _redeem(payable(msg.sender),pool.lendToken,borrowAmount);// 转出借款资金给借款人\\n        borrowInfo.hasNoClaim = true;// 更新状态，防止重复领取\\n        emit ClaimBorrow(msg.sender,pool.borrowToken,borrowAmount);\\n    }\\n    /**\\n     * @dev 借款人赎回质押\\n     * @notice \\n     * | 函数           | 状态要求     | 时间要求 | 操作类型   | 代币处理 | 使用场景   \\n     * | `withdrawBorrow` | FINISH/LIQUIDATION | 到期后   | 赎回抵押品  | 销毁 JP 代币+转出抵押品| 取回质押的抵押品  \\n     * @param _pid 是池状态\\n     * @param _jpAmount 是用户销毁JPtoken的数量\\n     */\\n    function withdrawBorrow(uint256 _pid,uint256 _jpAmount) external nonReentrant notPause stateFinishLiquidation(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        // 要求提取的金额大于0\\n        require(_jpAmount > 0, 'withdrawBorrow: withdraw amount is zero');\\n        pool.jpCoin.burn(msg.sender,_jpAmount);\\n        uint256 totaljpAmount = safeDiv(safeMul(data.settleAmountLend, pool.martgageRate), baseDecimal);\\n        uint256 jpShare = safeDiv(safeMul(_jpAmount, calDecimals), totaljpAmount);\\n        if(pool.state==PoolState.FINISH){\\n            // 要求当前时间大于结束时间\\n            require(block.timestamp>=pool.endTime,\\\"withdrawBorrow : less than end time\\\");\\n            uint256 redeemAmount = safeDiv(safeMul(data.finishAmountBorrow, jpShare), calDecimals);\\n            _redeem(payable(msg.sender),pool.borrowToken,redeemAmount);\\n            emit WithdrawBorrow(msg.sender,pool.borrowToken,redeemAmount,_jpAmount);\\n        }\\n        if(pool.state==PoolState.LIQUIDATION){\\n             // 要求当前时间大于匹配时间\\n            require(block.timestamp>=pool.settleTime,\\\"withdrawBorrow : less than match time\\\");\\n            uint256 redeemAmount = safeDiv(safeMul(data.liquidationAmountBorrow, jpShare), calDecimals);\\n            _redeem(payable(msg.sender),pool.borrowToken,redeemAmount);\\n            emit WithdrawBorrow(msg.sender,pool.borrowToken,redeemAmount,_jpAmount);\\n        }\\n    }\\n    \\n    /**\\n     * @dev 紧急借款提取\\n     * @notice 在极端情况下，总存款为0，或者总保证金为0，\\n     * 在某些极端情况下，如总存款为0或总保证金为0时，借款者可以进行紧急提取。\\n     * 首先，代码会获取池子的基本信息和借款者的借款信息，然后检查借款供应和借款者的质押金额是否大于0，\\n     * 以及借款者是否已经进行过退款。如果这些条件都满足，\\n     * 那么就会执行赎回操作，并标记借款者已经退款。\\n     * 最后，触发一个紧急借款提取的事件。\\n     * @param _pid 是池子的索引\\n     */\\n    function emergencyBorrowWithdrawal(uint256 _pid) external nonReentrant notPause stateUndone(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        // 确保借款供应大于0\\n        require(pool.borrowSupply>0,\\\"emergencyBorrowWithdrawal : not withdrawal\\\");\\n        // 获取借款者的借款信息\\n        BorrowInfo storage borrowInfo = userBorrowInfo[msg.sender][_pid];\\n        // 确保借款者的质押金额大于0\\n        require(borrowInfo.stakeAmount > 0, \\\"refundBorrow: not pledged\\\");\\n        // 确保借款者没有进行过退款\\n        require(!borrowInfo.hasNoRefund, \\\"refundBorrow: again refund\\\");\\n         // 执行赎回操作\\n        _redeem(payable(msg.sender),pool.borrowToken,borrowInfo.stakeAmount);\\n        // 标记借款者已经退款\\n        borrowInfo.hasNoRefund = true;\\n        // 触发紧急借款提取事件\\n        emit EmergencyBorrowWithdrawal(msg.sender, pool.borrowToken, borrowInfo.stakeAmount);\\n    }\\n\\n    function checkoutSettle(uint256 _pid) public view returns(bool){\\n        return block.timestamp>=poolBaseInfos[_pid].settleTime;\\n    }\\n\\n    function settle(uint256 _pid) public validCall{\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data= poolDataInfos[_pid];\\n        require(checkoutSettle(_pid),\\\"settle: time is less than settle time\\\");\\n        require(pool.state==PoolState.MATCH,\\\"settle: pool state must be MATCH\\\");\\n        if(pool.lendSupply>0 && pool.borrowSupply>0){\\n            //获取资产对价格\\n            uint256[2] memory prices=getUnderlyingPriceView(_pid);\\n            //计算质押保证金总价值 =价格比率（抵押品价格/出借代币价格）* 抵押品数量\\n            uint256 valueRatio=safeDiv(safeMul(prices[1],calDecimals),prices[0]);\\n            uint256 totalValue=safeDiv(safeMul(pool.borrowSupply,valueRatio),calDecimals);\\n            //计算实际价值 = 总价值 ÷抵押率\\n            // totalValue = 50,000 USDC\\n            // 抵押率 = 150%（1.5倍）\\n            // actualValue = 50,000 × 1e8 ÷ 150,000,000 = 33,333.33 USDC\\n            uint256 actualValue=safeDiv(safeMul(totalValue,baseDecimal),pool.martgageRate);\\n            if(pool.lendSupply>actualValue){\\n                // 总借款大于总借出\\n                data.settleAmountLend=actualValue;\\n                data.settleAmountBorrow=pool.borrowSupply;\\n            }else{\\n                // 总借款小于总借出\\n                data.settleAmountLend=pool.lendSupply;\\n                //结算时的实际借款金额 settleAmountBorrow = (lendSupply × martgageRate) ÷ (borrowTokenPrice × baseDecimal ÷ lendTokenPrice)\\n                uint256 priceRatio = safeDiv(safeMul(prices[1], baseDecimal), prices[0]);\\n                data.settleAmountBorrow = safeDiv(safeMul(pool.lendSupply, pool.martgageRate), priceRatio);\\n            }\\n            // 更新池子状态为执行\\n            pool.state=PoolState.EXECUTION;\\n             // 触发事件\\n            emit StateChange(_pid,uint256(PoolState.MATCH), uint256(PoolState.EXECUTION));\\n\\n        } else {\\n            // 极端情况，借款或借出任一为0\\n            pool.state=PoolState.UNDONE;\\n            data.settleAmountLend=pool.lendSupply;\\n            data.settleAmountBorrow=pool.borrowSupply;\\n            // 触发事件\\n            emit StateChange(_pid,uint256(PoolState.MATCH), uint256(PoolState.UNDONE));\\n        }\\n    }\\n\\n    function checkoutFinish(uint256 _pid) public view returns(bool){\\n        return block.timestamp>=poolBaseInfos[_pid].endTime;\\n    }\\n\\n    /**\\n     * @dev 完成一个借贷池的操作，包括计算利息、执行交换操作、赎回费用和更新池子状态等步骤。\\n     * @param _pid 是池子的索引\\n     */\\n    function finish(uint256 _pid) public validCall{\\n        // 获取基础池子信息和数据信息\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        require(checkoutFinish(_pid),\\\"finish: less than end time\\\");\\n        require(pool.state==PoolState.EXECUTION,\\\"finish: pool state must be execution\\\");\\n\\n        (address token0,address token1)=(pool.borrowToken,pool.lendToken);\\n        // 计算时间比率(1e8) = ((结束时间 - 结算时间) * 基础小数)/365天\\n        uint256 timeRatio = safeDiv(safeMul(safeSub(pool.endTime, pool.settleTime), baseDecimal), baseYear);\\n        // 计算利息(1e18) = 基础利息（结算贷款金额(1e18)× 利率(1e8) ）× 时间比率(1e8)\\n        uint256 interest = safeDiv(safeMul(timeRatio, safeMul(pool.interestRate, data.settleAmountLend)), 1e16);\\n        uint256 lendAmount = safeAdd(data.settleAmountLend, interest); // 计算贷款金额 = 结算贷款金额 + 利息\\n        // 计算需要变现的抵押品价值 = 贷款金额 * (1 + lendFee费用)\\n        uint256 sellAmount = safeDiv(safeMul(lendAmount, safeAdd(lendFee, baseDecimal)), baseDecimal);\\n         // 执行代币交换操作 amountSell：实际卖出的抵押品数量 amountIn：实际获得的出借代币数量\\n        (uint256 amountSell,uint256 amountIn) = _sellExactAmount(swapRouter,token0,token1,sellAmount);\\n        require(amountIn >= lendAmount,\\\"finish: Slippage is too high\\\");\\n        if(amountIn>lendAmount){\\n            uint256 feeAmount = safeSub(amountIn, lendAmount);\\n            //如果变现收益超过还款需求：超额部分作为协议费用\\n            _redeem(payable(feeAddress),pool.lendToken, feeAmount);\\n            data.finishAmountLend = safeSub(amountIn, feeAmount); //更新完成时的出借金额\\n        }else{\\n             data.finishAmountLend = amountIn;\\n        }\\n\\n          // 计算剩余的抵押品数量\\n          uint256 remainNowAmount = safeSub(data.settleAmountBorrow, amountSell);\\n          uint256 remainBorrowAmount=redeemFees(borrowFee,pool.borrowToken,remainNowAmount);//返回扣除费用后的剩余金额\\n          data.finishAmountBorrow=remainBorrowAmount;\\n\\n          pool.state=PoolState.FINISH;\\n          emit StateChange(_pid,uint256(PoolState.EXECUTION), uint256(PoolState.FINISH));\\n    }\\n\\n    /**\\n     * @dev 检查清算条件,\\n     * @param _pid 是池子的索引\\n     */\\n    function checkoutLiquidation(uint256 _pid) external view returns(bool){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        uint256[2] memory prices=getUnderlyingPriceView(_pid);\\n        // 保证金当前价值 =  价格比率（抵押品价格/出借代币价格）* 抵押品数量\\n        uint256 priceRatio = safeDiv(safeMul(prices[1], calDecimals), prices[0]);\\n        uint256 borrowValueNow = safeDiv(safeMul(data.settleAmountBorrow, priceRatio), calDecimals);\\n        // 清算阈值 = settleAmountLend * (1 + autoLiquidateThreshold)\\n        uint256 valueThreshold = safeDiv(safeMul(data.settleAmountLend, safeAdd(baseDecimal, pool.autoLiquidateThreshold)), baseDecimal);\\n        return borrowValueNow<valueThreshold;\\n    }\\n\\n\\n    /**\\n     * @dev 清算\\n     * @param _pid 是池子的索引\\n     */\\n    function liquidate(uint256 _pid) public validCall{\\n        PoolDataInfo storage data = poolDataInfos[_pid]; \\n        PoolBaseInfo storage pool = poolBaseInfos[_pid]; \\n        require(block.timestamp > pool.settleTime, \\\"liquidate: time is less than settle time\\\"); // 需要当前时间大于结算时间\\n        require(pool.state == PoolState.EXECUTION,\\\"liquidate: pool state must be execution\\\"); // 需要池子的状态是执行状态\\n\\n        (address token0,address token1)=(pool.borrowToken,pool.lendToken);\\n         // 时间比率(1e8) = ((结束时间 - 结算时间) * 基础小数)/365天\\n        uint256 timeRatio = safeDiv(safeMul(safeSub(pool.endTime, pool.settleTime), baseDecimal), baseYear);\\n        // 计算利息(1e18) = 基础利息（结算贷款金额(1e18)× 利率(1e8) ）× 时间比率(1e8)\\n        uint256 interest = safeDiv(safeMul(timeRatio, safeMul(pool.interestRate, data.settleAmountLend)), 1e16);\\n        // 计算贷款金额 = 结算贷款金额 + 利息\\n        uint256 lendAmount = safeAdd(data.settleAmountLend, interest);\\n        // 添加贷款费用\\n        uint256 sellAmount = safeDiv(safeMul(lendAmount, safeAdd(lendFee, baseDecimal)), baseDecimal);\\n        (uint256 amountSell,uint256 amountIn) = _sellExactAmount(swapRouter,token0,token1,sellAmount); // 卖出准确的金额\\n        // 可能会有滑点，amountIn - lendAmount < 0;\\n        if (amountIn > lendAmount) {\\n            uint256 feeAmount = safeSub(amountIn, lendAmount); // 费用金额\\n            // 贷款费用\\n            _redeem(payable(feeAddress),pool.lendToken, feeAmount);\\n            data.liquidationAmountLend = safeSub(amountIn, feeAmount);\\n        }else {\\n            data.liquidationAmountLend = amountIn;\\n        }\\n        // liquidationAmountBorrow  借款费用\\n        uint256 remainNowAmount = safeSub(data.settleAmountBorrow, amountSell); // 剩余的现在的金额\\n        uint256 remainBorrowAmount = redeemFees(borrowFee,pool.borrowToken,remainNowAmount); // 剩余的借款金额\\n        data.liquidationAmountBorrow = remainBorrowAmount;\\n        // 更新池子状态\\n        pool.state = PoolState.LIQUIDATION;\\n         // 事件\\n        emit StateChange(_pid,uint256(PoolState.EXECUTION), uint256(PoolState.LIQUIDATION));\\n    }\\n\\n    /**\\n     * @dev 费用计算,计算并赎回费用。\\n     * @notice 如果计算出的费用大于0，它将从费用地址赎回相应的费用。\\n     * @param feeRatio 是费率\\n     * @param token 是代币地址\\n     * @param amount 是金额\\n     * @return 返回扣除费用后的剩余金额\\n     */\\n    function redeemFees(uint256 feeRatio, address token, uint256 amount) internal returns (uint256){\\n        // 计算费用 = 金额 * 费率 / 基数\\n        uint256 fee = safeDiv(safeMul(amount, feeRatio), baseDecimal);\\n        if(fee>0){\\n            _redeem(payable(feeAddress),token,fee);\\n        }\\n        return safeSub(amount, fee);\\n    }\\n\\n    function getUnderlyingPriceView(uint256 _pid) public view returns(uint256[2] memory){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        uint256[] memory assets=new uint256[](2);        // 创建一个新的数组来存储资产\\n        // 将资产转换为uint256类型\\n        assets[0]=uint256(uint160(pool.lendToken));\\n        assets[1]=uint256(uint160(pool.borrowToken));\\n        uint256[] memory prices=oracle.getPrices(assets);        // 从预言机获取资产的价格\\n        return [prices[0],prices[1]];\\n    }\\n\\n    //============UniSwapV2 =================\\n\\n    /**\\n     * @dev 获取代币交换路径\\n     * @notice 构建从 token0 到 token1 的交换路径，支持 ETH 包装\\n     * @param _swapRouter DEX路由器地址（如PancakeSwap）\\n     * @param token0 源代币地址（要卖出的代币）\\n     * @param token1 目标代币地址（要获得的代币）\\n     * @return path 交换路径数组\\n     */\\n    function _getSwapPath(address _swapRouter,address token0, address token1) internal pure returns(address[] memory path){\\n        IUniswapV2Router02 IUniswap=IUniswapV2Router02(_swapRouter);\\n        path = new address[](2);\\n        path[0] = token0 == address(0) ? IUniswap.WETH() : token0;\\n        path[1] = token1 == address(0) ? IUniswap.WETH() : token1;\\n    }\\n\\n    /**\\n     * @dev 根据期望获得的代币数量，计算需要投入的代币数量\\n     * @notice 这是 DEX 的\\\"反向计算\\\"功能，用于精确控制交换\\n     * \\n     * @param _swapRouter DEX路由器地址\\n     * @param token0 源代币地址（要卖出的代币）\\n     * @param token1 目标代币地址（要获得的代币）\\n     * @param amountOut 期望获得的代币数量\\n     * @return 需要投入的源代币数量\\n     */\\n    function _getAmountIn(address _swapRouter, address token0, address token1, uint256 amountOut) internal view returns(uint256){\\n        IUniswapV2Router02 IUniswap = IUniswapV2Router02(_swapRouter);\\n        address[] memory path = _getSwapPath(_swapRouter,token0,token1);\\n        uint256[] memory amounts = IUniswap.getAmountsIn(amountOut,path);\\n        return amounts[0];\\n    }\\n\\n    /**\\n     * @dev 精确卖出代币：根据期望获得的输出数量，计算并执行交换\\n     * @param _swapRouter DEX路由器地址\\n     * @param token0 要卖出的代币地址\\n     * @param token1 要获得的代币地址\\n     * @param amountOut 期望获得的代币数量\\n     * @return (amountSell, amountIn) 实际卖出的代币数量（可能因滑点而变化）和实际获得的代币数量（应该 >= amountout）\\n     * \\n     * === 执行流程 ===\\n     * 1. 计算阶段：调用 _getAmountIn 计算需要卖出的数量\\n     * 2. 执行阶段：调用 _swap 执行实际交换\\n     * 3. 返回结果：提供卖出和获得的数量\\n     * \\n     * === 使用场景 ===\\n     * - finish 函数：变现抵押品获得还款资金\\n     * - liquidate 函数：清算时变现抵押品\\n     */\\n    function _sellExactAmount(address _swapRouter,address token0,address token1,uint256 amountOut) internal returns(uint256,uint256){\\n        uint256 amountSell=amountOut>0?_getAmountIn(_swapRouter,token0,token1,amountOut):0;\\n        return(amountSell,_swap(_swapRouter,token0,token1,amountSell));\\n    }\\n\\n    /**\\n     * @dev 执行实际的代币交换操作\\n     * @param _swapRouter DEX路由器地址\\n     * @param token0 源代币地址\\n     * @param token1 目标代币地址\\n     * @param amount0 要交换的源代币数量\\n     * @return 实际获得的代币数量\\n     * \\n     * === 交换类型支持 ===\\n     * 1. ETH → 代币：使用 swapExactETHForTokens\\n     * 2. 代币 → ETH：使用 swapExactTokensForETH  \\n     * 3. 代币 → 代币：使用 swapExactTokensForTokens\\n     * \\n     * === 注意事项 ===\\n     * - 使用无限授权提高效率\\n     * - 超时设置为 now+30，防止交易卡死 \\n     * - 返回的是实际获得的代币数量（可能有滑点）\\n     */\\n    function _swap(address _swapRouter, address token0, address token1, uint256 amount0) internal returns(uint256){\\n        // 如果源代币不是 ETH，设置授权\\n        if(token0!=address(0)){\\n            _safeApprove(token0,address(_swapRouter),type(uint256).max);\\n        }\\n         // 如果目标代币不是 ETH，设置授权\\n         if(token1!=address(0)){\\n            _safeApprove(token1,address(_swapRouter),type(uint256).max);\\n         }\\n         IUniswapV2Router02 IUniswap=IUniswapV2Router02(_swapRouter);\\n         address[] memory path=_getSwapPath(_swapRouter,token0,token1);\\n         uint256[] memory amounts;\\n         if(token0==address(0)){\\n            //swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n            amounts=IUniswap.swapExactETHForTokens{value:amount0}(0,path,address(this),block.timestamp+30);\\n         }else if(token1==address(0)){\\n            //swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n            amounts=IUniswap.swapTokensForExactETH(amount0,0,path,address(this),block.timestamp+30);\\n         }else{\\n            amounts = IUniswap.swapExactTokensForTokens(amount0,0, path, address(this), block.timestamp+30);\\n        }\\n        emit Swap(token0,token1,amounts[0],amounts[amounts.length-1]);\\n        return amounts[amounts.length-1];\\n    }\\n\\n    /**\\n     * @dev 安全地为代币设置授权\\n     * @notice 使用底层调用实现授权，避免 ERC20 标准不一致的问题\\n     * @param token 要授权的代币地址\\n     * @param to 被授权的地址（通常是 DEX 路由器）\\n     * @param value 授权数量（这里使用 uint256(-1) 表示无限授权）\\n     * \\n     * === 授权机制 ===\\n     * 1. 调用代币合约的 approve 函数\\n     * 2. 检查调用是否成功\\n     * 3. 验证返回值（如果代币支持）\\n     * \\n     * === 为什么使用无限授权 ===\\n     * 1. 提高效率：避免每次交换都重新授权\\n     * 2. 减少 gas 消耗：一次授权，多次使用\\n     * 3. 简化逻辑：不需要跟踪剩余授权数量\\n     * \\n     * === 函数选择器 ===\\n     * 0x095ea7b3 = approve(address,uint256) 的函数选择器\\n     */\\n    function _safeApprove(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"!safeApprove\\\");\\n    }\\n\\n    function setPause() public validCall{\\n        globalPaused=!globalPaused;\\n    }\\n\\n    modifier notPause() {\\n        require(globalPaused==false,\\\"PledgePool : Stake has been suspended\\\");\\n        _;\\n    }\\n\\n    modifier timeBeforeSettle(uint256 _pid) {\\n        require(block.timestamp<poolBaseInfos[_pid].settleTime,\\\"PledgePool : Less than settle time\\\");\\n        _;\\n    }\\n\\n    modifier timeAfterSettle(uint256 _pid) {\\n        require(block.timestamp>=poolBaseInfos[_pid].settleTime,\\\"PledgePool : After settle time\\\");\\n        _;\\n    }\\n\\n\\n    modifier stateMatch(uint256 _pid) {\\n        require(poolBaseInfos[_pid].state == PoolState.MATCH, \\\"state: Pool status is not equal to match\\\");\\n        _;\\n    }\\n\\n    modifier stateNotMatchUndone(uint256 _pid) {\\n        require(poolBaseInfos[_pid].state == PoolState.EXECUTION \\n        || poolBaseInfos[_pid].state == PoolState.FINISH || \\n        poolBaseInfos[_pid].state == PoolState.LIQUIDATION,\\n        \\\"state: not match and undone\\\");\\n        _;\\n    }\\n\\n    modifier stateFinishLiquidation(uint256 _pid) {\\n        require(poolBaseInfos[_pid].state == PoolState.FINISH || poolBaseInfos[_pid].state == PoolState.LIQUIDATION,\\\"state: finish liquidation\\\");\\n        _;\\n    }\\n\\n    modifier stateUndone(uint256 _pid) {\\n        require(poolBaseInfos[_pid].state == PoolState.UNDONE,\\\"state: state must be undone\\\");\\n        _;\\n    }\\n}\"\n    }\n  },\n  \"settings\": {\n    \"viaIR\": true,\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"evmVersion\": \"paris\",\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "3953f88cf47e017e2801ec25da3291c0",
      "transactionHash": "0xaa1c5a9a41a70c4916606655e55db0a80c549687fbc15f9de654cf22dc4e1f97",
      "args": [
        "0xdb6D3b4CEB2aD839bdBD9A55833bac56212F1c94",
        "0xeE567Fe1712Faf6149d80dA1E6934E354124CfE3",
        "0x523df39cAe18ea125930DA730628213e4b147CDc",
        "0xc4F817a1541ae1c98c72e016c58c9121e8AB3A24"
      ]
    },
    "decoded": {
      "from": "0x523df39cAe18ea125930DA730628213e4b147CDc",
      "gasPrice": "154666937",
      "maxFeePerGas": "154666937",
      "maxPriorityFeePerGas": "7856043",
      "gasLimit": "3563759",
      "to": null,
      "value": "0",
      "nonce": 403,
      "data": "0x608034620002ad57601f62003f1a38819003918201601f191683019291906001600160401b03841183851017620002b2578160809284926040968752833981010312620002ad576200005181620002c8565b906200006060208201620002c8565b818401516001600160a01b03808216949093909291859003620002ad576200008c6060859201620002c8565b600160005516801562000237577f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb475568056bc75e2d63100000600155826002549216928315620001e757811615620001935783156200013f57600480546001600160a01b031990811690941790556001600160a81b031990911660089190911b610100600160a81b031617600255600380549091169190911790556000600581905560065551613c3c9081620002de8239f35b845162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2066656541646472657373206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b845162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2073776170526f75746572206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b855162461bcd60e51b815260206004820152602360248201527f506c65646765506f6f6c203a206f7261636c65206973207a65726f206164647260448201526265737360e81b6064820152608490fd5b855162461bcd60e51b815260206004820152604360248201527f6d756c74695369676e6174757265436c69656e74203a204d756c7469706c652060448201527f7369676e617475726520636f6e74726163742061646472657373206973207a65606482015262726f2160e81b608482015260a490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620002ad5756fe6080604052600436101561001257600080fd5b60003560e01c80630d6abfc114612ba757806314c090cc14612b7c57806316f941b514612a005780631e107979146126ca57806338f2aa76146123c35780633ab4a445146121205780633c9fadc31461209f5780634127365714611fc65780634127535814611f9d578063415f124014611da0578063459b911c146119605780634aea0aec1461194257806352f7c988146118fc57806361a552dc146118d957806362faecf41461180e578063638c7e17146117c65780636abd7f29146117985780636c42fed2146115155780636de6ff3a146114f75780637dc0d1d0146114ce5780638705fcd41461140a578063897b0637146113755780638df828001461114f57806390590da014610f43578063981b48a614610ed95780639b2cb5d814610ebb5780639d71488e14610e80578063a62ff16414610c11578063b159751714610bd6578063bb176a6414610b51578063bf38b8f614610973578063c31c9c0714610946578063c9333756146108ff578063d353a1cb1461069c578063d431b1ac1461066b578063e271fa0c14610490578063e626648a146104725763eec8d506146101be57600080fd5b3461046d5760208060031936011261046d57600435906101dc612fb3565b6101eb60ff6002541615612ea5565b6102016101f783612c7b565b505442101561310c565b60ff600861020e84612c7b565b50015460a01c166005811015610431576001148015610447575b801561040b575b61023890613158565b61024182612c7b565b5061024b83612cf8565b509233600052600a8352604060002090600052825260406000209081549081156103c657600481015494549061028182876130ba565b1561038157600284019182549360ff851661033c57670de0b6b3a76400006102eb896102e66007956102e07fc3e20279d41b3ed21d277920877e5e5c6665bf6aca607046a3fe0fd2bd6bda7d9b9c9d6102db60019861327b565b613313565b926130ba565b613300565b04960191868355600160ff1980961617845501916001808060a01b03946103168887875416336131a4565b8254161790556103278154866130ad565b90555416926040519283523392a36001600055005b60405162461bcd60e51b815260048101889052601d60248201527f726566756e644c656e64203a20616c726561647920726566756e6465640000006044820152606490fd5b60405162461bcd60e51b815260048101869052601760248201527f726566756e644c656e64203a206e6f7420726566756e640000000000000000006044820152606490fd5b60405162461bcd60e51b815260048101859052601860248201527f726566756e644c656e64203a206e6f7420706c656467656400000000000000006044820152606490fd5b5060ff600861041984612c7b565b50015460a01c1660058110156104315760031461022f565b634e487b7160e01b600052602160045260246000fd5b5060ff600861045584612c7b565b50015460a01c16600581101561043157600214610228565b600080fd5b3461046d57600036600319011261046d576020600654604051908152f35b3461046d5760208060031936011261046d57600435906104ae612fb3565b6104bd60ff6002541615612ea5565b60ff60086104ca84612c7b565b50015460a01c1660058110156104315760046104e691146133c6565b6104ef82612c7b565b5091600583015415610613573360005260098252604060002090600052815260406000209182549081156105ce57600284019060ff8254166105895760080180547f5a06c7de92f1dc59e8cba872927d016c80ce5f0fb2295c898dfb7a2f08e43fb1936001600160a01b03939161056991908516336131a4565b600160ff1982541617905554169254916040519283523392a36001600055005b60405162461bcd60e51b815260048101859052601a60248201527f726566756e64426f72726f773a20616761696e20726566756e640000000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601960248201527f726566756e64426f72726f773a206e6f7420706c6564676564000000000000006044820152606490fd5b60405162461bcd60e51b815260048101839052602a60248201527f656d657267656e6379426f72726f775769746864726177616c203a206e6f74206044820152691dda5d1a191c985dd85b60b21b6064820152608490fd5b3461046d57600036600319011261046d57610684612d87565b60025460ff80821615169060ff191617600255600080f35b3461046d57602036600319011261046d576004356106b8612d87565b6106c181612c7b565b50906106cc81612cf8565b509060016106d982612c7b565b50015442106108ba576008830180549260ff8460a01c16600581101561043157600103610869576007850161078a60018060a01b039561075f8784541698662386f26fc1000061075860026301e1338061074161073c60018701548754906130ba565b6132e7565b049301549261075289548095613300565b90613300565b04906130ad565b97876305f5e10061077a61077460055461309c565b8c613300565b0492168860025460081c16613639565b919095878310610824576107e2600197846107f0948b60029c6003981160001461081957916107cf6107bf6107d494836130ba565b809388808c5416915416906131a4565b6130ba565b8a8701555b888601546130ba565b906006549086541690613412565b910155805460ff60a01b191660a184901b179055600080516020613be7833981519152600080a4005b50508a8701556107d9565b60405162461bcd60e51b815260206004820152601c60248201527f66696e6973683a20536c69707061676520697320746f6f2068696768000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526024808201527f66696e6973683a20706f6f6c207374617465206d7573742062652065786563756044820152633a34b7b760e11b6064820152608490fd5b60405162461bcd60e51b815260206004820152601a60248201527f66696e6973683a206c657373207468616e20656e642074696d650000000000006044820152606490fd5b3461046d5760208060031936011261046d5761091c6004356134ff565b604051916000835b6002821061093157604085f35b82806001928651815201940191019092610924565b3461046d57600036600319011261046d5760025460405160089190911c6001600160a01b03168152602090f35b3461046d5760208060031936011261046d5760043590610991612fb3565b6109a060ff6002541615612ea5565b60ff60086109ad84612c7b565b50015460a01c1660058110156104315760046109c991146133c6565b6109d282612c7b565b5091600483015415610af75733600052600a825260406000209060005281526040600020918254908115610aa457600284019060ff825416610a4c5760070180547f71d14c5f08cb34cbfb59c06ea5151aafbf742d0b6ed00fdb83addd9afb5c0fd0936001600160a01b03939161056991908516336131a4565b60405162461bcd60e51b815260048101859052602a60248201527f656d657267656e63794c656e645769746864726177616c203a20616c726561646044820152691e481c99599d5b99195960b21b6064820152608490fd5b60405162461bcd60e51b815260048101849052602560248201527f656d657267656e63794c656e645769746864726177616c203a206e6f7420706c604482015264195919d95960da1b6064820152608490fd5b60405162461bcd60e51b815260048101839052602c60248201527f656d657267656e63794c656e645769746864726177616c203a206c656e64537560448201526b70706c79206973207a65726f60a01b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b03610b72612ce2565b16600052600a60205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b0390f35b3461046d57602036600319011261046d5760ff6008610bf6600435612c7b565b50015460a01c16600581101561043157602090604051908152f35b3461046d5760208060031936011261046d57600435610c2e612fb3565b610c3d60ff6002541615612ea5565b610c496101f782612c7b565b60ff6008610c5683612c7b565b50015460a01c166005811015610431576001148015610e5a575b8015610e34575b610c8090613158565b610c8981612c7b565b5090610c9481612cf8565b5090336000526009845260406000209060005283526040600020906001600584015491015491610cc483836130ba565b15610def578054918215610daa57600282019384549360ff8516610d65579360019693670de0b6b3a7640000610d2a856102e68b966102e07f732816f48de550f238bd0d4f5b79819c7b24a49d6132928978e3cd36568dd5db9c996102db60089d61327b565b04970187905560ff19161790550180546001600160a01b039190610d529085908416336131a4565b5416926040519283523392a36001600055005b60405162461bcd60e51b815260048101899052601f60248201527f726566756e64426f72726f77203a20616c726561647920726566756e646564006044820152606490fd5b60405162461bcd60e51b815260048101879052601a60248201527f726566756e64426f72726f77203a206e6f7420706c65646765640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601960248201527f726566756e64426f72726f77203a206e6f7420726566756e64000000000000006044820152606490fd5b5060ff6008610e4283612c7b565b50015460a01c16600581101561043157600314610c77565b5060ff6008610e6883612c7b565b50015460a01c16600581101561043157600214610c70565b3461046d57600036600319011261046d5760206040517f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb478152f35b3461046d57600036600319011261046d576020600154604051908152f35b3461046d57602036600319011261046d5760043560085481101561046d57610f0260c091612cf8565b5080549060018101549060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b610f4c36612ccc565b610f54612fb3565b610f6360ff6002541615612ea5565b610f78610f6f83612c7b565b50544210612eff565b60ff6008610f8584612c7b565b50015460a01c16600581101561043157610f9f9015612f56565b610fa882612c7b565b509133600052600a602052604060002090600052602052604060002091600381015490610fdb60048201928354906130ba565b83116110ee5760070180546001600160a01b039290610ffd9085908516612fd6565b946001548611156110935760028101805461ffff191690558254841661107457611029815434906130ad565b90556110363482546130ad565b90555b54169160405191825260208201527f129e8c18c2f7baf99c7eb257934c21f038c72412803512dcf0a942a4562a82ea60403392a36001600055005b61107f8682546130ad565b905561108c8582546130ad565b9055611039565b60405162461bcd60e51b815260206004820152602d60248201527f6465706f7369744c656e643a20616d6f756e74206c657373207468616e206d6960448201526c1b9a5b5d5b4819195c1bdcda5d609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603360248201527f6465706f7369744c656e64203a207374616b65416d6f756e742069732067726560448201527261746572207468616e206d6178537570706c7960681b6064820152608490fd5b3461046d57602036600319011261046d5760043561116b612d87565b61117481612c7b565b509061117f81612cf8565b5061118982612c7b565b50544210611322576008830190815460ff8160a01c166005811015610431576112de576004850190815490811515806112d1575b1561129357505090600180958594936111d76000976134ff565b91602083016111f16111e9825161327b565b855190613313565b936112236006611218670de0b6b3a764000061121260058801998a54613300565b046132e7565b940193845490613313565b9354918483118b1461125f57505050508355549101555b805460ff60a01b191660a085901b179055600080516020613be78339815191528280a4005b61128b95506102db9394509061127b61128392848a55516132e7565b905190613313565b925490613300565b91015561123a565b60ff60a01b1916600160a21b179093555090815560059092015460019290920191909155600490600090600080516020613be78339815191528280a4005b50600587015415156111bd565b606460405162461bcd60e51b815260206004820152602060248201527f736574746c653a20706f6f6c207374617465206d757374206265204d415443486044820152fd5b60405162461bcd60e51b815260206004820152602560248201527f736574746c653a2074696d65206973206c657373207468616e20736574746c656044820152642074696d6560d81b6064820152608490fd5b3461046d57602036600319011261046d57600435611391612d87565b80156113c557806001547ffa6189b739625142c695478e9d0095a1cb9e6fad92ad8a727e0055a5cc85b06b600080a3600155005b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a206d696e416d6f756e74206973207a65726f00006044820152606490fd5b3461046d57602036600319011261046d57611423612ce2565b61142b612d87565b6001600160a01b0390811690811561147957816003549182167fd44190acf9d04bdb5d3a1aafff7e6dee8b40b93dfb8c5d3f0eea4b9f4539c3f7600080a36001600160a01b03191617600355005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2066656541646472657373206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57600036600319011261046d576004546040516001600160a01b039091168152602090f35b3461046d57600036600319011261046d576020600754604051908152f35b3461046d5760208060031936011261046d57600435611532612fb3565b61154160ff6002541615612ea5565b61154d6101f782612c7b565b60ff600861155a83612c7b565b50015460a01c166005811015610431576001148015611772575b801561174c575b61158490613158565b61158d81612c7b565b5061159782612cf8565b509133600052600a845260406000209060005283526040600020918254928315611707576002019260ff845460081c166116c257670de0b6b3a7640000916115ef6115e46115f69361327b565b600486015490613313565b9054613300565b60098301546040516340c10f1960e01b815233600482015292909104602483018190529391926001600160a01b03929186908590604490829060009088165af19182156116b6577f6f4dd2687b3c3bfa99d39742b01d6e0ad9604c48559791d5df4ff5df44b41dfd94600793611689575b50805461ff001916610100179055015460405193845216923392a36001600055005b6116a890883d8a116116af575b6116a08183612d65565b810190613362565b5087611667565b503d611696565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260048101869052601a60248201527f636c61696d4c656e64203a616c726561647920636c61696d65640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601e60248201527f636c61696d4c656e64203a63616e6e6f74206765742073705f746f6b656e00006044820152606490fd5b5060ff600861175a83612c7b565b50015460a01c1660058110156104315760031461157b565b5060ff600861178083612c7b565b50015460a01c16600581101561043157600214611574565b3461046d57602036600319011261046d57602060016117b8600435612c7b565b500154421015604051908152f35b3461046d57600036600319011261046d577f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb47546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d5760043561182b81612c7b565b5090600b670de0b6b3a764000061186861185e61185161184a86612cf8565b50956134ff565b61127b602082015161327b565b6001850154613300565b0491549201546305f5e100908101928184106118945760209361188a91613300565b0411604051908152f35b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606490fd5b3461046d57600036600319011261046d57602060ff600254166040519015158152f35b3461046d5761190a36612ccc565b90611913612d87565b80600555816006557f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5600080a3005b3461046d57600036600319011261046d576020600554604051908152f35b3461046d576101408060031936011261046d5760249060043590823560a4356001600160a01b0381169081900361046d5760c4356001600160a01b0381169081900361046d5760e4356001600160a01b038116929083900361046d57610104356001600160a01b038116949085900361046d576119db612d87565b86811115611d3f578415611cee578315611c9d57604051966101a0880188811067ffffffffffffffff821117611c8857604052875260208701526044356040870152606435606087015260006080870152600060a087015260843560c087015260e086015261010085015260006101208501528284015261016083015261012435610180830152600754600160401b811015611c7357806001611a819201600755612c7b565b929092611c5e57805183556020810151600184015560408101516002840155606081015160038401556080810151600484015560a0810151600584015560c08101516006840155600783019060018060a01b0360e082015116916bffffffffffffffffffffffff60a01b9283825416179055600884019160018060a01b036101008301511693835493610120840151946005861015611c49576001600160a81b03191690951760a09490941b60ff60a01b16939093179093559081015160098401805484166001600160a01b03928316179055610160820151600a850180549094169116179091556101800151600b919091015560405160c0810167ffffffffffffffff811182821017611c34576040526000815260208101600081526040820160008152606083016000815260808401916000835260a085019360008552600854600160401b811015611c1f57806001611bdf9201600855612cf8565b969096611c0a5751865551600186015551600285015551600384015551600483015551600590910155005b87634e487b7160e01b60005260006004526000fd5b87634e487b7160e01b60005260416004526000fd5b82634e487b7160e01b60005260416004526000fd5b88634e487b7160e01b60005260216004526000fd5b83634e487b7160e01b60005260006004526000fd5b83634e487b7160e01b60005260416004526000fd5b89634e487b7160e01b60005260416004526000fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a207370546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a206a70546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526034818a01527f637265617465506f6f6c203a20656e6454696d65206d7573742062652067726560448201527361746572207468616e20736574746c6554696d6560601b6064820152608490fd5b3461046d57602036600319011261046d57600435611dbc612d87565b611dc581612cf8565b5090611dd081612c7b565b509081549283421115611f47576008830190815460ff8160a01c16600581101561043157600103611ef257611ebd61073c6107e260039888611e80600596611e5689662386f26fc1000061075860019f60070196600160026301e13380611e49836107529460a01b039e8f8d54169d60018701546130ba565b0492015494548095613300565b93866305f5e100611e70611e6a8c5461309c565b88613300565b0492168760025460081c16613639565b919092808311600014611ee657916107cf611e9e611eaf94836130ba565b80938f8980915416915416906131a4565b6004870155888601546130ba565b910155805460ff60a01b191660a085901b179055600080516020613be7833981519152600080a4005b505060048701556107d9565b60405162461bcd60e51b815260206004820152602760248201527f6c69717569646174653a20706f6f6c207374617465206d75737420626520657860448201526632b1baba34b7b760c91b6064820152608490fd5b60405162461bcd60e51b815260206004820152602860248201527f6c69717569646174653a2074696d65206973206c657373207468616e20736574604482015267746c652074696d6560c01b6064820152608490fd5b3461046d57600036600319011261046d576003546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d57611fdf612ce2565b611fe7612d87565b6001600160a01b0390808216801561204a57600254928360081c167f4558149b3c5427365f76d4ff19bef30aba41f17e5e601d4661330d8d2b687627600080a3610100600160a81b031990911660089190911b610100600160a81b031617600255005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2073776170526f75746572206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b036120c0612ce2565b16600052600960205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b3461046d5760208060031936011261046d5760043561213d612fb3565b61214c60ff6002541615612ea5565b6121586101f782612c7b565b60ff600861216583612c7b565b50015460a01c16600581101561043157600114801561239d575b8015612377575b61218f90613158565b61219881612c7b565b50906121a381612cf8565b50903360005260098452604060002090600052835260406000208054908115612328576002019260ff845460081c166122e3576000906122066121fb6305f5e1006121f48754600686015490613300565b049461327b565b600583015490613313565b809361221c670de0b6b3a7640000928392613300565b600a8401546040516340c10f1960e01b81523360048201529290910460248301526001600160a01b03959194899186916044918391908a165af19081156116b6577f3ddafe3ebb4d0c818317027aabfa82dc9983942ceeb80523167e2de047b17fbd96600895612292936122c6575b5054613300565b04946122a58685600785015416336131a4565b805461ff001916610100179055015460405193845216923392a36001600055005b6122dc908b3d8d116116af576116a08183612d65565b508a61228b565b60405162461bcd60e51b815260048101869052601d60248201527f636c61696d426f72726f77203a20616c726561647920636c61696d65640000006044820152606490fd5b60405162461bcd60e51b815260048101869052602160248201527f636c61696d426f72726f77203a2063616e6e6f7420676574206a705f746f6b656044820152603760f91b6064820152608490fd5b5060ff600861238583612c7b565b50015460a01c16600581101561043157600314612186565b5060ff60086123ab83612c7b565b50015460a01c1660058110156104315760021461217f565b3461046d576123d136612ccc565b906123da612fb3565b6123e960ff6002541615612ea5565b60ff60086123f683612c7b565b50015460a01c1660058110156104315760021480156126a4575b6124199061337a565b61242c61242582612c7b565b5091612cf8565b5091801561265f576009820154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b039290919086908290604490829060009088165af180156116b657612642575b5061248c81546102db8561327b565b906008850160ff815460a01c16600581101561043157600214612589575b5460a01c60ff166005811015610431576003146124c9575b6001600055005b84544210612538576124ea6007926004670de0b6b3a7640000930154613300565b0493016124fb8483835416336131a4565b5416926040519283528201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a38080808080806124c2565b60405162461bcd60e51b8152600481018790526024808201527f77697468647261774c656e64203a206c657373207468616e20736574746c652060448201526374696d6560e01b6064820152608490fd5b600186015442106125fd5760ff90670de0b6b3a76400006125ae856002860154613300565b0485600789016125c28383835416336131a4565b541690604051908152878a8201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a390506124aa565b60405162461bcd60e51b815260048101889052601b60248201527f77697468647261774c656e64203a206e6f7420656e642074696d6500000000006044820152606490fd5b61265890863d88116116af576116a08183612d65565b508561247d565b60405162461bcd60e51b815260206004820152601f60248201527f77697468647261774c656e64203a207370416d6f756e74206973207a65726f006044820152606490fd5b5060ff60086126b283612c7b565b50015460a01c16600581101561043157600314612410565b3461046d576126d836612ccc565b6126e0612fb3565b6126ef60ff6002541615612ea5565b60ff60086126fc84612c7b565b50015460a01c1660058110156104315760021480156129da575b61271f9061337a565b61273261272b83612c7b565b5092612cf8565b5090801561298557600a830154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b0394929091908690829060449082906000908a165af180156116b657612968575b506127a76305f5e10061279d8454600685015490613300565b046102db8561327b565b6008820192835460ff8160a01c166005811015610431576002146128a9575b5083549260ff8460a01c166005811015610431576003146127e8576001600055005b5442106128565791670de0b6b3a764000061280c6128179360058997960154613300565b0495869116336131a4565b5416926040519283528201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a380808080808080806124c2565b60405162461bcd60e51b815260048101889052602560248201527f7769746864726177426f72726f77203a206c657373207468616e206d617463686044820152642074696d6560d81b6064820152608490fd5b60018401544210612917576128db8791670de0b6b3a76400006128d0866003870154613300565b0492839116336131a4565b868554169060405190815286898201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a3876127c6565b60405162461bcd60e51b815260048101899052602360248201527f7769746864726177426f72726f77203a206c657373207468616e20656e642074604482015262696d6560e81b6064820152608490fd5b61297e90863d88116116af576116a08183612d65565b5085612784565b60405162461bcd60e51b815260206004820152602760248201527f7769746864726177426f72726f773a20776974686472617720616d6f756e74206044820152666973207a65726f60c81b6064820152608490fd5b5060ff60086129e884612c7b565b50015460a01c16600581101561043157600314612716565b612a0936612ccc565b612a11612fb3565b612a2060ff6002541615612ea5565b612a2c610f6f83612c7b565b60ff6008612a3984612c7b565b50015460a01c16600581101561043157612a539015612f56565b612a5c82612c7b565b509133600052600960205260406000209060005260205260406000206008830160018060a01b0391612a918484845416612fd6565b948515612b295760028201805461ffff191690558254600592908516612b0957612abd815434906130ad565b905501612acb3482546130ad565b90555b54169160405191825260208201527f1d7b72e666a0b6217efe7cfa1b604ea5c7b39219563ce48b30c9da77045247a560403392a36001600055005b612b148682546130ad565b905501612b228482546130ad565b9055612ace565b60405162461bcd60e51b815260206004820152602560248201527f6465706f736974426f72726f773a206465706f73697420616d6f756e74206973604482015264207a65726f60d81b6064820152608490fd5b3461046d57602036600319011261046d576020612b9a600435612c7b565b5054421015604051908152f35b3461046d57602036600319011261046d5760043560075481101561046d57612bce90612c7b565b508054600182015460028301549260ff60038201546004830154600584015490600685015460018060a01b039283600788015416926008880154958560098a0154169b600b87600a8c0154169a01549a6040519c8d5260208d015260408c015260608b015260808a015260a089015260c088015260e0870152811661010086015260a01c16936005851015610431576101a094610120850152610140840152610160830152610180820152f35b600754811015612cb657600c906007600052027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b634e487b7160e01b600052603260045260246000fd5b604090600319011261046d576004359060243590565b600435906001600160a01b038216820361046d57565b600854811015612cb6576006906008600052027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b6060810190811067ffffffffffffffff821117612d4f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117612d4f57604052565b604051602090818101903360601b82523060601b603482015260288152612dad81612d33565b5190207f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb4754604051630f5d50b360e11b81526004810192909252600060248301528290829060449082906001600160a01b03165afa9081156116b657600091612e75575b5015612e1a5750565b6084906040519062461bcd60e51b82526004820152602e60248201527f6d756c74695369676e6174757265436c69656e74203a2054686973207478206960448201526d1cc81b9bdd08185c1c9c9bdd995960921b6064820152fd5b908282813d8311612e9e575b612e8b8183612d65565b81010312612e9b57505138612e11565b80fd5b503d612e81565b15612eac57565b60405162461bcd60e51b815260206004820152602560248201527f506c65646765506f6f6c203a205374616b6520686173206265656e2073757370604482015264195b99195960da1b6064820152608490fd5b15612f0657565b60405162461bcd60e51b815260206004820152602260248201527f506c65646765506f6f6c203a204c657373207468616e20736574746c652074696044820152616d6560f01b6064820152608490fd5b15612f5d57565b60405162461bcd60e51b815260206004820152602860248201527f73746174653a20506f6f6c20737461747573206973206e6f7420657175616c206044820152670e8de40dac2e8c6d60c31b6064820152608490fd5b600260005414612fc4576002600055565b604051633ee5aeb560e01b8152600490fd5b6001600160a01b031680612fea5750503490565b81612ff3575090565b6040516323b872dd60e01b60208201523360248201523060448201526064808201849052815260a081019167ffffffffffffffff831182841017612d4f5761303d92604052613040565b90565b906000602091828151910182855af1156116b6576000513d61309357506001600160a01b0381163b155b6130715750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b6001141561306a565b6305f5e10081019081106118945790565b9081019081106118945790565b9081039081116130c75790565b60405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606490fd5b1561311357565b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a20416674657220736574746c652074696d6500006044820152606490fd5b1561315f57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a206e6f74206d6174636820616e6420756e646f6e6500000000006044820152606490fd5b6001600160a01b039182169291908361320c578260008115613203575b6000808093819387871690f1156116b6577fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9916020915b6040519485521692a3565b506108fc6131c1565b60405163a9059cbb60e01b6020808301919091528383166001600160a01b03166024830152604480830186905282527fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9939092909161327690613270606482612d65565b87613040565b6131f8565b670de0b6b3a7640000908181029181159183041417156132985790565b60405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608490fd5b6305f5e100908181029181159183041417156132985790565b8181029181159183041417156132985790565b811561331d570490565b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206469766973696f6e206f766572666c6f7700000000006044820152606490fd5b9081602091031261046d5751801515810361046d5790565b1561338157565b60405162461bcd60e51b815260206004820152601960248201527f73746174653a2066696e697368206c69717569646174696f6e000000000000006044820152606490fd5b156133cd57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a207374617465206d75737420626520756e646f6e6500000000006044820152606490fd5b916305f5e10061342561303d9483613300565b04918280613435575b50506130ba565b60035461344b92906001600160a01b03166131a4565b388261342e565b805115612cb65760200190565b805160011015612cb65760400190565b8051821015612cb65760209160051b010190565b90602090818382031261046d57825167ffffffffffffffff9384821161046d570181601f8201121561046d578051938411612d4f578360051b90604051946134cd85840187612d65565b8552838086019282010192831161046d578301905b8282106134f0575050505090565b815181529083019083016134e2565b6040805167ffffffffffffffff9281830184811183821017612d4f5761352b9284918252369037612c7b565b509080519161353983612d33565b600283526020926008848201928436853760078101546001600160a01b039283929091831661356786613452565b520154166135748361345f565b52600454169083519283916304e59d2760e11b835260248301908760048501525180915260448301919060005b88828210613622575050505091818060009403915afa908115613617576000916135f6575b5081519384830190811185821017612d4f576135ee92526135e681613452565b51845261345f565b519082015290565b613611913d8091833e6136098183612d65565b810190613483565b386135c6565b82513d6000823e3d90fd5b8351855287955093840193909201916001016135a1565b9392909190600081156139115750600061368191613658848689613975565b9060405193849283926307c0329d60e21b84526004840152604060248401526044830190613919565b03816001600160a01b0389165afa80156116b6576136a7916000916138f8575b50613452565b51935b6001600160a01b03838116928315906136da9082156138e9575b8381169687159485156138da575b861695613975565b91600091156137e457505090601e4201918242116137b5576000916137249188604051809681958294637ff36ab560e01b8452886004850152608060248501526084840190613919565b90306044840152606483015203925af19081156116b6576000916137cb575b50915b61374f83613452565b5183516000199391908481019081116137b5577ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235916137906040928861346f565b5182519182526020820152a381519081019081116137b5576137b19161346f565b5190565b634e487b7160e01b600052601160045260246000fd5b6137de913d8091833e6136098183612d65565b38613743565b156138505750601e42018042116137b55761381d92876000809460405196879586948593632512eca560e11b8552309160048601613a93565b03925af19081156116b657600091613837575b5091613746565b61384a913d8091833e6136098183612d65565b38613830565b91601e4201918242116138c657918391888361388595604051968795869485936338ed173960e01b8552309160048601613a93565b03925af19182156138ba57809261389f575b505091613746565b6138b392503d8091833e6136098183612d65565b3880613897565b604051903d90823e3d90fd5b634e487b7160e01b84526011600452602484fd5b6138e48784613acd565b6136d2565b6138f38588613acd565b6136c4565b61390b913d8091833e6136098183612d65565b386136a1565b9050936136aa565b90815180825260208080930193019160005b828110613939575050505090565b83516001600160a01b03168552938101939281019260010161392b565b9081602091031261046d57516001600160a01b038116810361046d5790565b604080519294936001600160a01b0392831661399085612d33565b60028552602091833684880137859785811615600014613a8e575083516315ab88c960e31b81528381600481865afa908115613a8357600091613a66575b505b856139da88613452565b91169052808516613a58575090806004928451938480926315ab88c960e31b82525afa928315613a4e575090613a1b9291600092613a21575b50509261345f565b91169052565b613a409250803d10613a47575b613a388183612d65565b810190613956565b3880613a13565b503d613a2e565b513d6000823e3d90fd5b915050613a1b91509261345f565b613a7d9150843d8611613a4757613a388183612d65565b386139ce565b85513d6000823e3d90fd5b6139d0565b90608092613ab9919695949683526000602084015260a0604084015260a0830190613919565b6001600160a01b0390951660608201520152565b60405163095ea7b360e01b60208083019182526001600160a01b039094166024830152600019604480840191909152825267ffffffffffffffff92916080810184811182821017612d4f57604052600092839283809351925af1913d15613bdd573d908111613bc95760405190613b4d601f8201601f1916860183612d65565b81528091843d92013e5b81613b99575b5015613b665750565b6064906040519062461bcd60e51b82526004820152600c60248201526b2173616665417070726f766560a01b6044820152fd5b80518015925083908315613bb1575b50505038613b5d565b613bc19350820181019101613362565b388281613ba8565b634e487b7160e01b82526041600452602482fd5b50506060613b5756fe516112f3bf06e373fcea44db364769c04cc7ef4392e6de95d2b250720bcacefba26469706673582212205bc7ac1966f51929369415b8d7abd0aeed8de2823d02bbbd330b641d83c0931a64736f6c63430008140033000000000000000000000000db6d3b4ceb2ad839bdbd9a55833bac56212f1c94000000000000000000000000ee567fe1712faf6149d80da1e6934e354124cfe3000000000000000000000000523df39cae18ea125930da730628213e4b147cdc000000000000000000000000c4f817a1541ae1c98c72e016c58c9121e8ab3a24",
      "r": "0x6d7c6be5bf9a1edbb29e8b495f233f6617b5f729d3d511bb9852ed907adc5939",
      "s": "0x63d59cd87eeb5f3e9d846402c39366cec8666e464aca568ab11de5cd623e9f9a",
      "v": 1,
      "chainId": 11155111
    }
  }
}