{
  "address": "0x31f64fa2588e70614ed7e7c16d5c492cedc09f72",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multiSignature",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimLend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositLend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyBorrowWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyLendWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recieptor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refund",
          "type": "uint256"
        }
      ],
      "name": "RefundBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refund",
          "type": "uint256"
        }
      ],
      "name": "RefundLend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newLendFee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newBorrowFee",
          "type": "uint256"
        }
      ],
      "name": "SetFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldFeeAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeAddress",
          "type": "address"
        }
      ],
      "name": "SetFeeAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldMinAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newMinAmount",
          "type": "uint256"
        }
      ],
      "name": "SetMinAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldSwapAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapAddress",
          "type": "address"
        }
      ],
      "name": "SetSwapRouterAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldState",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newState",
          "type": "uint256"
        }
      ],
      "name": "StateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromCoin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toCoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toValue",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawLend",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PoolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "checkoutFinish",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "checkoutLiquidation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "checkoutSettle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claimBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claimLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_settleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_martgageRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lendToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_jpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_autoLiquidateThreshold",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "depositBorrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "depositLend",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyBorrowWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyLendWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "finish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMultiSignatureAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getPoolState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getUnderlyingPriceView",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiSignaturePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IBscPledgeOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolBaseInfos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "settleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lendSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "martgageRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lendToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrowToken",
          "type": "address"
        },
        {
          "internalType": "enum PledgePool.PoolState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "contract IDebtToken",
          "name": "spCoin",
          "type": "address"
        },
        {
          "internalType": "contract IDebtToken",
          "name": "jpCoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "autoLiquidateThreshold",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolDataInfos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "settleAmountLend",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "settleAmountBorrow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finishAmountLend",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finishAmountBorrow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationAmountLend",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationAmountBorrow",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "refundBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "refundLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lendFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_borrowFee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "setFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userBorrowInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasNoRefund",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasNoClaim",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userLendInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasNoRefund",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasNoClaim",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_jpAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_spAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa1c5a9a41a70c4916606655e55db0a80c549687fbc15f9de654cf22dc4e1f97",
  "receipt": {
    "to": null,
    "from": "0x523df39cae18ea125930da730628213e4b147cdc",
    "contractAddress": "0x31f64fa2588e70614ed7e7c16d5c492cedc09f72",
    "transactionIndex": "0x4b",
    "gasUsed": "0x35eecc",
    "logsBloom": "0x
    "blockHash": "0x452ef5748f5bc3fc81adeca63bf3fc652ab0d52ac2835df79413d3ad4364cd32",
    "transactionHash": "0xaa1c5a9a41a70c4916606655e55db0a80c549687fbc15f9de654cf22dc4e1f97",
    "logs": [],
    "blockNumber": "0x8b0076",
    "cumulativeGasUsed": "0xcaf207",
    "status": "0x1"
  },
  "args": [
    "0xdb6D3b4CEB2aD839bdBD9A55833bac56212F1c94",
    "0xeE567Fe1712Faf6149d80dA1E6934E354124CfE3",
    "0x523df39cAe18ea125930DA730628213e4b147CDc",
    "0xc4F817a1541ae1c98c72e016c58c9121e8AB3A24"
  ],
  "numDeployments": 2,
  "solcInputHash": "3953f88cf47e017e2801ec25da3291c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSignature\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimLend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"DepositBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"DepositLend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyBorrowWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyLendWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recieptor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"RefundBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"RefundLend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newLendFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newBorrowFee\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeAddress\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldMinAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinAmount\",\"type\":\"uint256\"}],\"name\":\"SetMinAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSwapAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapAddress\",\"type\":\"address\"}],\"name\":\"SetSwapRouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldState\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newState\",\"type\":\"uint256\"}],\"name\":\"StateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromCoin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toCoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toValue\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawLend\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"checkoutFinish\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"checkoutLiquidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"checkoutSettle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_martgageRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lendToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_jpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_autoLiquidateThreshold\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"depositBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"depositLend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyBorrowWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyLendWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"finish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultiSignatureAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingPriceView\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSignaturePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IBscPledgeOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolBaseInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"settleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"martgageRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lendToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"enum PledgePool.PoolState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract IDebtToken\",\"name\":\"spCoin\",\"type\":\"address\"},{\"internalType\":\"contract IDebtToken\",\"name\":\"jpCoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoLiquidateThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolDataInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"settleAmountLend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settleAmountBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishAmountLend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishAmountBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationAmountLend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationAmountBorrow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"refundBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"refundLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBorrowInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasNoRefund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasNoClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLendInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasNoRefund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasNoClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jpAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"checkoutLiquidation(uint256)\":{\"details\":\"\\u68c0\\u67e5\\u6e05\\u7b97\\u6761\\u4ef6,\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\"}},\"claimBorrow(uint256)\":{\"details\":\"\\u501f\\u6b3e\\u4eba\\u63a5\\u6536 sp_token \\u548c\\u8d37\\u6b3e\\u8d44\\u91d1\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u72b6\\u6001 | \\u51fd\\u6570           | \\u72b6\\u6001\\u8981\\u6c42     | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b   | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f    | `claimBorrow` | EXECUTION/FINISH/LIQUIDATION | \\u7ed3\\u7b97\\u540e   | \\u9886\\u53d6\\u8d37\\u6b3e  | \\u94f8\\u9020 JP \\u4ee3\\u5e01+\\u8f6c\\u51fa\\u501f\\u6b3e| \\u83b7\\u5f97\\u501f\\u6b3e\\u8d44\\u91d1  \"}},\"claimLend(uint256)\":{\"details\":\"\\u5b58\\u6b3e\\u4eba\\u63a5\\u6536 sp_token,\\u4e3b\\u8981\\u529f\\u80fd\\u662f\\u8ba9\\u5b58\\u6b3e\\u4eba\\u9886\\u53d6 sp_token\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u7d22\\u5f15  | \\u51fd\\u6570 | \\u89d2\\u8272 | \\u64cd\\u4f5c | \\u76ee\\u7684 | | claimLend | \\u51fa\\u501f\\u4eba | \\u83b7\\u5f97SP\\u4ee3\\u5e01 | \\u83b7\\u5f97\\u8d44\\u91d1\\u51ed\\u8bc1 |\"}},\"createPool(uint256,uint256,uint256,uint256,uint256,address,address,address,address,uint256)\":{\"details\":\"\\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684\\u501f\\u8d37\\u6c60\\u3002\\u51fd\\u6570\\u63a5\\u6536\\u4e00\\u7cfb\\u5217\\u53c2\\u6570\\uff0c \\u5305\\u62ec\\u7ed3\\u7b97\\u65f6\\u95f4\\u3001\\u7ed3\\u675f\\u65f6\\u95f4\\u3001\\u5229\\u7387\\u3001\\u6700\\u5927\\u4f9b\\u5e94\\u91cf\\u3001\\u62b5\\u62bc\\u7387\\u3001\\u5b58\\u5165\\u4ee3\\u5e01\\u3001\\u501f\\u51fa\\u4ee3\\u5e01\\u3001SP\\u4ee3\\u5e01\\u3001JP\\u4ee3\\u5e01\\u548c\\u81ea\\u52a8\\u6e05\\u7b97\\u9608\\u503c\\u3002  Can only be called by the owner.\"},\"depositBorrow(uint256,uint256)\":{\"details\":\"\\u501f\\u6b3e\\u4eba\\u8d28\\u62bc\\u64cd\\u4f5c\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u5b50\\u7d22\\u5f15\",\"_stakeAmount\":\"\\u662f\\u7528\\u6237\\u8d28\\u62bc\\u7684\\u6570\\u91cf\"}},\"depositLend(uint256,uint256)\":{\"details\":\"\\u51fa\\u501f\\u4eba\\u6267\\u884c\\u5b58\\u6b3e\\u64cd\\u4f5c\\uff0c\\u5c06\\u8d44\\u91d1\\u5b58\\u5165\\u501f\\u8d37\\u6c60\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u7d22\\u5f15 | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f | | `depositLend` | MATCH | \\u7ed3\\u7b97\\u524d | \\u5b58\\u5165\\u8d44\\u91d1 | \\u8f6c\\u5165\\u6c60\\u4e2d | \\u63d0\\u4f9b\\u501f\\u8d37\\u8d44\\u91d1 |\",\"_stakeAmount\":\"\\u662f\\u7528\\u6237\\u7684\\u8d28\\u62bc\\u91d1\\u989d\"}},\"emergencyBorrowWithdrawal(uint256)\":{\"details\":\"\\u7d27\\u6025\\u501f\\u6b3e\\u63d0\\u53d6\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\"}},\"emergencyLendWithdrawal(uint256)\":{\"details\":\"\\u51fa\\u501f\\u4eba\\u7d27\\u6025\\u63d0\\u53d6\\u5b58\\u6b3e\\uff0c\\u7528\\u4e8e\\u5904\\u7406\\u6c60\\u5f02\\u5e38\\u60c5\\u51b5\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u7d22\\u5f15\"}},\"finish(uint256)\":{\"details\":\"\\u5b8c\\u6210\\u4e00\\u4e2a\\u501f\\u8d37\\u6c60\\u7684\\u64cd\\u4f5c\\uff0c\\u5305\\u62ec\\u8ba1\\u7b97\\u5229\\u606f\\u3001\\u6267\\u884c\\u4ea4\\u6362\\u64cd\\u4f5c\\u3001\\u8d4e\\u56de\\u8d39\\u7528\\u548c\\u66f4\\u65b0\\u6c60\\u5b50\\u72b6\\u6001\\u7b49\\u6b65\\u9aa4\\u3002\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\"}},\"liquidate(uint256)\":{\"details\":\"\\u6e05\\u7b97\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\"}},\"refundBorrow(uint256)\":{\"details\":\"\\u9000\\u8fd8\\u7ed9\\u501f\\u6b3e\\u4eba\\u7684\\u8d85\\u989d\\u62b5\\u62bc\\u54c1\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u72b6\\u6001\"}},\"refundLend(uint256)\":{\"details\":\"\\u9000\\u8fd8\\u8fc7\\u91cf\\u5b58\\u6b3e\\u7ed9\\u5b58\\u6b3e\\u4eba\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u7d22\\u5f15\"}},\"setFeeAddress(address)\":{\"details\":\"Set up the address to receive the handling fee\"},\"withdrawBorrow(uint256,uint256)\":{\"details\":\"\\u501f\\u6b3e\\u4eba\\u8d4e\\u56de\\u8d28\\u62bc\",\"params\":{\"_jpAmount\":\"\\u662f\\u7528\\u6237\\u9500\\u6bc1JPtoken\\u7684\\u6570\\u91cf\",\"_pid\":\"\\u662f\\u6c60\\u72b6\\u6001\"}},\"withdrawLend(uint256,uint256)\":{\"details\":\"\\u5b58\\u6b3e\\u4eba\\u53d6\\u56de\\u672c\\u91d1\\u548c\\u5229\\u606f\",\"params\":{\"_pid\":\"\\u662f\\u6c60\\u7d22\\u5f15\",\"_spAmount\":\"\\u662f\\u9500\\u6bc1\\u7684sp\\u6570\\u91cf | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u63d0\\u53d6\\u91d1\\u989d | \\u662f\\u5426\\u8ba1\\u7b97\\u5229\\u606f | \\u4f7f\\u7528\\u573a\\u666f | | `withdrawLend` | FINISH/LIQUIDATION | \\u6309SP\\u4ee3\\u5e01\\u6bd4\\u4f8b | \\u2705 \\u8ba1\\u7b97\\u5229\\u606f | \\u6b63\\u5e38\\u5230\\u671f\\u63d0\\u53d6\\u6216\\u8005\\u6e05\\u7b97\\u63d0\\u53d6 |\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimBorrow(uint256)\":{\"notice\":\"\\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210\"},\"claimLend(uint256)\":{\"notice\":\"\\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210\"},\"depositLend(uint256,uint256)\":{\"notice\":\"\\u6c60\\u72b6\\u6001\\u5fc5\\u987b\\u4e3aMATCH\"},\"emergencyBorrowWithdrawal(uint256)\":{\"notice\":\"\\u5728\\u6781\\u7aef\\u60c5\\u51b5\\u4e0b\\uff0c\\u603b\\u5b58\\u6b3e\\u4e3a0\\uff0c\\u6216\\u8005\\u603b\\u4fdd\\u8bc1\\u91d1\\u4e3a0\\uff0c \\u5728\\u67d0\\u4e9b\\u6781\\u7aef\\u60c5\\u51b5\\u4e0b\\uff0c\\u5982\\u603b\\u5b58\\u6b3e\\u4e3a0\\u6216\\u603b\\u4fdd\\u8bc1\\u91d1\\u4e3a0\\u65f6\\uff0c\\u501f\\u6b3e\\u8005\\u53ef\\u4ee5\\u8fdb\\u884c\\u7d27\\u6025\\u63d0\\u53d6\\u3002 \\u9996\\u5148\\uff0c\\u4ee3\\u7801\\u4f1a\\u83b7\\u53d6\\u6c60\\u5b50\\u7684\\u57fa\\u672c\\u4fe1\\u606f\\u548c\\u501f\\u6b3e\\u8005\\u7684\\u501f\\u6b3e\\u4fe1\\u606f\\uff0c\\u7136\\u540e\\u68c0\\u67e5\\u501f\\u6b3e\\u4f9b\\u5e94\\u548c\\u501f\\u6b3e\\u8005\\u7684\\u8d28\\u62bc\\u91d1\\u989d\\u662f\\u5426\\u5927\\u4e8e0\\uff0c \\u4ee5\\u53ca\\u501f\\u6b3e\\u8005\\u662f\\u5426\\u5df2\\u7ecf\\u8fdb\\u884c\\u8fc7\\u9000\\u6b3e\\u3002\\u5982\\u679c\\u8fd9\\u4e9b\\u6761\\u4ef6\\u90fd\\u6ee1\\u8db3\\uff0c \\u90a3\\u4e48\\u5c31\\u4f1a\\u6267\\u884c\\u8d4e\\u56de\\u64cd\\u4f5c\\uff0c\\u5e76\\u6807\\u8bb0\\u501f\\u6b3e\\u8005\\u5df2\\u7ecf\\u9000\\u6b3e\\u3002 \\u6700\\u540e\\uff0c\\u89e6\\u53d1\\u4e00\\u4e2a\\u7d27\\u6025\\u501f\\u6b3e\\u63d0\\u53d6\\u7684\\u4e8b\\u4ef6\\u3002\"},\"emergencyLendWithdrawal(uint256)\":{\"notice\":\"\\u6c60\\u72b6\\u6001\\u5fc5\\u987b\\u662f\\u672a\\u5b8c\\u6210  \\u4ec0\\u4e48\\u60c5\\u51b5\\u4e0b\\u4f1a\\u51fa\\u73b0UNDONE\\uff1f 1. **\\u53ea\\u6709\\u5b58\\u6b3e\\u6ca1\\u6709\\u501f\\u6b3e**\\uff1a\\u51fa\\u501f\\u4eba\\u5b58\\u5165\\u8d44\\u91d1\\uff0c\\u4f46\\u6ca1\\u6709\\u501f\\u6b3e\\u4eba\\u8d28\\u62bc\\u62b5\\u62bc\\u54c1 2. **\\u53ea\\u6709\\u501f\\u6b3e\\u6ca1\\u6709\\u5b58\\u6b3e**\\uff1a\\u501f\\u6b3e\\u4eba\\u8d28\\u62bc\\u62b5\\u62bc\\u54c1\\uff0c\\u4f46\\u6ca1\\u6709\\u51fa\\u501f\\u4eba\\u63d0\\u4f9b\\u8d44\\u91d1 3. **\\u6c60\\u521b\\u5efa\\u5931\\u8d25**\\uff1a\\u6c60\\u7684\\u914d\\u7f6e\\u6709\\u95ee\\u9898\\uff0c\\u65e0\\u6cd5\\u6b63\\u5e38\\u8fd0\\u4f5c | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f | | `emergencyLendWithdrawal` | UNDONE | \\u65e0\\u9650\\u5236 | \\u7d27\\u6025\\u9000\\u51fa | \\u8f6c\\u51fa\\u5168\\u90e8\\u5b58\\u6b3e | \\u5f02\\u5e38\\u60c5\\u51b5\\u5b89\\u5168\\u9000\\u51fa |\"},\"refundBorrow(uint256)\":{\"notice\":\"\\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210 | \\u51fd\\u6570           | \\u72b6\\u6001\\u8981\\u6c42     | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b   | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f    | `refundBorrow` | EXECUTION/FINISH/LIQUIDATION | \\u7ed3\\u7b97\\u540e   | \\u9000\\u8fd8\\u8d85\\u989d  | \\u8f6c\\u51fa\\u8d85\\u989d\\u62b5\\u62bc\\u54c1| \\u9000\\u8fd8\\u8d85\\u989d\\u8d28\\u62bc   \"},\"refundLend(uint256)\":{\"notice\":\"\\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210 | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u63d0\\u53d6\\u91d1\\u989d | \\u662f\\u5426\\u8ba1\\u7b97\\u5229\\u606f | \\u4f7f\\u7528\\u573a\\u666f | | `refundLend` | EXECUTION/FINISH/LIQUIDATION | \\u8d85\\u989d\\u90e8\\u5206 | \\u274c \\u4e0d\\u8ba1\\u7b97\\u5229\\u606f | \\u9000\\u8fd8\\u8d85\\u989d\\u5b58\\u6b3e |\"},\"setFeeAddress(address)\":{\"notice\":\"Only allow administrators to operate\"},\"withdrawBorrow(uint256,uint256)\":{\"notice\":\" | \\u51fd\\u6570           | \\u72b6\\u6001\\u8981\\u6c42     | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b   | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f    | `withdrawBorrow` | FINISH/LIQUIDATION | \\u5230\\u671f\\u540e   | \\u8d4e\\u56de\\u62b5\\u62bc\\u54c1  | \\u9500\\u6bc1 JP \\u4ee3\\u5e01+\\u8f6c\\u51fa\\u62b5\\u62bc\\u54c1| \\u53d6\\u56de\\u8d28\\u62bc\\u7684\\u62b5\\u62bc\\u54c1  \"},\"withdrawLend(uint256,uint256)\":{\"notice\":\"\\u6c60\\u7684\\u72b6\\u6001\\u53ef\\u80fd\\u662f\\u5b8c\\u6210\\u6216\\u6e05\\u7b97\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pledage/PledgePool.sol\":\"PledgePool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"contracts/interface/IBscPledgeOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBscPledgeOracle {\\r\\n    function getPrice(address token) external view returns (uint256);\\r\\n\\r\\n    function getPrices(uint256[] calldata assets) external view returns (uint256[] memory);\\r\\n    \\r\\n    function getUnderlyingPrice(uint256 cToken) external view returns (uint256);\\r\\n}\",\"keccak256\":\"0x95da2aeb33e67a6ce127d938364ff6102f22e5ccdbe3a4bb99d4ad3211636872\",\"license\":\"MIT\"},\"contracts/interface/IDebtToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDebtToken {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function mint(address account,uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(address from,uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x84bb3990036c64d6fc57e26c9a8c133761185f9f5b072810cf407553c39dc147\",\"license\":\"MIT\"},\"contracts/interface/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1339b6bc0f4922c7f09285f2344c96c8f584bbeef9e5252e8c1291d6dfcf3276\",\"license\":\"MIT\"},\"contracts/library/SafeTransfer.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract SafeTransfer{\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n    event Redeem(address indexed recieptor,address indexed token,uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice  transfers money to the pool\\r\\n     * @dev function to transfer\\r\\n     * @param token of address\\r\\n     * @param amount of amount\\r\\n     * @return return amount\\r\\n     */\\r\\n    function getPayableAmount(address token,uint256 amount) internal returns (uint256) {\\r\\n        if (token == address(0)){\\r\\n            amount = msg.value;\\r\\n        }else if (amount > 0){\\r\\n            IERC20 oToken = IERC20(token);\\r\\n            oToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev An auxiliary foundation which transter amount stake coins to recieptor.\\r\\n     * @param recieptor account.\\r\\n     * @param token address\\r\\n     * @param amount redeem amount.\\r\\n     */\\r\\n    function _redeem(address payable recieptor,address token,uint256 amount) internal{\\r\\n        if (token == address(0)){\\r\\n            recieptor.transfer(amount);\\r\\n        }else{\\r\\n            IERC20 oToken = IERC20(token);\\r\\n            oToken.safeTransfer(recieptor,amount);\\r\\n        }\\r\\n        emit Redeem(recieptor,token,amount);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xdce5cc0fbb717ff35741cbe2cf3987e56c5a20042857a98e44308a80ec74bfdb\",\"license\":\"MIT\"},\"contracts/multiSignature/multiSignatureClient.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IMultiSignature - \\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u63a5\\u53e3\\r\\n * @dev \\u5b9a\\u4e49\\u4e86\\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u9700\\u8981\\u5b9e\\u73b0\\u7684\\u6838\\u5fc3\\u529f\\u80fd\\u63a5\\u53e3\\r\\n */\\r\\ninterface IMultiSignature {\\r\\n    /**\\r\\n     * @dev \\u83b7\\u53d6\\u6709\\u6548\\u7b7e\\u540d\\u7d22\\u5f15\\r\\n     * @param msghash \\u6d88\\u606f\\u54c8\\u5e0c\\r\\n     * @param lastIndex \\u4e0a\\u6b21\\u68c0\\u67e5\\u7684\\u7d22\\u5f15\\r\\n     * @return uint256 \\u8fd4\\u56de\\u6709\\u6548\\u7684\\u7b7e\\u540d\\u7d22\\u5f15\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u8fbe\\u5230\\u9608\\u503c\\u5219\\u8fd4\\u56de0\\r\\n     */\\r\\n    function getValidSignature(bytes32 msghash, uint256 lastIndex) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title multiSignatureClient - \\u591a\\u7b7e\\u540d\\u5ba2\\u6237\\u7aef\\u5408\\u7ea6\\r\\n * @dev \\u4e3a\\u5176\\u4ed6\\u5408\\u7ea6\\u63d0\\u4f9b\\u591a\\u7b7e\\u540d\\u9a8c\\u8bc1\\u529f\\u80fd\\u7684\\u57fa\\u7840\\u5408\\u7ea6\\r\\n * @notice \\u4efb\\u4f55\\u9700\\u8981\\u591a\\u7b7e\\u540d\\u4fdd\\u62a4\\u7684\\u5408\\u7ea6\\u90fd\\u5e94\\u8be5\\u7ee7\\u627f\\u6b64\\u5408\\u7ea6\\uff0c\\u5e76\\u4f7f\\u7528validCall\\u4fee\\u9970\\u7b26\\r\\n * \\r\\n * === \\u5de5\\u4f5c\\u539f\\u7406 ===\\r\\n * 1. \\u5ba2\\u6237\\u7aef\\u5408\\u7ea6\\u7ee7\\u627f\\u6b64\\u5408\\u7ea6\\uff0c\\u83b7\\u5f97\\u591a\\u7b7e\\u540d\\u9a8c\\u8bc1\\u80fd\\u529b\\r\\n * 2. \\u91cd\\u8981\\u51fd\\u6570\\u4f7f\\u7528validCall\\u4fee\\u9970\\u7b26\\u8fdb\\u884c\\u4fdd\\u62a4\\r\\n * 3. \\u8c03\\u7528\\u65f6\\u4f1a\\u81ea\\u52a8\\u68c0\\u67e5\\u5bf9\\u5e94\\u7684\\u591a\\u7b7e\\u540d\\u7533\\u8bf7\\u662f\\u5426\\u5df2\\u83b7\\u5f97\\u8db3\\u591f\\u7b7e\\u540d\\r\\n * 4. \\u53ea\\u6709\\u901a\\u8fc7\\u591a\\u7b7e\\u540d\\u9a8c\\u8bc1\\u7684\\u8c03\\u7528\\u624d\\u80fd\\u6267\\u884c\\r\\n */\\r\\ncontract multiSignatureClient {\\r\\n    uint256 public constant multiSignaturePosition = uint256(keccak256(\\\"org.multiSignature.storage\\\"));// \\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u5730\\u5740\\u7684\\u5b58\\u50a8\\u4f4d\\u7f6e\\r\\n    uint256 private constant defaultIndex = 0;// \\u9ed8\\u8ba4\\u7d22\\u5f15\\r\\n\\r\\n    /**\\r\\n     * @dev \\u6784\\u9020\\u51fd\\u6570\\r\\n     * @param multiSignature \\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u5730\\u5740\\r\\n     * @notice \\u5c06\\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u5730\\u5740\\u4fdd\\u5b58\\u5230\\u56fa\\u5b9a\\u7684\\u5b58\\u50a8\\u4f4d\\u7f6e\\r\\n     */\\r\\n    constructor(address multiSignature) {\\r\\n        require(multiSignature != address(0), \\\"multiSignatureClient : Multiple signature contract address is zero!\\\");\\r\\n        saveValue(multiSignaturePosition, uint256(uint160(multiSignature)));\\r\\n    }\\r\\n\\r\\n    //\\u4ece\\u5b58\\u50a8\\u4e2d\\u8bfb\\u53d6\\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u5730\\u5740\\r\\n    function getMultiSignatureAddress() public view returns (address){\\r\\n        return address(uint160(getValue(multiSignaturePosition)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u591a\\u7b7e\\u540d\\u9a8c\\u8bc1\\u4fee\\u9970\\u7b26\\r\\n     * @notice \\u4f7f\\u7528\\u6b64\\u4fee\\u9970\\u7b26\\u7684\\u51fd\\u6570\\u53ea\\u6709\\u5728\\u591a\\u7b7e\\u540d\\u9a8c\\u8bc1\\u901a\\u8fc7\\u540e\\u624d\\u80fd\\u6267\\u884c\\r\\n     * @notice \\u8fd9\\u662f\\u6574\\u4e2a\\u591a\\u7b7e\\u540d\\u7cfb\\u7edf\\u7684\\u6838\\u5fc3\\u9a8c\\u8bc1\\u673a\\u5236\\r\\n     */\\r\\n    modifier validCall(){\\r\\n        checkMultiSignature();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u68c0\\u67e5\\u591a\\u7b7e\\u540d\\u9a8c\\u8bc1\\r\\n     * @notice \\u6838\\u5fc3\\u9a8c\\u8bc1\\u903b\\u8f91\\uff1a\\r\\n     * 1. \\u751f\\u6210\\u6d88\\u606f\\u54c8\\u5e0c\\uff08\\u8c03\\u7528\\u8005\\u5730\\u5740 + \\u5f53\\u524d\\u5408\\u7ea6\\u5730\\u5740\\uff09\\r\\n     * 2. \\u5411\\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u67e5\\u8be2\\u8be5\\u54c8\\u5e0c\\u662f\\u5426\\u6709\\u8db3\\u591f\\u7684\\u7b7e\\u540d\\r\\n     * 3. \\u5982\\u679c\\u6ca1\\u6709\\u8db3\\u591f\\u7b7e\\u540d\\uff0c\\u4ea4\\u6613\\u5c06\\u56de\\u6eda\\r\\n     */\\r\\n    function checkMultiSignature() internal view {\\r\\n        uint256 value;\\r\\n        // \\u83b7\\u53d6\\u8c03\\u7528\\u7684\\u4ee5\\u592a\\u5e01\\u503c\\uff08\\u5f53\\u524d\\u672a\\u4f7f\\u7528\\uff0c\\u4e3a\\u672a\\u6765\\u6269\\u5c55\\u9884\\u7559\\uff09\\r\\n        assembly {\\r\\n            value:=callvalue()\\r\\n        }\\r\\n        // \\u751f\\u6210\\u552f\\u4e00\\u7684\\u6d88\\u606f\\u54c8\\u5e0c\\uff1a\\u8c03\\u7528\\u8005\\u5730\\u5740 + \\u76ee\\u6807\\u5408\\u7ea6\\u5730\\u5740\\r\\n        // \\u8fd9\\u786e\\u4fdd\\u4e86\\u6bcf\\u4e2a(\\u8c03\\u7528\\u8005, \\u76ee\\u6807\\u5408\\u7ea6)\\u7ec4\\u5408\\u90fd\\u6709\\u552f\\u4e00\\u7684\\u54c8\\u5e0c\\r\\n        bytes32 msghash = keccak256(abi.encodePacked(msg.sender, address(this)));\\r\\n        // \\u83b7\\u53d6\\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\u5730\\u5740\\r\\n        address multiSign=getMultiSignatureAddress();\\r\\n\\r\\n        // \\u67e5\\u8be2\\u591a\\u7b7e\\u540d\\u5408\\u7ea6\\uff0c\\u68c0\\u67e5\\u662f\\u5426\\u6709\\u8db3\\u591f\\u7684\\u7b7e\\u540d\\r\\n        // getValidSignature\\u7684\\u5b9e\\u73b0\\u903b\\u8f91\\uff08\\u5728multiSignature.sol\\u4e2d\\uff09\\uff1a\\r\\n        // 1. \\u904d\\u5386\\u8be5msgHash\\u5bf9\\u5e94\\u7684\\u6240\\u6709\\u7533\\u8bf7\\r\\n        // 2. \\u68c0\\u67e5\\u6bcf\\u4e2a\\u7533\\u8bf7\\u7684\\u7b7e\\u540d\\u6570\\u91cf\\u662f\\u5426 >= threshold\\r\\n        // 3. \\u5982\\u679c\\u627e\\u5230\\u8fbe\\u5230\\u9608\\u503c\\u7684\\u7533\\u8bf7\\uff0c\\u8fd4\\u56de\\u5176\\u7d22\\u5f15+1\\uff08\\u786e\\u4fdd\\u975e\\u96f6\\uff09\\r\\n        // 4. \\u5982\\u679c\\u6ca1\\u6709\\u627e\\u5230\\uff0c\\u8fd4\\u56de0\\r\\n        uint256 newIndex=IMultiSignature(multiSign).getValidSignature(msghash,defaultIndex);\\r\\n        require(newIndex>defaultIndex,\\\"multiSignatureClient : This tx is not aprroved\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u4fdd\\u5b58\\u503c\\u5230\\u6307\\u5b9a\\u5b58\\u50a8\\u4f4d\\u7f6e\\r\\n     * @param position \\u5b58\\u50a8\\u4f4d\\u7f6e\\uff08\\u4f7f\\u7528keccak256\\u751f\\u6210\\u7684\\u552f\\u4e00\\u4f4d\\u7f6e\\uff09\\r\\n     * @param value \\u8981\\u4fdd\\u5b58\\u7684\\u503c\\r\\n     * @notice \\u4f7f\\u7528\\u5185\\u8054\\u6c47\\u7f16\\u76f4\\u63a5\\u64cd\\u4f5c\\u5b58\\u50a8\\uff0c\\u63d0\\u9ad8gas\\u6548\\u7387\\r\\n     */\\r\\n    function saveValue(uint256 position, uint256 value) internal {\\r\\n        assembly {\\r\\n            sstore(position, value)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u4ece\\u6307\\u5b9a\\u5b58\\u50a8\\u4f4d\\u7f6e\\u8bfb\\u53d6\\u503c\\r\\n     * @param position \\u5b58\\u50a8\\u4f4d\\u7f6e\\uff08\\u4f7f\\u7528keccak256\\u751f\\u6210\\u7684\\u552f\\u4e00\\u4f4d\\u7f6e\\uff09\\r\\n     * @return value \\u8bfb\\u53d6\\u7684\\u503c\\r\\n     * @notice \\u4f7f\\u7528\\u5185\\u8054\\u6c47\\u7f16\\u76f4\\u63a5\\u64cd\\u4f5c\\u5b58\\u50a8\\uff0c\\u63d0\\u9ad8gas\\u6548\\u7387\\r\\n     */\\r\\n    function getValue(uint256 position) internal view returns (uint256 value) {\\r\\n        assembly {\\r\\n            value := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x2c55c72f29f3106655ee9ad2b23f08365d6911361961c104d370bc6766b8ff76\",\"license\":\"MIT\"},\"contracts/pledage/PledgePool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../library/SafeTransfer.sol\\\";\\n\\nimport \\\"../interface/IBscPledgeOracle.sol\\\";\\nimport \\\"../interface/IDebtToken.sol\\\";\\nimport \\\"../interface/IUniswapV2Router02.sol\\\";\\nimport \\\"../multiSignature/multiSignatureClient.sol\\\";\\n\\ncontract PledgePool is ReentrancyGuard,multiSignatureClient,SafeTransfer {\\n\\n    using Math for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    // \\u8f85\\u52a9\\u51fd\\u6570\\uff1a\\u5b89\\u5168\\u7684\\u6570\\u5b66\\u8fd0\\u7b97\\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = a.tryAdd(b);\\n        require(success, \\\"SafeMath: addition overflow\\\");\\n        return result;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = a.trySub(b);\\n        require(success, \\\"SafeMath: subtraction overflow\\\");\\n        return result;\\n    }\\n\\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = a.tryMul(b);\\n        require(success, \\\"SafeMath: multiplication overflow\\\");\\n        return result;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = a.tryDiv(b);\\n        require(success, \\\"SafeMath: division overflow\\\");\\n        return result;\\n    }\\n    //default decimals\\n    uint256 constant internal calDecimals=1e18;\\n    //based on the decimals of the commission and interest\\n    uint256 constant internal baseDecimal=1e8;\\n    uint256 public minAmount = 100e18;\\n    //365days\\n    uint256 constant internal baseYear=365 days;\\n\\n    enum PoolState {\\n        MATCH, //\\u5339\\u914d\\u4e2d - \\u7528\\u6237\\u53ef\\u4ee5\\u5b58\\u6b3e\\n        EXECUTION, //\\u6267\\u884c\\u4e2d - \\u501f\\u8d37\\u751f\\u6548\\uff0c\\u8ba1\\u606f\\u5f00\\u59cb\\n        FINISH, //\\u5b8c\\u6210  - \\u6b63\\u5e38\\u5230\\u671f\\u7ed3\\u7b97\\n        LIQUIDATION, //\\u6e05\\u7b97 - \\u89e6\\u53d1\\u98ce\\u9669\\u6e05\\u7b97\\n        UNDONE //\\u672a\\u5b8c\\u6210- \\u5f02\\u5e38\\u72b6\\u6001\\uff0c\\u5141\\u8bb8\\u7d27\\u6025\\u63d0\\u53d6\\n    }\\n    PoolState constant defaultChoice = PoolState.MATCH;\\n    //\\u5168\\u5c40\\u6682\\u505c\\n    bool public globalPaused =false;\\n    //pancake swap router UniSwapV2\\n    address public swapRouter;\\n    //receiving fee address \\n    address public feeAddress;\\n    //oracle address\\n    IBscPledgeOracle public oracle;\\n    //fee\\n    uint256 public lendFee;\\n    uint256 public borrowFee;\\n\\n    struct PoolBaseInfo {\\n        uint256 settleTime; //\\u7ed3\\u7b97\\u65f6\\u95f4  \\u5f00\\u59cb\\u8ba1\\u606f\\u7684\\u65f6\\u95f4\\u70b9\\n        uint256 endTime; //\\u7ed3\\u675f\\u65f6\\u95f4 \\u8d37\\u6b3e\\u7684\\u671f\\u9650\\n        uint256 interestRate; //\\u6c60\\u5b50\\u7684\\u56fa\\u5b9a\\u5229\\u7387 \\u5355\\u4f4d\\u662f1e8 \\u6309\\u5e74\\u7b97\\n        uint256 maxSupply; //\\u6c60\\u5b50\\u6700\\u5927\\u9650\\u989d \\u6bd4\\u5982100\\u4e07 \\u6295\\u8d44\\u4eba\\u6700\\u591a\\u5f80\\u91cc\\u9762\\u653e100\\u4e07\\u8d44\\u91d1\\n        uint256 lendSupply; //\\u524d\\u51fa\\u501f\\u8d44\\u91d1\\u603b\\u91cf \\u51fa\\u501f\\u4eba\\u5b58\\u5165\\u7684\\u8d44\\u91d1\\u603b\\u548c\\n        uint256 borrowSupply; //\\u5f53\\u524d\\u5b9e\\u9645\\u501f\\u51fa\\u7684\\u62b5\\u62bc\\u65b9\\u4ee3\\u5e01\\u6570\\u91cf\\n        uint256 martgageRate; //\\u6c60\\u7684\\u62b5\\u62bc\\u7387\\uff0c\\u5355\\u4f4d\\u662f1e8\\n        address lendToken; //\\u501f\\u6b3e\\u65b9\\u501f\\u51fa\\u4ee3\\u5e01\\u5730\\u5740\\uff08\\u6bd4\\u5982BUSD \\u7a33\\u5b9a\\u5e01\\uff09\\n        address borrowToken; //\\u501f\\u6b3e\\u65b9\\u62b5\\u62bc\\u4ee3\\u5e01\\u5730\\u5740\\uff08\\u6bd4\\u5982BTC \\u62b5\\u62bc\\u5e01\\uff09\\n        PoolState state; //\\u6c60\\u5b50\\u72b6\\u6001 \\\"MATCH\\\" \\\"EXECUTION\\\" \\\"FINISH\\\" \\\"LIQUIDATION\\\" \\\"UNDONE\\\"\\n        IDebtToken spCoin; //sp_token\\u7684ERC20 \\u5730\\u5740 \\u6bd4\\u5982\\uff08spBUSD_1..\\uff09\\u4f9b\\u5e94\\u65b9\\u51ed\\u8bc1\\n        IDebtToken jpCoin; //jp_token\\u7684ERC20 \\u5730\\u5740 \\u6bd4\\u5982\\uff08jpBTC_1\\uff09  \\u62b5\\u62bc\\u51ed\\u8bc1\\n        uint256 autoLiquidateThreshold; //\\u81ea\\u52a8\\u6e05\\u7b97\\u9608\\u503c\\n    }\\n\\n    //total pool base info\\n    PoolBaseInfo[] public poolBaseInfos;\\n\\n    //\\u6bcf\\u4e2a\\u6c60\\u7684\\u6570\\u636e\\u4fe1\\u606f\\n    struct PoolDataInfo {\\n        uint256 settleAmountLend;       // \\u7ed3\\u7b97\\u65f6\\u7684\\u5b9e\\u9645\\u51fa\\u501f\\u91d1\\u989d\\n        uint256 settleAmountBorrow;     // \\u7ed3\\u7b97\\u65f6\\u7684\\u5b9e\\u9645\\u501f\\u6b3e\\u91d1\\u989d\\n        uint256 finishAmountLend;       // \\u5b8c\\u6210\\u65f6\\u7684\\u5b9e\\u9645\\u51fa\\u501f\\u91d1\\u989d\\n        uint256 finishAmountBorrow;     // \\u5b8c\\u6210\\u65f6\\u7684\\u5b9e\\u9645\\u501f\\u6b3e\\u91d1\\u989d\\n        uint256 liquidationAmountLend;   // \\u6e05\\u7b97\\u65f6\\u7684\\u5b9e\\u9645\\u51fa\\u501f\\u91d1\\u989d\\n        uint256 liquidationAmountBorrow; // \\u6e05\\u7b97\\u65f6\\u7684\\u5b9e\\u9645\\u501f\\u6b3e\\u91d1\\u989d\\n    }\\n\\n    //total pool data info\\n    PoolDataInfo[] public poolDataInfos;\\n\\n    struct BorrowInfo {\\n        uint256 stakeAmount;        // \\u7528\\u6237\\u8d28\\u62bc\\u7684\\u62b5\\u62bc\\u54c1\\u91d1\\u989d\\uff08\\u5982BTC\\u6570\\u91cf\\uff09\\n        uint256 refundAmount;       // \\u8d85\\u989d\\u8d28\\u62bc\\u7684\\u9000\\u6b3e\\u91d1\\u989d\\n        bool hasNoRefund;             // \\u662f\\u5426\\u5df2\\u9000\\u8fd8\\u8d85\\u989d\\u8d28\\u62bc\\uff1afalse=\\u672a\\u9000\\u6b3e\\uff0ctrue=\\u5df2\\u9000\\u6b3e\\n        bool hasNoClaim;              // \\u662f\\u5426\\u5df2\\u8ba4\\u9886JP\\u4ee3\\u5e01\\uff1afalse=\\u672a\\u8ba4\\u9886\\uff0ctrue=\\u5df2\\u8ba4\\u9886\\n    }\\n\\n    //  {user.address : {pool.index : user.borrowInfo}}\\n    mapping(address =>mapping(uint256 => BorrowInfo)) public userBorrowInfo;\\n\\n    // \\u501f\\u6b3e\\u7528\\u6237\\u4fe1\\u606f\\n    struct LendInfo {\\n        uint256 stakeAmount;          // \\u7528\\u6237\\u5b58\\u5165\\u7684\\u51fa\\u501f\\u8d44\\u91d1\\u91d1\\u989d\\uff08\\u5982USDC\\u6570\\u91cf\\uff09\\n        uint256 refundAmount;         // \\u8d85\\u989d\\u5b58\\u6b3e\\u7684\\u9000\\u6b3e\\u91d1\\u989d\\n        bool hasNoRefund;             // \\u662f\\u5426\\u5df2\\u9000\\u8fd8\\u8d85\\u989d\\u5b58\\u6b3e\\uff1afalse=\\u672a\\u9000\\u6b3e\\uff0ctrue=\\u5df2\\u9000\\u6b3e\\n        bool hasNoClaim;              // \\u662f\\u5426\\u5df2\\u8ba4\\u9886SP\\u4ee3\\u5e01\\uff1afalse=\\u672a\\u8ba4\\u9886\\uff0ctrue=\\u5df2\\u8ba4\\u9886\\n    }\\n\\n    //  {user.address : {pool.index : user.lendInfo}}\\n    mapping(address =>mapping(uint256 => LendInfo)) public userLendInfo;\\n\\n    // \\u4e8b\\u4ef6\\n    // \\u5b58\\u6b3e\\u501f\\u51fa\\u4e8b\\u4ef6\\uff0cfrom\\u662f\\u5b58\\u6b3e\\u51fa\\u501f\\u8005\\u5730\\u5740\\uff0ctoken\\u662f\\u5b58\\u5165\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\uff0camount\\u662f\\u501f\\u51fa\\u7684\\u6570\\u91cf\\uff0cmintAmount\\u662f\\u751f\\u6210\\u7684\\u6570\\u91cf\\n    event DepositLend(address indexed from,address indexed token,uint256 amount,uint256 mintAmount);\\n    // \\u51fa\\u501f\\u9000\\u8fd8\\u8d85\\u989d\\u5b58\\u6b3e\\u4e8b\\u4ef6\\uff0cfrom\\u662f\\u5b58\\u6b3e\\u51fa\\u501f\\u8005\\u5730\\u5740\\uff0ctoken\\u662f\\u5b58\\u5165\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\uff0crefund\\u662f\\u9000\\u6b3e\\u7684\\u6570\\u91cf\\n    event RefundLend(address indexed from,address indexed token,uint256 refund);\\n    // \\u51fa\\u501f\\u9886\\u53d6SP\\u4ee3\\u5e01\\u4e8b\\u4ef6\\uff0cfrom\\u662f\\u9886\\u53d6\\u8005\\u5730\\u5740\\uff0ctoken\\u662f\\u5b58\\u5165\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\uff0camount\\u9886\\u53d6\\u7684SP\\u4ee3\\u5e01\\u6570\\u91cf\\n    event ClaimLend(address indexed from,address indexed token,uint256 amount);\\n    // \\u51fa\\u501f\\u65b9\\u63d0\\u53d6\\u5b58\\u6b3e\\u4e8b\\u4ef6\\uff0cfrom\\u662f\\u63d0\\u53d6\\u8005\\u5730\\u5740\\uff0ctoken\\u662f\\u63d0\\u53d6\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\uff0camount\\u662f\\u63d0\\u53d6\\u7684\\u6570\\u91cf\\uff0cburnAmount\\u662f\\u9500\\u6bc1SP_coin\\u7684\\u6570\\u91cf\\n    event WithdrawLend(address indexed from,address indexed token,uint256 amount,uint256 burnAmount);\\n    // \\u51fa\\u501f\\u4eba\\u7d27\\u6025\\u63d0\\u53d6\\u5b58\\u6b3e\\u4e8b\\u4ef6\\uff0cfrom\\u662f\\u63d0\\u53d6\\u8005\\u5730\\u5740\\uff0ctoken\\u662f\\u63d0\\u53d6\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\uff0camount\\u662f\\u63d0\\u53d6\\u7684\\u6570\\u91cf\\n    event EmergencyLendWithdrawal(address indexed from,address indexed token,uint256 amount);\\n\\n    //---------------------------------------------\\n    // \\u501f\\u6b3e\\u65b9\\u5b58\\u6b3e\\u4e8b\\u4ef6\\n    event DepositBorrow(address indexed from,address indexed token,uint256 amount,uint256 mintAmount);\\n    event RefundBorrow(address indexed from,address indexed token,uint256 refund);\\n    event ClaimBorrow(address indexed from, address indexed token, uint256 amount); \\n    // \\u63d0\\u53d6\\u501f\\u5165\\u4e8b\\u4ef6\\uff0cfrom\\u662f\\u63d0\\u53d6\\u8005\\u5730\\u5740\\uff0ctoken\\u662f\\u63d0\\u53d6\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\uff0camount\\u662f\\u63d0\\u53d6\\u7684\\u6570\\u91cf\\uff0cburnAmount\\u662f\\u9500\\u6bc1\\u7684\\u6570\\u91cf\\n    event WithdrawBorrow(address indexed from,address indexed token,uint256 amount,uint256 burnAmount); \\n    event EmergencyBorrowWithdrawal(address indexed from, address indexed token, uint256 amount); \\n\\n    // \\u72b6\\u6001\\u6539\\u53d8\\u4e8b\\u4ef6\\uff0c_pid\\u662f\\u6c60\\u7d22\\u5f15\\uff0coldState\\u662f\\u65e7\\u72b6\\u6001\\uff0cnewState\\u662f\\u65b0\\u72b6\\u6001\\n    event StateChange(uint256 indexed _pid, uint256 indexed oldState, uint256 indexed newState);\\n    // \\u8bbe\\u7f6e\\u8d39\\u7528\\u4e8b\\u4ef6\\uff0cnewLendFee\\u662f\\u65b0\\u7684\\u501f\\u51fa\\u8d39\\u7528\\uff0cnewBorrowFee\\u662f\\u65b0\\u7684\\u501f\\u5165\\u8d39\\u7528\\n    event SetFee(uint256 indexed newLendFee, uint256 indexed newBorrowFee);\\n    // \\u4ea4\\u6362\\u4e8b\\u4ef6\\uff0cfromCoin\\u662f\\u4ea4\\u6362\\u524d\\u7684\\u5e01\\u79cd\\u5730\\u5740\\uff0ctoCoin\\u662f\\u4ea4\\u6362\\u540e\\u7684\\u5e01\\u79cd\\u5730\\u5740\\uff0cfromValue\\u662f\\u4ea4\\u6362\\u524d\\u7684\\u6570\\u91cf\\uff0ctoValue\\u662f\\u4ea4\\u6362\\u540e\\u7684\\u6570\\u91cf\\n    event Swap(address indexed fromCoin,address indexed toCoin,uint256 fromValue,uint256 toValue);\\n    event SetSwapRouterAddress(address indexed oldSwapAddress, address indexed newSwapAddress); \\n    event SetFeeAddress(address indexed oldFeeAddress, address indexed newFeeAddress);\\n    event SetMinAmount(uint256 indexed oldMinAmount, uint256 indexed newMinAmount);\\n\\n    constructor(\\n        address _oracle,\\n        address _swapRouter,\\n        address payable _feeAddress, \\n        address _multiSignature)\\n    multiSignatureClient(_multiSignature) {\\n        require(_oracle != address(0),\\\"PledgePool : oracle is zero address\\\");\\n        require(_swapRouter != address(0),\\\"PledgePool : swapRouter is zero address\\\");\\n        require(_feeAddress != address(0),\\\"PledgePool : feeAddress is zero address\\\");\\n        oracle=IBscPledgeOracle(_oracle);\\n        swapRouter=_swapRouter;\\n        feeAddress=_feeAddress;\\n        lendFee=0;\\n        borrowFee=0;\\n    }\\n\\n    function setFee(uint256 _lendFee,uint256 _borrowFee) validCall external {\\n        lendFee=_lendFee;\\n        borrowFee=_borrowFee;\\n        emit SetFee(_lendFee,_borrowFee);\\n    }\\n\\n    function setSwapRouter(address _swapRouter) validCall external {\\n        require(_swapRouter != address(0),\\\"PledgePool : swapRouter is zero address\\\");\\n        emit SetSwapRouterAddress(swapRouter,_swapRouter);\\n        swapRouter=_swapRouter;\\n    }\\n\\n    /**\\n     * @dev Set up the address to receive the handling fee\\n     * @notice Only allow administrators to operate\\n     */\\n    function setFeeAddress(address _feeAddress) validCall external {\\n        require(_feeAddress != address(0),\\\"PledgePool : feeAddress is zero address\\\");\\n        emit SetFeeAddress(feeAddress,_feeAddress);\\n        feeAddress=_feeAddress;\\n    }\\n\\n    function setMinAmount(uint256 _minAmount) validCall external {\\n        require(_minAmount > 0,\\\"PledgePool : minAmount is zero\\\");\\n        emit SetMinAmount(minAmount,_minAmount);\\n        minAmount=_minAmount;\\n    }\\n\\n    \\n    function PoolLength() external view returns (uint256) {\\n        return poolBaseInfos.length;\\n    }\\n    /**\\n     * @dev \\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684\\u501f\\u8d37\\u6c60\\u3002\\u51fd\\u6570\\u63a5\\u6536\\u4e00\\u7cfb\\u5217\\u53c2\\u6570\\uff0c\\n     * \\u5305\\u62ec\\u7ed3\\u7b97\\u65f6\\u95f4\\u3001\\u7ed3\\u675f\\u65f6\\u95f4\\u3001\\u5229\\u7387\\u3001\\u6700\\u5927\\u4f9b\\u5e94\\u91cf\\u3001\\u62b5\\u62bc\\u7387\\u3001\\u5b58\\u5165\\u4ee3\\u5e01\\u3001\\u501f\\u51fa\\u4ee3\\u5e01\\u3001SP\\u4ee3\\u5e01\\u3001JP\\u4ee3\\u5e01\\u548c\\u81ea\\u52a8\\u6e05\\u7b97\\u9608\\u503c\\u3002\\n     *  Can only be called by the owner.\\n     */\\n    function createPool(uint256 _settleTime,uint256 _endTime,\\n        uint256 _interestRate,uint256 _maxSupply,uint256 _martgageRate,\\n        address _lendToken,address _borrowToken,address _spToken,\\n        address _jpToken,uint256 _autoLiquidateThreshold) validCall public  {\\n        //\\u9700\\u8981\\u7ed3\\u675f\\u65f6\\u95f4\\u5927\\u4e8e\\u7ed3\\u7b97\\u65f6\\u95f4\\n        require(_endTime > _settleTime,\\\"createPool : endTime must be greater than settleTime\\\");\\n        require(_jpToken != address(0),\\\"createPool : jpToken is zero address\\\");\\n        require(_spToken!= address(0),\\\"createPool : spToken is zero address\\\");\\n\\n        poolBaseInfos.push(PoolBaseInfo({\\n            settleTime: _settleTime,\\n            endTime: _endTime,\\n            interestRate: _interestRate,\\n            maxSupply: _maxSupply,\\n            lendSupply: 0,\\n            borrowSupply: 0,\\n            martgageRate: _martgageRate,\\n            lendToken: _lendToken,\\n            borrowToken: _borrowToken,\\n            state: defaultChoice,\\n            spCoin: IDebtToken(_spToken),\\n            jpCoin: IDebtToken(_jpToken),\\n            autoLiquidateThreshold: _autoLiquidateThreshold\\n        }));\\n        //\\u63a8\\u5165\\u6c60\\u6570\\u636e\\u4fe1\\u606f\\n        poolDataInfos.push(PoolDataInfo({\\n            settleAmountLend: 0,\\n            settleAmountBorrow: 0,\\n            finishAmountLend: 0,\\n            finishAmountBorrow: 0,\\n            liquidationAmountLend: 0,\\n            liquidationAmountBorrow: 0\\n        }));\\n    }\\n\\n    function getPoolState(uint256 _pid) public view returns (uint256){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        return uint256(pool.state);\\n    }\\n\\n    /**\\n     * @dev \\u51fa\\u501f\\u4eba\\u6267\\u884c\\u5b58\\u6b3e\\u64cd\\u4f5c\\uff0c\\u5c06\\u8d44\\u91d1\\u5b58\\u5165\\u501f\\u8d37\\u6c60\\n     * @notice \\u6c60\\u72b6\\u6001\\u5fc5\\u987b\\u4e3aMATCH\\n     * @param _pid \\u662f\\u6c60\\u7d22\\u5f15\\n     * | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f |\\n     * | `depositLend` | MATCH | \\u7ed3\\u7b97\\u524d | \\u5b58\\u5165\\u8d44\\u91d1 | \\u8f6c\\u5165\\u6c60\\u4e2d | \\u63d0\\u4f9b\\u501f\\u8d37\\u8d44\\u91d1 |\\n     * @param _stakeAmount \\u662f\\u7528\\u6237\\u7684\\u8d28\\u62bc\\u91d1\\u989d\\n     */\\n    function depositLend(uint256 _pid,uint256 _stakeAmount) external payable nonReentrant notPause timeBeforeSettle(_pid)\\n        stateMatch(_pid) \\n    {\\n        PoolBaseInfo storage pool =poolBaseInfos[_pid];\\n        LendInfo storage lendInfo = userLendInfo[msg.sender][_pid];\\n        // \\u68c0\\u67e5\\u5b58\\u6b3e\\u91d1\\u989d\\u662f\\u5426\\u8d85\\u8fc7\\u6c60\\u7684\\u5269\\u4f59\\u5bb9\\u91cf\\n        require(_stakeAmount <= safeSub(pool.maxSupply, pool.lendSupply), \\\"depositLend : stakeAmount is greater than maxSupply\\\");\\n        uint256 amount = getPayableAmount(pool.lendToken,_stakeAmount);\\n        require(amount>minAmount, \\\"depositLend: amount less than minimum deposit\\\");\\n\\n        lendInfo.hasNoClaim=false;  // \\u91cd\\u7f6e\\u9886\\u53d6\\u6807\\u5fd7\\uff0c\\u5141\\u8bb8\\u7528\\u6237\\u9886\\u53d6SP\\u4ee3\\u5e01\\n        lendInfo.hasNoRefund=false; // \\u91cd\\u7f6e\\u9000\\u6b3e\\u6807\\u5fd7\\uff0c\\u5141\\u8bb8\\u7528\\u6237\\u7533\\u8bf7\\u9000\\u6b3e\\n        //\\u5904\\u7406\\u8d44\\u91d1\\u72b6\\u6001\\u66f4\\u65b0\\n        if(pool.lendToken == address(0)){\\n            //\\u5982\\u679c\\u662fETH:\\u4f7f\\u7528msg.value \\u76f4\\u63a5\\u66f4\\u65b0\\u4f59\\u989d\\n            lendInfo.stakeAmount = safeAdd(lendInfo.stakeAmount, msg.value);\\n            pool.lendSupply = safeAdd(pool.lendSupply, msg.value);\\n        }else{\\n            //\\u5982\\u679c\\u662fERC20\\u4ee3\\u5e01:\\u4f7f\\u7528SafeERC20.safeTransferFrom \\u4ece\\u7528\\u6237\\u8d26\\u6237\\u8f6c\\u5165\\n            lendInfo.stakeAmount = safeAdd(lendInfo.stakeAmount, amount);\\n            pool.lendSupply = safeAdd(pool.lendSupply, amount);\\n        }\\n        emit DepositLend(msg.sender,pool.lendToken,_stakeAmount,amount);\\n    }\\n\\n    /**\\n     * @dev \\u9000\\u8fd8\\u8fc7\\u91cf\\u5b58\\u6b3e\\u7ed9\\u5b58\\u6b3e\\u4eba\\n     * @notice \\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210\\n     * | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u63d0\\u53d6\\u91d1\\u989d | \\u662f\\u5426\\u8ba1\\u7b97\\u5229\\u606f | \\u4f7f\\u7528\\u573a\\u666f |\\n     * | `refundLend` | EXECUTION/FINISH/LIQUIDATION | \\u8d85\\u989d\\u90e8\\u5206 | \\u274c \\u4e0d\\u8ba1\\u7b97\\u5229\\u606f | \\u9000\\u8fd8\\u8d85\\u989d\\u5b58\\u6b3e |\\n     * @param _pid \\u662f\\u6c60\\u7d22\\u5f15\\n     */\\n    function refundLend(uint256 _pid) external nonReentrant notPause timeAfterSettle(_pid)\\n    stateNotMatchUndone(_pid)\\n    {\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        LendInfo storage lendInfo = userLendInfo[msg.sender][_pid];\\n\\n        require(lendInfo.stakeAmount>0,\\\"refundLend : not pledged\\\"); // \\u9700\\u8981\\u7528\\u6237\\u5df2\\u7ecf\\u8d28\\u62bc\\u4e86\\u4e00\\u5b9a\\u6570\\u91cf\\n        require(safeSub(pool.lendSupply, data.settleAmountLend) > 0, \\\"refundLend : not refund\\\");// \\u9700\\u8981\\u6c60\\u4e2d\\u8fd8\\u6709\\u672a\\u9000\\u8fd8\\u7684\\u91d1\\u989d\\n        require(!lendInfo.hasNoRefund,\\\"refundLend : already refunded\\\");// \\u9700\\u8981\\u7528\\u6237\\u6ca1\\u6709\\u7533\\u8bf7\\u8fc7\\u9000\\u6b3e\\n\\n        //\\u7528\\u6237\\u4efd\\u989d=\\u5f53\\u524d\\u8d28\\u62bc\\u91d1\\u989d/\\u603b\\u91d1\\u989d\\n        uint256 userShare = safeDiv(safeMul(lendInfo.stakeAmount, calDecimals), pool.lendSupply);\\n        // refundAmount = \\u603b\\u9000\\u6b3e\\u91d1\\u989d * \\u7528\\u6237\\u4efd\\u989d\\n        uint256 refundAmount = safeDiv(safeMul(safeSub(pool.lendSupply, data.settleAmountLend), userShare), calDecimals);\\n\\n        lendInfo.refundAmount=refundAmount;\\n        lendInfo.hasNoRefund=true;\\n        // \\u9000\\u8fd8\\u8d44\\u91d1\\n        _redeem(payable(msg.sender),pool.lendToken,refundAmount);\\n        // \\u66f4\\u65b0\\u7528\\u6237\\u4fe1\\u606f\\n        lendInfo.hasNoRefund = true;\\n        lendInfo.refundAmount = safeAdd(refundAmount, lendInfo.refundAmount);\\n        emit RefundLend(msg.sender,pool.lendToken,refundAmount);\\n    }\\n\\n     /**\\n     * @dev \\u5b58\\u6b3e\\u4eba\\u63a5\\u6536 sp_token,\\u4e3b\\u8981\\u529f\\u80fd\\u662f\\u8ba9\\u5b58\\u6b3e\\u4eba\\u9886\\u53d6 sp_token\\n     * @notice \\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210\\n     * @param _pid \\u662f\\u6c60\\u7d22\\u5f15 \\n     * | \\u51fd\\u6570 | \\u89d2\\u8272 | \\u64cd\\u4f5c | \\u76ee\\u7684 |\\n     * | claimLend | \\u51fa\\u501f\\u4eba | \\u83b7\\u5f97SP\\u4ee3\\u5e01 | \\u83b7\\u5f97\\u8d44\\u91d1\\u51ed\\u8bc1 |\\n     */\\n    function claimLend(uint256 _pid) external nonReentrant notPause timeAfterSettle(_pid)\\n    stateNotMatchUndone(_pid)\\n    {\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        LendInfo storage lendInfo = userLendInfo[msg.sender][_pid];\\n        //\\u91d1\\u989d\\u9650\\u5236\\n        require(lendInfo.stakeAmount>0,\\\"claimLend :cannot get sp_token\\\"); //\\u9700\\u8981\\u7528\\u6237\\u7684\\u8d28\\u62bc\\u91d1\\u989d\\u5927\\u4e8e0\\n        require(lendInfo.hasNoClaim==false,\\\"claimLend :already claimed\\\"); //\\u9700\\u8981\\u7528\\u6237\\u6ca1\\u6709\\u9886\\u53d6\\u8fc7sp_token\\n    \\n        //\\u7528\\u6237\\u4efd\\u989d=\\u5f53\\u524d\\u8d28\\u62bc\\u91d1\\u989d/\\u603b\\u91d1\\u989d\\n        uint256 userShare = safeDiv(safeMul(lendInfo.stakeAmount, calDecimals), pool.lendSupply);\\n        uint256 totalSpAmount=data.settleAmountLend;// \\u603b\\u7684Sp\\u91d1\\u989d\\u7b49\\u4e8e\\u501f\\u6b3e\\u7ed3\\u7b97\\u91d1\\u989d\\n        // \\u7528\\u6237 sp \\u91d1\\u989d = totalSpAmount * \\u7528\\u6237\\u4efd\\u989d\\n        uint256 spAmount = safeDiv(safeMul(totalSpAmount, userShare), calDecimals);\\n        pool.spCoin.mint(msg.sender,spAmount);        // \\u94f8\\u9020 sp token \\u7ed9\\u5b58\\u6b3e\\u4eba\\n        lendInfo.hasNoClaim=true; // \\u66f4\\u65b0\\u7528\\u6237\\u4fe1\\u606f\\n        emit ClaimLend(msg.sender, pool.lendToken, spAmount); // \\u89e6\\u53d1\\u9886\\u53d6\\u5b58\\u6b3e\\u4eba\\u9886\\u53d6SP\\u4ee3\\u5e01\\u4e8b\\u4ef6  \\n    }\\n\\n    /**\\n     * @dev \\u5b58\\u6b3e\\u4eba\\u53d6\\u56de\\u672c\\u91d1\\u548c\\u5229\\u606f\\n     * @notice \\u6c60\\u7684\\u72b6\\u6001\\u53ef\\u80fd\\u662f\\u5b8c\\u6210\\u6216\\u6e05\\u7b97\\n     * @param _pid \\u662f\\u6c60\\u7d22\\u5f15\\n     * @param _spAmount \\u662f\\u9500\\u6bc1\\u7684sp\\u6570\\u91cf\\n     * | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u63d0\\u53d6\\u91d1\\u989d | \\u662f\\u5426\\u8ba1\\u7b97\\u5229\\u606f | \\u4f7f\\u7528\\u573a\\u666f |\\n     * | `withdrawLend` | FINISH/LIQUIDATION | \\u6309SP\\u4ee3\\u5e01\\u6bd4\\u4f8b | \\u2705 \\u8ba1\\u7b97\\u5229\\u606f | \\u6b63\\u5e38\\u5230\\u671f\\u63d0\\u53d6\\u6216\\u8005\\u6e05\\u7b97\\u63d0\\u53d6 |\\n     */\\n    function withdrawLend(uint256 _pid,uint256 _spAmount) external nonReentrant notPause\\n    stateFinishLiquidation(_pid)\\n    {\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        require(_spAmount>0,\\\"withdrawLend : spAmount is zero\\\");\\n        //\\u9500\\u6bc1sp_token\\n        pool.spCoin.burn(msg.sender,_spAmount);\\n        uint256 totalSpAmount=data.settleAmountLend;// \\u603b\\u7684Sp\\u91d1\\u989d\\u7b49\\u4e8e\\u51fa\\u501f\\u4eba\\u501f\\u6b3e\\u7ed3\\u7b97\\u91d1\\u989d\\n        // \\u7528\\u6237 sp \\u91d1\\u989d = totalSpAmount * \\u7528\\u6237\\u4efd\\u989d\\n        uint256 spShare = safeDiv(safeMul(_spAmount, calDecimals), totalSpAmount);\\n        //\\u5b8c\\u6210\\n        if(pool.state==PoolState.FINISH){\\n            require(block.timestamp>=pool.endTime,\\\"withdrawLend : not end time\\\");\\n            //\\u8d4e\\u56de\\u91d1\\u989d = finishAmountLend * sp\\u4efd\\u989d\\n            uint256 redeemAmount = safeDiv(safeMul(data.finishAmountLend, spShare), calDecimals);\\n            //\\u9000\\u6b3e\\n            _redeem(payable(msg.sender),pool.lendToken,redeemAmount);\\n            emit WithdrawLend(msg.sender,pool.lendToken,redeemAmount,_spAmount);\\n        }\\n        //\\u6e05\\u7b97\\n        if (pool.state==PoolState.LIQUIDATION){\\n            require(block.timestamp>=pool.settleTime,\\\"withdrawLend : less than settle time\\\");\\n            //\\u8d4e\\u56de\\u91d1\\u989d = liquidationAmountLend * sp\\u4efd\\u989d\\n            uint256 redeemAmount = safeDiv(safeMul(data.liquidationAmountLend, spShare), calDecimals);\\n            //\\u9000\\u6b3e\\n            _redeem(payable(msg.sender),pool.lendToken,redeemAmount);\\n            emit WithdrawLend(msg.sender,pool.lendToken,redeemAmount,_spAmount);\\n        }\\n    }\\n    /**\\n     * @dev \\u51fa\\u501f\\u4eba\\u7d27\\u6025\\u63d0\\u53d6\\u5b58\\u6b3e\\uff0c\\u7528\\u4e8e\\u5904\\u7406\\u6c60\\u5f02\\u5e38\\u60c5\\u51b5\\n     * @notice \\u6c60\\u72b6\\u6001\\u5fc5\\u987b\\u662f\\u672a\\u5b8c\\u6210 \\n     * \\u4ec0\\u4e48\\u60c5\\u51b5\\u4e0b\\u4f1a\\u51fa\\u73b0UNDONE\\uff1f\\n     * 1. **\\u53ea\\u6709\\u5b58\\u6b3e\\u6ca1\\u6709\\u501f\\u6b3e**\\uff1a\\u51fa\\u501f\\u4eba\\u5b58\\u5165\\u8d44\\u91d1\\uff0c\\u4f46\\u6ca1\\u6709\\u501f\\u6b3e\\u4eba\\u8d28\\u62bc\\u62b5\\u62bc\\u54c1\\n     * 2. **\\u53ea\\u6709\\u501f\\u6b3e\\u6ca1\\u6709\\u5b58\\u6b3e**\\uff1a\\u501f\\u6b3e\\u4eba\\u8d28\\u62bc\\u62b5\\u62bc\\u54c1\\uff0c\\u4f46\\u6ca1\\u6709\\u51fa\\u501f\\u4eba\\u63d0\\u4f9b\\u8d44\\u91d1\\n     * 3. **\\u6c60\\u521b\\u5efa\\u5931\\u8d25**\\uff1a\\u6c60\\u7684\\u914d\\u7f6e\\u6709\\u95ee\\u9898\\uff0c\\u65e0\\u6cd5\\u6b63\\u5e38\\u8fd0\\u4f5c\\n     * | \\u51fd\\u6570 | \\u72b6\\u6001\\u8981\\u6c42 | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f |\\n     * | `emergencyLendWithdrawal` | UNDONE | \\u65e0\\u9650\\u5236 | \\u7d27\\u6025\\u9000\\u51fa | \\u8f6c\\u51fa\\u5168\\u90e8\\u5b58\\u6b3e | \\u5f02\\u5e38\\u60c5\\u51b5\\u5b89\\u5168\\u9000\\u51fa |\\n     * @param _pid \\u662f\\u6c60\\u7d22\\u5f15\\n     */\\n    function emergencyLendWithdrawal(uint256 _pid) external nonReentrant notPause stateUndone(_pid)\\n    {\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];//\\u83b7\\u53d6\\u6c60\\u5b50\\u57fa\\u672c\\u4fe1\\u606f\\n        require(pool.lendSupply>0,\\\"emergencyLendWithdrawal : lendSupply is zero\\\");//\\u9a8c\\u8bc1\\u6c60\\u7684\\u8d37\\u6b3e\\u4f9b\\u5e94\\u91cf\\u5927\\u4e8e0\\n\\n        LendInfo storage lendInfo = userLendInfo[msg.sender][_pid];\\n        //\\u9a8c\\u8bc1\\u7528\\u6237\\u662f\\u5426\\u6709\\u5b58\\u6b3e\\u8bb0\\u5f55\\n        require(lendInfo.stakeAmount>0,\\\"emergencyLendWithdrawal : not pledged\\\");\\n        //\\u9a8c\\u8bc1\\u7528\\u6237\\u662f\\u5426\\u5df2\\u7ecf\\u8fdb\\u884c\\u8fc7\\u9000\\u6b3e\\n        require(lendInfo.hasNoRefund==false,\\\"emergencyLendWithdrawal : already refunded\\\");\\n        //\\u6267\\u884c\\u8d4e\\u56de\\u64cd\\u4f5c\\uff0c\\u63d0\\u53d6\\u5168\\u90e8\\u5b58\\u6b3e\\n        _redeem(payable(msg.sender),pool.lendToken,lendInfo.stakeAmount); \\n        //\\u8bbe\\u7f6e\\u5df2\\u7ecf\\u9000\\u6b3e\\u6807\\u5fd7\\u4e3a\\u771f\\n        lendInfo.hasNoRefund=true;\\n        emit EmergencyLendWithdrawal(msg.sender,pool.lendToken,lendInfo.stakeAmount);\\n    }\\n\\n    /**\\n     * @dev \\u501f\\u6b3e\\u4eba\\u8d28\\u62bc\\u64cd\\u4f5c\\n     * @param _pid \\u662f\\u6c60\\u5b50\\u7d22\\u5f15\\n     * @param _stakeAmount \\u662f\\u7528\\u6237\\u8d28\\u62bc\\u7684\\u6570\\u91cf\\n     */\\n    function depositBorrow(uint256 _pid,uint256 _stakeAmount) external payable nonReentrant notPause timeBeforeSettle(_pid) stateMatch(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        BorrowInfo storage borrowInfo = userBorrowInfo[msg.sender][_pid];\\n\\n        uint256 amount = getPayableAmount(pool.borrowToken,_stakeAmount);// \\u83b7\\u53d6\\u5e94\\u4ed8\\u91d1\\u989d\\n        require(amount > 0, 'depositBorrow: deposit amount is zero'); // \\u8981\\u6c42\\u8d28\\u62bc\\u91d1\\u989d\\u5927\\u4e8e0\\n        borrowInfo.hasNoClaim = false; // \\u8bbe\\u7f6e\\u7528\\u6237\\u672a\\u63d0\\u53d6\\u8d28\\u62bc\\u7269\\n        borrowInfo.hasNoRefund = false; // \\u8bbe\\u7f6e\\u7528\\u6237\\u672a\\u9000\\u6b3e\\n         // \\u66f4\\u65b0\\u4fe1\\u606f\\n        if (pool.borrowToken == address(0)){ // \\u5982\\u679c\\u501f\\u6b3e\\u4ee3\\u5e01\\u662f0\\u5730\\u5740\\uff08\\u5373ETH\\uff09\\n            borrowInfo.stakeAmount = safeAdd(borrowInfo.stakeAmount, msg.value); // \\u66f4\\u65b0\\u7528\\u6237\\u8d28\\u62bc\\u91d1\\u989d\\n            pool.borrowSupply = safeAdd(pool.borrowSupply, msg.value); // \\u66f4\\u65b0\\u6c60\\u5b50\\u501f\\u6b3e\\u4f9b\\u5e94\\u91cf\\n        } else{ // \\u5982\\u679c\\u501f\\u6b3e\\u4ee3\\u5e01\\u4e0d\\u662f0\\u5730\\u5740\\uff08\\u5373\\u5176\\u4ed6ERC20\\u4ee3\\u5e01\\uff09\\n            borrowInfo.stakeAmount = safeAdd(borrowInfo.stakeAmount, _stakeAmount); // \\u66f4\\u65b0\\u7528\\u6237\\u8d28\\u62bc\\u91d1\\u989d\\n            pool.borrowSupply = safeAdd(pool.borrowSupply, _stakeAmount); // \\u66f4\\u65b0\\u6c60\\u5b50\\u501f\\u6b3e\\u4f9b\\u5e94\\u91cf\\n        }\\n        emit DepositBorrow(msg.sender, pool.borrowToken, _stakeAmount, amount); // \\u89e6\\u53d1\\u8d28\\u62bc\\u501f\\u6b3e\\u4e8b\\u4ef6\\n    }\\n\\n    /**\\n     * @dev \\u9000\\u8fd8\\u7ed9\\u501f\\u6b3e\\u4eba\\u7684\\u8d85\\u989d\\u62b5\\u62bc\\u54c1\\n     * @notice \\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210\\n     * | \\u51fd\\u6570           | \\u72b6\\u6001\\u8981\\u6c42     | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b   | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f   \\n     * | `refundBorrow` | EXECUTION/FINISH/LIQUIDATION | \\u7ed3\\u7b97\\u540e   | \\u9000\\u8fd8\\u8d85\\u989d  | \\u8f6c\\u51fa\\u8d85\\u989d\\u62b5\\u62bc\\u54c1| \\u9000\\u8fd8\\u8d85\\u989d\\u8d28\\u62bc   \\n     * @param _pid \\u662f\\u6c60\\u72b6\\u6001\\n     */\\n    function refundBorrow(uint256 _pid) external nonReentrant notPause timeAfterSettle(_pid) stateNotMatchUndone(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        BorrowInfo storage borrowInfo = userBorrowInfo[msg.sender][_pid];\\n        require(safeSub(pool.borrowSupply, data.settleAmountBorrow) > 0, \\\"refundBorrow : not refund\\\");// \\u9700\\u8981\\u501f\\u6b3e\\u4f9b\\u5e94\\u91cf\\u51cf\\u53bb\\u7ed3\\u7b97\\u501f\\u6b3e\\u91cf\\u5927\\u4e8e0\\n        require(borrowInfo.stakeAmount>0,\\\"refundBorrow : not pledged\\\");// \\u9700\\u8981\\u501f\\u6b3e\\u4eba\\u7684\\u8d28\\u62bc\\u91cf\\u5927\\u4e8e0\\n        require(borrowInfo.hasNoRefund==false,\\\"refundBorrow : already refunded\\\");// \\u9700\\u8981\\u501f\\u6b3e\\u4eba\\u6ca1\\u6709\\u9000\\u6b3e\\n        //\\u7528\\u6237\\u4efd\\u989d=\\u5f53\\u524d\\u8d28\\u62bc\\u91d1\\u989d/\\u603b\\u91d1\\u989d\\n        uint256 userShare=safeDiv(safeMul(borrowInfo.stakeAmount,calDecimals),pool.borrowSupply);\\n        // refundAmount = \\u603b\\u9000\\u6b3e\\u91d1\\u989d * \\u7528\\u6237\\u4efd\\u989d\\n        uint256 refundAmount = safeDiv(safeMul(safeSub(pool.borrowSupply, data.settleAmountBorrow), userShare), calDecimals);\\n        borrowInfo.refundAmount=refundAmount; // \\u66f4\\u65b0\\u501f\\u6b3e\\u4eba\\u7684\\u9000\\u6b3e\\u91d1\\u989d\\n        borrowInfo.hasNoRefund=true;// \\u8bbe\\u7f6e\\u501f\\u6b3e\\u4eba\\u5df2\\u7ecf\\u9000\\u6b3e\\n        // \\u9000\\u8fd8\\u8d44\\u91d1\\n        _redeem(payable(msg.sender),pool.borrowToken,refundAmount);\\n        emit RefundBorrow(msg.sender,pool.borrowToken,refundAmount);\\n    }\\n    /**\\n     * @dev \\u501f\\u6b3e\\u4eba\\u63a5\\u6536 sp_token \\u548c\\u8d37\\u6b3e\\u8d44\\u91d1\\n     * @notice \\u6c60\\u72b6\\u6001\\u4e0d\\u7b49\\u4e8e\\u5339\\u914d\\u548c\\u672a\\u5b8c\\u6210\\n     * @param _pid \\u662f\\u6c60\\u72b6\\u6001\\n     * | \\u51fd\\u6570           | \\u72b6\\u6001\\u8981\\u6c42     | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b   | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f   \\n     * | `claimBorrow` | EXECUTION/FINISH/LIQUIDATION | \\u7ed3\\u7b97\\u540e   | \\u9886\\u53d6\\u8d37\\u6b3e  | \\u94f8\\u9020 JP \\u4ee3\\u5e01+\\u8f6c\\u51fa\\u501f\\u6b3e| \\u83b7\\u5f97\\u501f\\u6b3e\\u8d44\\u91d1  \\n     */\\n    function claimBorrow(uint256 _pid) external nonReentrant notPause timeAfterSettle(_pid) stateNotMatchUndone(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        BorrowInfo storage borrowInfo = userBorrowInfo[msg.sender][_pid];\\n        require(borrowInfo.stakeAmount>0,\\\"claimBorrow : cannot get jp_token\\\");// \\u9700\\u8981\\u501f\\u6b3e\\u4eba\\u7684\\u8d28\\u62bc\\u91cf\\u5927\\u4e8e0\\n        require(borrowInfo.hasNoClaim==false,\\\"claimBorrow : already claimed\\\");// \\u9700\\u8981\\u501f\\u6b3e\\u4eba\\u6ca1\\u6709\\u9886\\u53d6\\u8fc7jp_token\\n    \\n        // \\u603bJP\\u6570\\u91cf = \\u5b9e\\u9645\\u7ed3\\u7b97\\u7684\\u501f\\u6b3e\\u91d1\\u989d(1e18) \\u00d7 \\u62b5\\u62bc\\u7387(1e8) (\\u62b5\\u62bc\\u7387 = \\u501f\\u6b3e\\u91d1\\u989d / \\u62b5\\u62bc\\u54c1\\u4ef7\\u503c, 150%\\u62b5\\u62bc\\u7387\\uff1a\\u9700\\u8981\\u8d28\\u62bc1.5\\u500d\\u4ef7\\u503c\\u7684\\u62b5\\u62bc\\u54c1)\\n        uint256 totalJpAmount = safeDiv(safeMul(data.settleAmountLend, pool.martgageRate), baseDecimal);\\n        // \\u7528\\u6237\\u4efd\\u989d = \\u8d28\\u62bc\\u91d1\\u989d / \\u603b\\u8d28\\u62bc\\u91d1\\u989d\\n        uint256 userShare=safeDiv(safeMul(borrowInfo.stakeAmount, calDecimals), pool.borrowSupply);\\n        uint256 jpAmount=safeDiv(safeMul(totalJpAmount, userShare), calDecimals);\\n\\n        // \\u94f8\\u9020 jp token \\u7ed9\\u501f\\u6b3e\\u4eba \\n        pool.jpCoin.mint(msg.sender,jpAmount);\\n        //\\u7d22\\u53d6\\u8d37\\u6b3e\\u8d44\\u91d1\\n        uint256 borrowAmount = safeDiv(safeMul(data.settleAmountLend, userShare), calDecimals);// \\u8ba1\\u7b97\\u7528\\u6237\\u5b9e\\u9645\\u53ef\\u501f\\u91d1\\u989d\\n        _redeem(payable(msg.sender),pool.lendToken,borrowAmount);// \\u8f6c\\u51fa\\u501f\\u6b3e\\u8d44\\u91d1\\u7ed9\\u501f\\u6b3e\\u4eba\\n        borrowInfo.hasNoClaim = true;// \\u66f4\\u65b0\\u72b6\\u6001\\uff0c\\u9632\\u6b62\\u91cd\\u590d\\u9886\\u53d6\\n        emit ClaimBorrow(msg.sender,pool.borrowToken,borrowAmount);\\n    }\\n    /**\\n     * @dev \\u501f\\u6b3e\\u4eba\\u8d4e\\u56de\\u8d28\\u62bc\\n     * @notice \\n     * | \\u51fd\\u6570           | \\u72b6\\u6001\\u8981\\u6c42     | \\u65f6\\u95f4\\u8981\\u6c42 | \\u64cd\\u4f5c\\u7c7b\\u578b   | \\u4ee3\\u5e01\\u5904\\u7406 | \\u4f7f\\u7528\\u573a\\u666f   \\n     * | `withdrawBorrow` | FINISH/LIQUIDATION | \\u5230\\u671f\\u540e   | \\u8d4e\\u56de\\u62b5\\u62bc\\u54c1  | \\u9500\\u6bc1 JP \\u4ee3\\u5e01+\\u8f6c\\u51fa\\u62b5\\u62bc\\u54c1| \\u53d6\\u56de\\u8d28\\u62bc\\u7684\\u62b5\\u62bc\\u54c1  \\n     * @param _pid \\u662f\\u6c60\\u72b6\\u6001\\n     * @param _jpAmount \\u662f\\u7528\\u6237\\u9500\\u6bc1JPtoken\\u7684\\u6570\\u91cf\\n     */\\n    function withdrawBorrow(uint256 _pid,uint256 _jpAmount) external nonReentrant notPause stateFinishLiquidation(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        // \\u8981\\u6c42\\u63d0\\u53d6\\u7684\\u91d1\\u989d\\u5927\\u4e8e0\\n        require(_jpAmount > 0, 'withdrawBorrow: withdraw amount is zero');\\n        pool.jpCoin.burn(msg.sender,_jpAmount);\\n        uint256 totaljpAmount = safeDiv(safeMul(data.settleAmountLend, pool.martgageRate), baseDecimal);\\n        uint256 jpShare = safeDiv(safeMul(_jpAmount, calDecimals), totaljpAmount);\\n        if(pool.state==PoolState.FINISH){\\n            // \\u8981\\u6c42\\u5f53\\u524d\\u65f6\\u95f4\\u5927\\u4e8e\\u7ed3\\u675f\\u65f6\\u95f4\\n            require(block.timestamp>=pool.endTime,\\\"withdrawBorrow : less than end time\\\");\\n            uint256 redeemAmount = safeDiv(safeMul(data.finishAmountBorrow, jpShare), calDecimals);\\n            _redeem(payable(msg.sender),pool.borrowToken,redeemAmount);\\n            emit WithdrawBorrow(msg.sender,pool.borrowToken,redeemAmount,_jpAmount);\\n        }\\n        if(pool.state==PoolState.LIQUIDATION){\\n             // \\u8981\\u6c42\\u5f53\\u524d\\u65f6\\u95f4\\u5927\\u4e8e\\u5339\\u914d\\u65f6\\u95f4\\n            require(block.timestamp>=pool.settleTime,\\\"withdrawBorrow : less than match time\\\");\\n            uint256 redeemAmount = safeDiv(safeMul(data.liquidationAmountBorrow, jpShare), calDecimals);\\n            _redeem(payable(msg.sender),pool.borrowToken,redeemAmount);\\n            emit WithdrawBorrow(msg.sender,pool.borrowToken,redeemAmount,_jpAmount);\\n        }\\n    }\\n    \\n    /**\\n     * @dev \\u7d27\\u6025\\u501f\\u6b3e\\u63d0\\u53d6\\n     * @notice \\u5728\\u6781\\u7aef\\u60c5\\u51b5\\u4e0b\\uff0c\\u603b\\u5b58\\u6b3e\\u4e3a0\\uff0c\\u6216\\u8005\\u603b\\u4fdd\\u8bc1\\u91d1\\u4e3a0\\uff0c\\n     * \\u5728\\u67d0\\u4e9b\\u6781\\u7aef\\u60c5\\u51b5\\u4e0b\\uff0c\\u5982\\u603b\\u5b58\\u6b3e\\u4e3a0\\u6216\\u603b\\u4fdd\\u8bc1\\u91d1\\u4e3a0\\u65f6\\uff0c\\u501f\\u6b3e\\u8005\\u53ef\\u4ee5\\u8fdb\\u884c\\u7d27\\u6025\\u63d0\\u53d6\\u3002\\n     * \\u9996\\u5148\\uff0c\\u4ee3\\u7801\\u4f1a\\u83b7\\u53d6\\u6c60\\u5b50\\u7684\\u57fa\\u672c\\u4fe1\\u606f\\u548c\\u501f\\u6b3e\\u8005\\u7684\\u501f\\u6b3e\\u4fe1\\u606f\\uff0c\\u7136\\u540e\\u68c0\\u67e5\\u501f\\u6b3e\\u4f9b\\u5e94\\u548c\\u501f\\u6b3e\\u8005\\u7684\\u8d28\\u62bc\\u91d1\\u989d\\u662f\\u5426\\u5927\\u4e8e0\\uff0c\\n     * \\u4ee5\\u53ca\\u501f\\u6b3e\\u8005\\u662f\\u5426\\u5df2\\u7ecf\\u8fdb\\u884c\\u8fc7\\u9000\\u6b3e\\u3002\\u5982\\u679c\\u8fd9\\u4e9b\\u6761\\u4ef6\\u90fd\\u6ee1\\u8db3\\uff0c\\n     * \\u90a3\\u4e48\\u5c31\\u4f1a\\u6267\\u884c\\u8d4e\\u56de\\u64cd\\u4f5c\\uff0c\\u5e76\\u6807\\u8bb0\\u501f\\u6b3e\\u8005\\u5df2\\u7ecf\\u9000\\u6b3e\\u3002\\n     * \\u6700\\u540e\\uff0c\\u89e6\\u53d1\\u4e00\\u4e2a\\u7d27\\u6025\\u501f\\u6b3e\\u63d0\\u53d6\\u7684\\u4e8b\\u4ef6\\u3002\\n     * @param _pid \\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\\n     */\\n    function emergencyBorrowWithdrawal(uint256 _pid) external nonReentrant notPause stateUndone(_pid){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        // \\u786e\\u4fdd\\u501f\\u6b3e\\u4f9b\\u5e94\\u5927\\u4e8e0\\n        require(pool.borrowSupply>0,\\\"emergencyBorrowWithdrawal : not withdrawal\\\");\\n        // \\u83b7\\u53d6\\u501f\\u6b3e\\u8005\\u7684\\u501f\\u6b3e\\u4fe1\\u606f\\n        BorrowInfo storage borrowInfo = userBorrowInfo[msg.sender][_pid];\\n        // \\u786e\\u4fdd\\u501f\\u6b3e\\u8005\\u7684\\u8d28\\u62bc\\u91d1\\u989d\\u5927\\u4e8e0\\n        require(borrowInfo.stakeAmount > 0, \\\"refundBorrow: not pledged\\\");\\n        // \\u786e\\u4fdd\\u501f\\u6b3e\\u8005\\u6ca1\\u6709\\u8fdb\\u884c\\u8fc7\\u9000\\u6b3e\\n        require(!borrowInfo.hasNoRefund, \\\"refundBorrow: again refund\\\");\\n         // \\u6267\\u884c\\u8d4e\\u56de\\u64cd\\u4f5c\\n        _redeem(payable(msg.sender),pool.borrowToken,borrowInfo.stakeAmount);\\n        // \\u6807\\u8bb0\\u501f\\u6b3e\\u8005\\u5df2\\u7ecf\\u9000\\u6b3e\\n        borrowInfo.hasNoRefund = true;\\n        // \\u89e6\\u53d1\\u7d27\\u6025\\u501f\\u6b3e\\u63d0\\u53d6\\u4e8b\\u4ef6\\n        emit EmergencyBorrowWithdrawal(msg.sender, pool.borrowToken, borrowInfo.stakeAmount);\\n    }\\n\\n    function checkoutSettle(uint256 _pid) public view returns(bool){\\n        return block.timestamp>=poolBaseInfos[_pid].settleTime;\\n    }\\n\\n    function settle(uint256 _pid) public validCall{\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data= poolDataInfos[_pid];\\n        require(checkoutSettle(_pid),\\\"settle: time is less than settle time\\\");\\n        require(pool.state==PoolState.MATCH,\\\"settle: pool state must be MATCH\\\");\\n        if(pool.lendSupply>0 && pool.borrowSupply>0){\\n            //\\u83b7\\u53d6\\u8d44\\u4ea7\\u5bf9\\u4ef7\\u683c\\n            uint256[2] memory prices=getUnderlyingPriceView(_pid);\\n            //\\u8ba1\\u7b97\\u8d28\\u62bc\\u4fdd\\u8bc1\\u91d1\\u603b\\u4ef7\\u503c =\\u4ef7\\u683c\\u6bd4\\u7387\\uff08\\u62b5\\u62bc\\u54c1\\u4ef7\\u683c/\\u51fa\\u501f\\u4ee3\\u5e01\\u4ef7\\u683c\\uff09* \\u62b5\\u62bc\\u54c1\\u6570\\u91cf\\n            uint256 valueRatio=safeDiv(safeMul(prices[1],calDecimals),prices[0]);\\n            uint256 totalValue=safeDiv(safeMul(pool.borrowSupply,valueRatio),calDecimals);\\n            //\\u8ba1\\u7b97\\u5b9e\\u9645\\u4ef7\\u503c = \\u603b\\u4ef7\\u503c \\u00f7\\u62b5\\u62bc\\u7387\\n            // totalValue = 50,000 USDC\\n            // \\u62b5\\u62bc\\u7387 = 150%\\uff081.5\\u500d\\uff09\\n            // actualValue = 50,000 \\u00d7 1e8 \\u00f7 150,000,000 = 33,333.33 USDC\\n            uint256 actualValue=safeDiv(safeMul(totalValue,baseDecimal),pool.martgageRate);\\n            if(pool.lendSupply>actualValue){\\n                // \\u603b\\u501f\\u6b3e\\u5927\\u4e8e\\u603b\\u501f\\u51fa\\n                data.settleAmountLend=actualValue;\\n                data.settleAmountBorrow=pool.borrowSupply;\\n            }else{\\n                // \\u603b\\u501f\\u6b3e\\u5c0f\\u4e8e\\u603b\\u501f\\u51fa\\n                data.settleAmountLend=pool.lendSupply;\\n                //\\u7ed3\\u7b97\\u65f6\\u7684\\u5b9e\\u9645\\u501f\\u6b3e\\u91d1\\u989d settleAmountBorrow = (lendSupply \\u00d7 martgageRate) \\u00f7 (borrowTokenPrice \\u00d7 baseDecimal \\u00f7 lendTokenPrice)\\n                uint256 priceRatio = safeDiv(safeMul(prices[1], baseDecimal), prices[0]);\\n                data.settleAmountBorrow = safeDiv(safeMul(pool.lendSupply, pool.martgageRate), priceRatio);\\n            }\\n            // \\u66f4\\u65b0\\u6c60\\u5b50\\u72b6\\u6001\\u4e3a\\u6267\\u884c\\n            pool.state=PoolState.EXECUTION;\\n             // \\u89e6\\u53d1\\u4e8b\\u4ef6\\n            emit StateChange(_pid,uint256(PoolState.MATCH), uint256(PoolState.EXECUTION));\\n\\n        } else {\\n            // \\u6781\\u7aef\\u60c5\\u51b5\\uff0c\\u501f\\u6b3e\\u6216\\u501f\\u51fa\\u4efb\\u4e00\\u4e3a0\\n            pool.state=PoolState.UNDONE;\\n            data.settleAmountLend=pool.lendSupply;\\n            data.settleAmountBorrow=pool.borrowSupply;\\n            // \\u89e6\\u53d1\\u4e8b\\u4ef6\\n            emit StateChange(_pid,uint256(PoolState.MATCH), uint256(PoolState.UNDONE));\\n        }\\n    }\\n\\n    function checkoutFinish(uint256 _pid) public view returns(bool){\\n        return block.timestamp>=poolBaseInfos[_pid].endTime;\\n    }\\n\\n    /**\\n     * @dev \\u5b8c\\u6210\\u4e00\\u4e2a\\u501f\\u8d37\\u6c60\\u7684\\u64cd\\u4f5c\\uff0c\\u5305\\u62ec\\u8ba1\\u7b97\\u5229\\u606f\\u3001\\u6267\\u884c\\u4ea4\\u6362\\u64cd\\u4f5c\\u3001\\u8d4e\\u56de\\u8d39\\u7528\\u548c\\u66f4\\u65b0\\u6c60\\u5b50\\u72b6\\u6001\\u7b49\\u6b65\\u9aa4\\u3002\\n     * @param _pid \\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\\n     */\\n    function finish(uint256 _pid) public validCall{\\n        // \\u83b7\\u53d6\\u57fa\\u7840\\u6c60\\u5b50\\u4fe1\\u606f\\u548c\\u6570\\u636e\\u4fe1\\u606f\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        require(checkoutFinish(_pid),\\\"finish: less than end time\\\");\\n        require(pool.state==PoolState.EXECUTION,\\\"finish: pool state must be execution\\\");\\n\\n        (address token0,address token1)=(pool.borrowToken,pool.lendToken);\\n        // \\u8ba1\\u7b97\\u65f6\\u95f4\\u6bd4\\u7387(1e8) = ((\\u7ed3\\u675f\\u65f6\\u95f4 - \\u7ed3\\u7b97\\u65f6\\u95f4) * \\u57fa\\u7840\\u5c0f\\u6570)/365\\u5929\\n        uint256 timeRatio = safeDiv(safeMul(safeSub(pool.endTime, pool.settleTime), baseDecimal), baseYear);\\n        // \\u8ba1\\u7b97\\u5229\\u606f(1e18) = \\u57fa\\u7840\\u5229\\u606f\\uff08\\u7ed3\\u7b97\\u8d37\\u6b3e\\u91d1\\u989d(1e18)\\u00d7 \\u5229\\u7387(1e8) \\uff09\\u00d7 \\u65f6\\u95f4\\u6bd4\\u7387(1e8)\\n        uint256 interest = safeDiv(safeMul(timeRatio, safeMul(pool.interestRate, data.settleAmountLend)), 1e16);\\n        uint256 lendAmount = safeAdd(data.settleAmountLend, interest); // \\u8ba1\\u7b97\\u8d37\\u6b3e\\u91d1\\u989d = \\u7ed3\\u7b97\\u8d37\\u6b3e\\u91d1\\u989d + \\u5229\\u606f\\n        // \\u8ba1\\u7b97\\u9700\\u8981\\u53d8\\u73b0\\u7684\\u62b5\\u62bc\\u54c1\\u4ef7\\u503c = \\u8d37\\u6b3e\\u91d1\\u989d * (1 + lendFee\\u8d39\\u7528)\\n        uint256 sellAmount = safeDiv(safeMul(lendAmount, safeAdd(lendFee, baseDecimal)), baseDecimal);\\n         // \\u6267\\u884c\\u4ee3\\u5e01\\u4ea4\\u6362\\u64cd\\u4f5c amountSell\\uff1a\\u5b9e\\u9645\\u5356\\u51fa\\u7684\\u62b5\\u62bc\\u54c1\\u6570\\u91cf amountIn\\uff1a\\u5b9e\\u9645\\u83b7\\u5f97\\u7684\\u51fa\\u501f\\u4ee3\\u5e01\\u6570\\u91cf\\n        (uint256 amountSell,uint256 amountIn) = _sellExactAmount(swapRouter,token0,token1,sellAmount);\\n        require(amountIn >= lendAmount,\\\"finish: Slippage is too high\\\");\\n        if(amountIn>lendAmount){\\n            uint256 feeAmount = safeSub(amountIn, lendAmount);\\n            //\\u5982\\u679c\\u53d8\\u73b0\\u6536\\u76ca\\u8d85\\u8fc7\\u8fd8\\u6b3e\\u9700\\u6c42\\uff1a\\u8d85\\u989d\\u90e8\\u5206\\u4f5c\\u4e3a\\u534f\\u8bae\\u8d39\\u7528\\n            _redeem(payable(feeAddress),pool.lendToken, feeAmount);\\n            data.finishAmountLend = safeSub(amountIn, feeAmount); //\\u66f4\\u65b0\\u5b8c\\u6210\\u65f6\\u7684\\u51fa\\u501f\\u91d1\\u989d\\n        }else{\\n             data.finishAmountLend = amountIn;\\n        }\\n\\n          // \\u8ba1\\u7b97\\u5269\\u4f59\\u7684\\u62b5\\u62bc\\u54c1\\u6570\\u91cf\\n          uint256 remainNowAmount = safeSub(data.settleAmountBorrow, amountSell);\\n          uint256 remainBorrowAmount=redeemFees(borrowFee,pool.borrowToken,remainNowAmount);//\\u8fd4\\u56de\\u6263\\u9664\\u8d39\\u7528\\u540e\\u7684\\u5269\\u4f59\\u91d1\\u989d\\n          data.finishAmountBorrow=remainBorrowAmount;\\n\\n          pool.state=PoolState.FINISH;\\n          emit StateChange(_pid,uint256(PoolState.EXECUTION), uint256(PoolState.FINISH));\\n    }\\n\\n    /**\\n     * @dev \\u68c0\\u67e5\\u6e05\\u7b97\\u6761\\u4ef6,\\n     * @param _pid \\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\\n     */\\n    function checkoutLiquidation(uint256 _pid) external view returns(bool){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        PoolDataInfo storage data = poolDataInfos[_pid];\\n        uint256[2] memory prices=getUnderlyingPriceView(_pid);\\n        // \\u4fdd\\u8bc1\\u91d1\\u5f53\\u524d\\u4ef7\\u503c =  \\u4ef7\\u683c\\u6bd4\\u7387\\uff08\\u62b5\\u62bc\\u54c1\\u4ef7\\u683c/\\u51fa\\u501f\\u4ee3\\u5e01\\u4ef7\\u683c\\uff09* \\u62b5\\u62bc\\u54c1\\u6570\\u91cf\\n        uint256 priceRatio = safeDiv(safeMul(prices[1], calDecimals), prices[0]);\\n        uint256 borrowValueNow = safeDiv(safeMul(data.settleAmountBorrow, priceRatio), calDecimals);\\n        // \\u6e05\\u7b97\\u9608\\u503c = settleAmountLend * (1 + autoLiquidateThreshold)\\n        uint256 valueThreshold = safeDiv(safeMul(data.settleAmountLend, safeAdd(baseDecimal, pool.autoLiquidateThreshold)), baseDecimal);\\n        return borrowValueNow<valueThreshold;\\n    }\\n\\n\\n    /**\\n     * @dev \\u6e05\\u7b97\\n     * @param _pid \\u662f\\u6c60\\u5b50\\u7684\\u7d22\\u5f15\\n     */\\n    function liquidate(uint256 _pid) public validCall{\\n        PoolDataInfo storage data = poolDataInfos[_pid]; \\n        PoolBaseInfo storage pool = poolBaseInfos[_pid]; \\n        require(block.timestamp > pool.settleTime, \\\"liquidate: time is less than settle time\\\"); // \\u9700\\u8981\\u5f53\\u524d\\u65f6\\u95f4\\u5927\\u4e8e\\u7ed3\\u7b97\\u65f6\\u95f4\\n        require(pool.state == PoolState.EXECUTION,\\\"liquidate: pool state must be execution\\\"); // \\u9700\\u8981\\u6c60\\u5b50\\u7684\\u72b6\\u6001\\u662f\\u6267\\u884c\\u72b6\\u6001\\n\\n        (address token0,address token1)=(pool.borrowToken,pool.lendToken);\\n         // \\u65f6\\u95f4\\u6bd4\\u7387(1e8) = ((\\u7ed3\\u675f\\u65f6\\u95f4 - \\u7ed3\\u7b97\\u65f6\\u95f4) * \\u57fa\\u7840\\u5c0f\\u6570)/365\\u5929\\n        uint256 timeRatio = safeDiv(safeMul(safeSub(pool.endTime, pool.settleTime), baseDecimal), baseYear);\\n        // \\u8ba1\\u7b97\\u5229\\u606f(1e18) = \\u57fa\\u7840\\u5229\\u606f\\uff08\\u7ed3\\u7b97\\u8d37\\u6b3e\\u91d1\\u989d(1e18)\\u00d7 \\u5229\\u7387(1e8) \\uff09\\u00d7 \\u65f6\\u95f4\\u6bd4\\u7387(1e8)\\n        uint256 interest = safeDiv(safeMul(timeRatio, safeMul(pool.interestRate, data.settleAmountLend)), 1e16);\\n        // \\u8ba1\\u7b97\\u8d37\\u6b3e\\u91d1\\u989d = \\u7ed3\\u7b97\\u8d37\\u6b3e\\u91d1\\u989d + \\u5229\\u606f\\n        uint256 lendAmount = safeAdd(data.settleAmountLend, interest);\\n        // \\u6dfb\\u52a0\\u8d37\\u6b3e\\u8d39\\u7528\\n        uint256 sellAmount = safeDiv(safeMul(lendAmount, safeAdd(lendFee, baseDecimal)), baseDecimal);\\n        (uint256 amountSell,uint256 amountIn) = _sellExactAmount(swapRouter,token0,token1,sellAmount); // \\u5356\\u51fa\\u51c6\\u786e\\u7684\\u91d1\\u989d\\n        // \\u53ef\\u80fd\\u4f1a\\u6709\\u6ed1\\u70b9\\uff0camountIn - lendAmount < 0;\\n        if (amountIn > lendAmount) {\\n            uint256 feeAmount = safeSub(amountIn, lendAmount); // \\u8d39\\u7528\\u91d1\\u989d\\n            // \\u8d37\\u6b3e\\u8d39\\u7528\\n            _redeem(payable(feeAddress),pool.lendToken, feeAmount);\\n            data.liquidationAmountLend = safeSub(amountIn, feeAmount);\\n        }else {\\n            data.liquidationAmountLend = amountIn;\\n        }\\n        // liquidationAmountBorrow  \\u501f\\u6b3e\\u8d39\\u7528\\n        uint256 remainNowAmount = safeSub(data.settleAmountBorrow, amountSell); // \\u5269\\u4f59\\u7684\\u73b0\\u5728\\u7684\\u91d1\\u989d\\n        uint256 remainBorrowAmount = redeemFees(borrowFee,pool.borrowToken,remainNowAmount); // \\u5269\\u4f59\\u7684\\u501f\\u6b3e\\u91d1\\u989d\\n        data.liquidationAmountBorrow = remainBorrowAmount;\\n        // \\u66f4\\u65b0\\u6c60\\u5b50\\u72b6\\u6001\\n        pool.state = PoolState.LIQUIDATION;\\n         // \\u4e8b\\u4ef6\\n        emit StateChange(_pid,uint256(PoolState.EXECUTION), uint256(PoolState.LIQUIDATION));\\n    }\\n\\n    /**\\n     * @dev \\u8d39\\u7528\\u8ba1\\u7b97,\\u8ba1\\u7b97\\u5e76\\u8d4e\\u56de\\u8d39\\u7528\\u3002\\n     * @notice \\u5982\\u679c\\u8ba1\\u7b97\\u51fa\\u7684\\u8d39\\u7528\\u5927\\u4e8e0\\uff0c\\u5b83\\u5c06\\u4ece\\u8d39\\u7528\\u5730\\u5740\\u8d4e\\u56de\\u76f8\\u5e94\\u7684\\u8d39\\u7528\\u3002\\n     * @param feeRatio \\u662f\\u8d39\\u7387\\n     * @param token \\u662f\\u4ee3\\u5e01\\u5730\\u5740\\n     * @param amount \\u662f\\u91d1\\u989d\\n     * @return \\u8fd4\\u56de\\u6263\\u9664\\u8d39\\u7528\\u540e\\u7684\\u5269\\u4f59\\u91d1\\u989d\\n     */\\n    function redeemFees(uint256 feeRatio, address token, uint256 amount) internal returns (uint256){\\n        // \\u8ba1\\u7b97\\u8d39\\u7528 = \\u91d1\\u989d * \\u8d39\\u7387 / \\u57fa\\u6570\\n        uint256 fee = safeDiv(safeMul(amount, feeRatio), baseDecimal);\\n        if(fee>0){\\n            _redeem(payable(feeAddress),token,fee);\\n        }\\n        return safeSub(amount, fee);\\n    }\\n\\n    function getUnderlyingPriceView(uint256 _pid) public view returns(uint256[2] memory){\\n        PoolBaseInfo storage pool = poolBaseInfos[_pid];\\n        uint256[] memory assets=new uint256[](2);        // \\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684\\u6570\\u7ec4\\u6765\\u5b58\\u50a8\\u8d44\\u4ea7\\n        // \\u5c06\\u8d44\\u4ea7\\u8f6c\\u6362\\u4e3auint256\\u7c7b\\u578b\\n        assets[0]=uint256(uint160(pool.lendToken));\\n        assets[1]=uint256(uint160(pool.borrowToken));\\n        uint256[] memory prices=oracle.getPrices(assets);        // \\u4ece\\u9884\\u8a00\\u673a\\u83b7\\u53d6\\u8d44\\u4ea7\\u7684\\u4ef7\\u683c\\n        return [prices[0],prices[1]];\\n    }\\n\\n    //============UniSwapV2 =================\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u4ee3\\u5e01\\u4ea4\\u6362\\u8def\\u5f84\\n     * @notice \\u6784\\u5efa\\u4ece token0 \\u5230 token1 \\u7684\\u4ea4\\u6362\\u8def\\u5f84\\uff0c\\u652f\\u6301 ETH \\u5305\\u88c5\\n     * @param _swapRouter DEX\\u8def\\u7531\\u5668\\u5730\\u5740\\uff08\\u5982PancakeSwap\\uff09\\n     * @param token0 \\u6e90\\u4ee3\\u5e01\\u5730\\u5740\\uff08\\u8981\\u5356\\u51fa\\u7684\\u4ee3\\u5e01\\uff09\\n     * @param token1 \\u76ee\\u6807\\u4ee3\\u5e01\\u5730\\u5740\\uff08\\u8981\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\uff09\\n     * @return path \\u4ea4\\u6362\\u8def\\u5f84\\u6570\\u7ec4\\n     */\\n    function _getSwapPath(address _swapRouter,address token0, address token1) internal pure returns(address[] memory path){\\n        IUniswapV2Router02 IUniswap=IUniswapV2Router02(_swapRouter);\\n        path = new address[](2);\\n        path[0] = token0 == address(0) ? IUniswap.WETH() : token0;\\n        path[1] = token1 == address(0) ? IUniswap.WETH() : token1;\\n    }\\n\\n    /**\\n     * @dev \\u6839\\u636e\\u671f\\u671b\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\uff0c\\u8ba1\\u7b97\\u9700\\u8981\\u6295\\u5165\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\n     * @notice \\u8fd9\\u662f DEX \\u7684\\\"\\u53cd\\u5411\\u8ba1\\u7b97\\\"\\u529f\\u80fd\\uff0c\\u7528\\u4e8e\\u7cbe\\u786e\\u63a7\\u5236\\u4ea4\\u6362\\n     * \\n     * @param _swapRouter DEX\\u8def\\u7531\\u5668\\u5730\\u5740\\n     * @param token0 \\u6e90\\u4ee3\\u5e01\\u5730\\u5740\\uff08\\u8981\\u5356\\u51fa\\u7684\\u4ee3\\u5e01\\uff09\\n     * @param token1 \\u76ee\\u6807\\u4ee3\\u5e01\\u5730\\u5740\\uff08\\u8981\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\uff09\\n     * @param amountOut \\u671f\\u671b\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\n     * @return \\u9700\\u8981\\u6295\\u5165\\u7684\\u6e90\\u4ee3\\u5e01\\u6570\\u91cf\\n     */\\n    function _getAmountIn(address _swapRouter, address token0, address token1, uint256 amountOut) internal view returns(uint256){\\n        IUniswapV2Router02 IUniswap = IUniswapV2Router02(_swapRouter);\\n        address[] memory path = _getSwapPath(_swapRouter,token0,token1);\\n        uint256[] memory amounts = IUniswap.getAmountsIn(amountOut,path);\\n        return amounts[0];\\n    }\\n\\n    /**\\n     * @dev \\u7cbe\\u786e\\u5356\\u51fa\\u4ee3\\u5e01\\uff1a\\u6839\\u636e\\u671f\\u671b\\u83b7\\u5f97\\u7684\\u8f93\\u51fa\\u6570\\u91cf\\uff0c\\u8ba1\\u7b97\\u5e76\\u6267\\u884c\\u4ea4\\u6362\\n     * @param _swapRouter DEX\\u8def\\u7531\\u5668\\u5730\\u5740\\n     * @param token0 \\u8981\\u5356\\u51fa\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\n     * @param token1 \\u8981\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\n     * @param amountOut \\u671f\\u671b\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\n     * @return (amountSell, amountIn) \\u5b9e\\u9645\\u5356\\u51fa\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\uff08\\u53ef\\u80fd\\u56e0\\u6ed1\\u70b9\\u800c\\u53d8\\u5316\\uff09\\u548c\\u5b9e\\u9645\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\uff08\\u5e94\\u8be5 >= amountout\\uff09\\n     * \\n     * === \\u6267\\u884c\\u6d41\\u7a0b ===\\n     * 1. \\u8ba1\\u7b97\\u9636\\u6bb5\\uff1a\\u8c03\\u7528 _getAmountIn \\u8ba1\\u7b97\\u9700\\u8981\\u5356\\u51fa\\u7684\\u6570\\u91cf\\n     * 2. \\u6267\\u884c\\u9636\\u6bb5\\uff1a\\u8c03\\u7528 _swap \\u6267\\u884c\\u5b9e\\u9645\\u4ea4\\u6362\\n     * 3. \\u8fd4\\u56de\\u7ed3\\u679c\\uff1a\\u63d0\\u4f9b\\u5356\\u51fa\\u548c\\u83b7\\u5f97\\u7684\\u6570\\u91cf\\n     * \\n     * === \\u4f7f\\u7528\\u573a\\u666f ===\\n     * - finish \\u51fd\\u6570\\uff1a\\u53d8\\u73b0\\u62b5\\u62bc\\u54c1\\u83b7\\u5f97\\u8fd8\\u6b3e\\u8d44\\u91d1\\n     * - liquidate \\u51fd\\u6570\\uff1a\\u6e05\\u7b97\\u65f6\\u53d8\\u73b0\\u62b5\\u62bc\\u54c1\\n     */\\n    function _sellExactAmount(address _swapRouter,address token0,address token1,uint256 amountOut) internal returns(uint256,uint256){\\n        uint256 amountSell=amountOut>0?_getAmountIn(_swapRouter,token0,token1,amountOut):0;\\n        return(amountSell,_swap(_swapRouter,token0,token1,amountSell));\\n    }\\n\\n    /**\\n     * @dev \\u6267\\u884c\\u5b9e\\u9645\\u7684\\u4ee3\\u5e01\\u4ea4\\u6362\\u64cd\\u4f5c\\n     * @param _swapRouter DEX\\u8def\\u7531\\u5668\\u5730\\u5740\\n     * @param token0 \\u6e90\\u4ee3\\u5e01\\u5730\\u5740\\n     * @param token1 \\u76ee\\u6807\\u4ee3\\u5e01\\u5730\\u5740\\n     * @param amount0 \\u8981\\u4ea4\\u6362\\u7684\\u6e90\\u4ee3\\u5e01\\u6570\\u91cf\\n     * @return \\u5b9e\\u9645\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\n     * \\n     * === \\u4ea4\\u6362\\u7c7b\\u578b\\u652f\\u6301 ===\\n     * 1. ETH \\u2192 \\u4ee3\\u5e01\\uff1a\\u4f7f\\u7528 swapExactETHForTokens\\n     * 2. \\u4ee3\\u5e01 \\u2192 ETH\\uff1a\\u4f7f\\u7528 swapExactTokensForETH  \\n     * 3. \\u4ee3\\u5e01 \\u2192 \\u4ee3\\u5e01\\uff1a\\u4f7f\\u7528 swapExactTokensForTokens\\n     * \\n     * === \\u6ce8\\u610f\\u4e8b\\u9879 ===\\n     * - \\u4f7f\\u7528\\u65e0\\u9650\\u6388\\u6743\\u63d0\\u9ad8\\u6548\\u7387\\n     * - \\u8d85\\u65f6\\u8bbe\\u7f6e\\u4e3a now+30\\uff0c\\u9632\\u6b62\\u4ea4\\u6613\\u5361\\u6b7b \\n     * - \\u8fd4\\u56de\\u7684\\u662f\\u5b9e\\u9645\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\uff08\\u53ef\\u80fd\\u6709\\u6ed1\\u70b9\\uff09\\n     */\\n    function _swap(address _swapRouter, address token0, address token1, uint256 amount0) internal returns(uint256){\\n        // \\u5982\\u679c\\u6e90\\u4ee3\\u5e01\\u4e0d\\u662f ETH\\uff0c\\u8bbe\\u7f6e\\u6388\\u6743\\n        if(token0!=address(0)){\\n            _safeApprove(token0,address(_swapRouter),type(uint256).max);\\n        }\\n         // \\u5982\\u679c\\u76ee\\u6807\\u4ee3\\u5e01\\u4e0d\\u662f ETH\\uff0c\\u8bbe\\u7f6e\\u6388\\u6743\\n         if(token1!=address(0)){\\n            _safeApprove(token1,address(_swapRouter),type(uint256).max);\\n         }\\n         IUniswapV2Router02 IUniswap=IUniswapV2Router02(_swapRouter);\\n         address[] memory path=_getSwapPath(_swapRouter,token0,token1);\\n         uint256[] memory amounts;\\n         if(token0==address(0)){\\n            //swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n            amounts=IUniswap.swapExactETHForTokens{value:amount0}(0,path,address(this),block.timestamp+30);\\n         }else if(token1==address(0)){\\n            //swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n            amounts=IUniswap.swapTokensForExactETH(amount0,0,path,address(this),block.timestamp+30);\\n         }else{\\n            amounts = IUniswap.swapExactTokensForTokens(amount0,0, path, address(this), block.timestamp+30);\\n        }\\n        emit Swap(token0,token1,amounts[0],amounts[amounts.length-1]);\\n        return amounts[amounts.length-1];\\n    }\\n\\n    /**\\n     * @dev \\u5b89\\u5168\\u5730\\u4e3a\\u4ee3\\u5e01\\u8bbe\\u7f6e\\u6388\\u6743\\n     * @notice \\u4f7f\\u7528\\u5e95\\u5c42\\u8c03\\u7528\\u5b9e\\u73b0\\u6388\\u6743\\uff0c\\u907f\\u514d ERC20 \\u6807\\u51c6\\u4e0d\\u4e00\\u81f4\\u7684\\u95ee\\u9898\\n     * @param token \\u8981\\u6388\\u6743\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\n     * @param to \\u88ab\\u6388\\u6743\\u7684\\u5730\\u5740\\uff08\\u901a\\u5e38\\u662f DEX \\u8def\\u7531\\u5668\\uff09\\n     * @param value \\u6388\\u6743\\u6570\\u91cf\\uff08\\u8fd9\\u91cc\\u4f7f\\u7528 uint256(-1) \\u8868\\u793a\\u65e0\\u9650\\u6388\\u6743\\uff09\\n     * \\n     * === \\u6388\\u6743\\u673a\\u5236 ===\\n     * 1. \\u8c03\\u7528\\u4ee3\\u5e01\\u5408\\u7ea6\\u7684 approve \\u51fd\\u6570\\n     * 2. \\u68c0\\u67e5\\u8c03\\u7528\\u662f\\u5426\\u6210\\u529f\\n     * 3. \\u9a8c\\u8bc1\\u8fd4\\u56de\\u503c\\uff08\\u5982\\u679c\\u4ee3\\u5e01\\u652f\\u6301\\uff09\\n     * \\n     * === \\u4e3a\\u4ec0\\u4e48\\u4f7f\\u7528\\u65e0\\u9650\\u6388\\u6743 ===\\n     * 1. \\u63d0\\u9ad8\\u6548\\u7387\\uff1a\\u907f\\u514d\\u6bcf\\u6b21\\u4ea4\\u6362\\u90fd\\u91cd\\u65b0\\u6388\\u6743\\n     * 2. \\u51cf\\u5c11 gas \\u6d88\\u8017\\uff1a\\u4e00\\u6b21\\u6388\\u6743\\uff0c\\u591a\\u6b21\\u4f7f\\u7528\\n     * 3. \\u7b80\\u5316\\u903b\\u8f91\\uff1a\\u4e0d\\u9700\\u8981\\u8ddf\\u8e2a\\u5269\\u4f59\\u6388\\u6743\\u6570\\u91cf\\n     * \\n     * === \\u51fd\\u6570\\u9009\\u62e9\\u5668 ===\\n     * 0x095ea7b3 = approve(address,uint256) \\u7684\\u51fd\\u6570\\u9009\\u62e9\\u5668\\n     */\\n    function _safeApprove(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"!safeApprove\\\");\\n    }\\n\\n    function setPause() public validCall{\\n        globalPaused=!globalPaused;\\n    }\\n\\n    modifier notPause() {\\n        require(globalPaused==false,\\\"PledgePool : Stake has been suspended\\\");\\n        _;\\n    }\\n\\n    modifier timeBeforeSettle(uint256 _pid) {\\n        require(block.timestamp<poolBaseInfos[_pid].settleTime,\\\"PledgePool : Less than settle time\\\");\\n        _;\\n    }\\n\\n    modifier timeAfterSettle(uint256 _pid) {\\n        require(block.timestamp>=poolBaseInfos[_pid].settleTime,\\\"PledgePool : After settle time\\\");\\n        _;\\n    }\\n\\n\\n    modifier stateMatch(uint256 _pid) {\\n        require(poolBaseInfos[_pid].state == PoolState.MATCH, \\\"state: Pool status is not equal to match\\\");\\n        _;\\n    }\\n\\n    modifier stateNotMatchUndone(uint256 _pid) {\\n        require(poolBaseInfos[_pid].state == PoolState.EXECUTION \\n        || poolBaseInfos[_pid].state == PoolState.FINISH || \\n        poolBaseInfos[_pid].state == PoolState.LIQUIDATION,\\n        \\\"state: not match and undone\\\");\\n        _;\\n    }\\n\\n    modifier stateFinishLiquidation(uint256 _pid) {\\n        require(poolBaseInfos[_pid].state == PoolState.FINISH || poolBaseInfos[_pid].state == PoolState.LIQUIDATION,\\\"state: finish liquidation\\\");\\n        _;\\n    }\\n\\n    modifier stateUndone(uint256 _pid) {\\n        require(poolBaseInfos[_pid].state == PoolState.UNDONE,\\\"state: state must be undone\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x0fb4ecba4473e5738cb3ada129da259bc14cfb40e9205da5919754e0ab522ee5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620002ad57601f62003f1a38819003918201601f191683019291906001600160401b03841183851017620002b2578160809284926040968752833981010312620002ad576200005181620002c8565b906200006060208201620002c8565b818401516001600160a01b03808216949093909291859003620002ad576200008c6060859201620002c8565b600160005516801562000237577f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb475568056bc75e2d63100000600155826002549216928315620001e757811615620001935783156200013f57600480546001600160a01b031990811690941790556001600160a81b031990911660089190911b610100600160a81b031617600255600380549091169190911790556000600581905560065551613c3c9081620002de8239f35b845162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2066656541646472657373206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b845162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2073776170526f75746572206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b855162461bcd60e51b815260206004820152602360248201527f506c65646765506f6f6c203a206f7261636c65206973207a65726f206164647260448201526265737360e81b6064820152608490fd5b855162461bcd60e51b815260206004820152604360248201527f6d756c74695369676e6174757265436c69656e74203a204d756c7469706c652060448201527f7369676e617475726520636f6e74726163742061646472657373206973207a65606482015262726f2160e81b608482015260a490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620002ad5756fe6080604052600436101561001257600080fd5b60003560e01c80630d6abfc114612ba757806314c090cc14612b7c57806316f941b514612a005780631e107979146126ca57806338f2aa76146123c35780633ab4a445146121205780633c9fadc31461209f5780634127365714611fc65780634127535814611f9d578063415f124014611da0578063459b911c146119605780634aea0aec1461194257806352f7c988146118fc57806361a552dc146118d957806362faecf41461180e578063638c7e17146117c65780636abd7f29146117985780636c42fed2146115155780636de6ff3a146114f75780637dc0d1d0146114ce5780638705fcd41461140a578063897b0637146113755780638df828001461114f57806390590da014610f43578063981b48a614610ed95780639b2cb5d814610ebb5780639d71488e14610e80578063a62ff16414610c11578063b159751714610bd6578063bb176a6414610b51578063bf38b8f614610973578063c31c9c0714610946578063c9333756146108ff578063d353a1cb1461069c578063d431b1ac1461066b578063e271fa0c14610490578063e626648a146104725763eec8d506146101be57600080fd5b3461046d5760208060031936011261046d57600435906101dc612fb3565b6101eb60ff6002541615612ea5565b6102016101f783612c7b565b505442101561310c565b60ff600861020e84612c7b565b50015460a01c166005811015610431576001148015610447575b801561040b575b61023890613158565b61024182612c7b565b5061024b83612cf8565b509233600052600a8352604060002090600052825260406000209081549081156103c657600481015494549061028182876130ba565b1561038157600284019182549360ff851661033c57670de0b6b3a76400006102eb896102e66007956102e07fc3e20279d41b3ed21d277920877e5e5c6665bf6aca607046a3fe0fd2bd6bda7d9b9c9d6102db60019861327b565b613313565b926130ba565b613300565b04960191868355600160ff1980961617845501916001808060a01b03946103168887875416336131a4565b8254161790556103278154866130ad565b90555416926040519283523392a36001600055005b60405162461bcd60e51b815260048101889052601d60248201527f726566756e644c656e64203a20616c726561647920726566756e6465640000006044820152606490fd5b60405162461bcd60e51b815260048101869052601760248201527f726566756e644c656e64203a206e6f7420726566756e640000000000000000006044820152606490fd5b60405162461bcd60e51b815260048101859052601860248201527f726566756e644c656e64203a206e6f7420706c656467656400000000000000006044820152606490fd5b5060ff600861041984612c7b565b50015460a01c1660058110156104315760031461022f565b634e487b7160e01b600052602160045260246000fd5b5060ff600861045584612c7b565b50015460a01c16600581101561043157600214610228565b600080fd5b3461046d57600036600319011261046d576020600654604051908152f35b3461046d5760208060031936011261046d57600435906104ae612fb3565b6104bd60ff6002541615612ea5565b60ff60086104ca84612c7b565b50015460a01c1660058110156104315760046104e691146133c6565b6104ef82612c7b565b5091600583015415610613573360005260098252604060002090600052815260406000209182549081156105ce57600284019060ff8254166105895760080180547f5a06c7de92f1dc59e8cba872927d016c80ce5f0fb2295c898dfb7a2f08e43fb1936001600160a01b03939161056991908516336131a4565b600160ff1982541617905554169254916040519283523392a36001600055005b60405162461bcd60e51b815260048101859052601a60248201527f726566756e64426f72726f773a20616761696e20726566756e640000000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601960248201527f726566756e64426f72726f773a206e6f7420706c6564676564000000000000006044820152606490fd5b60405162461bcd60e51b815260048101839052602a60248201527f656d657267656e6379426f72726f775769746864726177616c203a206e6f74206044820152691dda5d1a191c985dd85b60b21b6064820152608490fd5b3461046d57600036600319011261046d57610684612d87565b60025460ff80821615169060ff191617600255600080f35b3461046d57602036600319011261046d576004356106b8612d87565b6106c181612c7b565b50906106cc81612cf8565b509060016106d982612c7b565b50015442106108ba576008830180549260ff8460a01c16600581101561043157600103610869576007850161078a60018060a01b039561075f8784541698662386f26fc1000061075860026301e1338061074161073c60018701548754906130ba565b6132e7565b049301549261075289548095613300565b90613300565b04906130ad565b97876305f5e10061077a61077460055461309c565b8c613300565b0492168860025460081c16613639565b919095878310610824576107e2600197846107f0948b60029c6003981160001461081957916107cf6107bf6107d494836130ba565b809388808c5416915416906131a4565b6130ba565b8a8701555b888601546130ba565b906006549086541690613412565b910155805460ff60a01b191660a184901b179055600080516020613be7833981519152600080a4005b50508a8701556107d9565b60405162461bcd60e51b815260206004820152601c60248201527f66696e6973683a20536c69707061676520697320746f6f2068696768000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526024808201527f66696e6973683a20706f6f6c207374617465206d7573742062652065786563756044820152633a34b7b760e11b6064820152608490fd5b60405162461bcd60e51b815260206004820152601a60248201527f66696e6973683a206c657373207468616e20656e642074696d650000000000006044820152606490fd5b3461046d5760208060031936011261046d5761091c6004356134ff565b604051916000835b6002821061093157604085f35b82806001928651815201940191019092610924565b3461046d57600036600319011261046d5760025460405160089190911c6001600160a01b03168152602090f35b3461046d5760208060031936011261046d5760043590610991612fb3565b6109a060ff6002541615612ea5565b60ff60086109ad84612c7b565b50015460a01c1660058110156104315760046109c991146133c6565b6109d282612c7b565b5091600483015415610af75733600052600a825260406000209060005281526040600020918254908115610aa457600284019060ff825416610a4c5760070180547f71d14c5f08cb34cbfb59c06ea5151aafbf742d0b6ed00fdb83addd9afb5c0fd0936001600160a01b03939161056991908516336131a4565b60405162461bcd60e51b815260048101859052602a60248201527f656d657267656e63794c656e645769746864726177616c203a20616c726561646044820152691e481c99599d5b99195960b21b6064820152608490fd5b60405162461bcd60e51b815260048101849052602560248201527f656d657267656e63794c656e645769746864726177616c203a206e6f7420706c604482015264195919d95960da1b6064820152608490fd5b60405162461bcd60e51b815260048101839052602c60248201527f656d657267656e63794c656e645769746864726177616c203a206c656e64537560448201526b70706c79206973207a65726f60a01b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b03610b72612ce2565b16600052600a60205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b0390f35b3461046d57602036600319011261046d5760ff6008610bf6600435612c7b565b50015460a01c16600581101561043157602090604051908152f35b3461046d5760208060031936011261046d57600435610c2e612fb3565b610c3d60ff6002541615612ea5565b610c496101f782612c7b565b60ff6008610c5683612c7b565b50015460a01c166005811015610431576001148015610e5a575b8015610e34575b610c8090613158565b610c8981612c7b565b5090610c9481612cf8565b5090336000526009845260406000209060005283526040600020906001600584015491015491610cc483836130ba565b15610def578054918215610daa57600282019384549360ff8516610d65579360019693670de0b6b3a7640000610d2a856102e68b966102e07f732816f48de550f238bd0d4f5b79819c7b24a49d6132928978e3cd36568dd5db9c996102db60089d61327b565b04970187905560ff19161790550180546001600160a01b039190610d529085908416336131a4565b5416926040519283523392a36001600055005b60405162461bcd60e51b815260048101899052601f60248201527f726566756e64426f72726f77203a20616c726561647920726566756e646564006044820152606490fd5b60405162461bcd60e51b815260048101879052601a60248201527f726566756e64426f72726f77203a206e6f7420706c65646765640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601960248201527f726566756e64426f72726f77203a206e6f7420726566756e64000000000000006044820152606490fd5b5060ff6008610e4283612c7b565b50015460a01c16600581101561043157600314610c77565b5060ff6008610e6883612c7b565b50015460a01c16600581101561043157600214610c70565b3461046d57600036600319011261046d5760206040517f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb478152f35b3461046d57600036600319011261046d576020600154604051908152f35b3461046d57602036600319011261046d5760043560085481101561046d57610f0260c091612cf8565b5080549060018101549060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b610f4c36612ccc565b610f54612fb3565b610f6360ff6002541615612ea5565b610f78610f6f83612c7b565b50544210612eff565b60ff6008610f8584612c7b565b50015460a01c16600581101561043157610f9f9015612f56565b610fa882612c7b565b509133600052600a602052604060002090600052602052604060002091600381015490610fdb60048201928354906130ba565b83116110ee5760070180546001600160a01b039290610ffd9085908516612fd6565b946001548611156110935760028101805461ffff191690558254841661107457611029815434906130ad565b90556110363482546130ad565b90555b54169160405191825260208201527f129e8c18c2f7baf99c7eb257934c21f038c72412803512dcf0a942a4562a82ea60403392a36001600055005b61107f8682546130ad565b905561108c8582546130ad565b9055611039565b60405162461bcd60e51b815260206004820152602d60248201527f6465706f7369744c656e643a20616d6f756e74206c657373207468616e206d6960448201526c1b9a5b5d5b4819195c1bdcda5d609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603360248201527f6465706f7369744c656e64203a207374616b65416d6f756e742069732067726560448201527261746572207468616e206d6178537570706c7960681b6064820152608490fd5b3461046d57602036600319011261046d5760043561116b612d87565b61117481612c7b565b509061117f81612cf8565b5061118982612c7b565b50544210611322576008830190815460ff8160a01c166005811015610431576112de576004850190815490811515806112d1575b1561129357505090600180958594936111d76000976134ff565b91602083016111f16111e9825161327b565b855190613313565b936112236006611218670de0b6b3a764000061121260058801998a54613300565b046132e7565b940193845490613313565b9354918483118b1461125f57505050508355549101555b805460ff60a01b191660a085901b179055600080516020613be78339815191528280a4005b61128b95506102db9394509061127b61128392848a55516132e7565b905190613313565b925490613300565b91015561123a565b60ff60a01b1916600160a21b179093555090815560059092015460019290920191909155600490600090600080516020613be78339815191528280a4005b50600587015415156111bd565b606460405162461bcd60e51b815260206004820152602060248201527f736574746c653a20706f6f6c207374617465206d757374206265204d415443486044820152fd5b60405162461bcd60e51b815260206004820152602560248201527f736574746c653a2074696d65206973206c657373207468616e20736574746c656044820152642074696d6560d81b6064820152608490fd5b3461046d57602036600319011261046d57600435611391612d87565b80156113c557806001547ffa6189b739625142c695478e9d0095a1cb9e6fad92ad8a727e0055a5cc85b06b600080a3600155005b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a206d696e416d6f756e74206973207a65726f00006044820152606490fd5b3461046d57602036600319011261046d57611423612ce2565b61142b612d87565b6001600160a01b0390811690811561147957816003549182167fd44190acf9d04bdb5d3a1aafff7e6dee8b40b93dfb8c5d3f0eea4b9f4539c3f7600080a36001600160a01b03191617600355005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2066656541646472657373206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57600036600319011261046d576004546040516001600160a01b039091168152602090f35b3461046d57600036600319011261046d576020600754604051908152f35b3461046d5760208060031936011261046d57600435611532612fb3565b61154160ff6002541615612ea5565b61154d6101f782612c7b565b60ff600861155a83612c7b565b50015460a01c166005811015610431576001148015611772575b801561174c575b61158490613158565b61158d81612c7b565b5061159782612cf8565b509133600052600a845260406000209060005283526040600020918254928315611707576002019260ff845460081c166116c257670de0b6b3a7640000916115ef6115e46115f69361327b565b600486015490613313565b9054613300565b60098301546040516340c10f1960e01b815233600482015292909104602483018190529391926001600160a01b03929186908590604490829060009088165af19182156116b6577f6f4dd2687b3c3bfa99d39742b01d6e0ad9604c48559791d5df4ff5df44b41dfd94600793611689575b50805461ff001916610100179055015460405193845216923392a36001600055005b6116a890883d8a116116af575b6116a08183612d65565b810190613362565b5087611667565b503d611696565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260048101869052601a60248201527f636c61696d4c656e64203a616c726561647920636c61696d65640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601e60248201527f636c61696d4c656e64203a63616e6e6f74206765742073705f746f6b656e00006044820152606490fd5b5060ff600861175a83612c7b565b50015460a01c1660058110156104315760031461157b565b5060ff600861178083612c7b565b50015460a01c16600581101561043157600214611574565b3461046d57602036600319011261046d57602060016117b8600435612c7b565b500154421015604051908152f35b3461046d57600036600319011261046d577f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb47546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d5760043561182b81612c7b565b5090600b670de0b6b3a764000061186861185e61185161184a86612cf8565b50956134ff565b61127b602082015161327b565b6001850154613300565b0491549201546305f5e100908101928184106118945760209361188a91613300565b0411604051908152f35b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606490fd5b3461046d57600036600319011261046d57602060ff600254166040519015158152f35b3461046d5761190a36612ccc565b90611913612d87565b80600555816006557f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5600080a3005b3461046d57600036600319011261046d576020600554604051908152f35b3461046d576101408060031936011261046d5760249060043590823560a4356001600160a01b0381169081900361046d5760c4356001600160a01b0381169081900361046d5760e4356001600160a01b038116929083900361046d57610104356001600160a01b038116949085900361046d576119db612d87565b86811115611d3f578415611cee578315611c9d57604051966101a0880188811067ffffffffffffffff821117611c8857604052875260208701526044356040870152606435606087015260006080870152600060a087015260843560c087015260e086015261010085015260006101208501528284015261016083015261012435610180830152600754600160401b811015611c7357806001611a819201600755612c7b565b929092611c5e57805183556020810151600184015560408101516002840155606081015160038401556080810151600484015560a0810151600584015560c08101516006840155600783019060018060a01b0360e082015116916bffffffffffffffffffffffff60a01b9283825416179055600884019160018060a01b036101008301511693835493610120840151946005861015611c49576001600160a81b03191690951760a09490941b60ff60a01b16939093179093559081015160098401805484166001600160a01b03928316179055610160820151600a850180549094169116179091556101800151600b919091015560405160c0810167ffffffffffffffff811182821017611c34576040526000815260208101600081526040820160008152606083016000815260808401916000835260a085019360008552600854600160401b811015611c1f57806001611bdf9201600855612cf8565b969096611c0a5751865551600186015551600285015551600384015551600483015551600590910155005b87634e487b7160e01b60005260006004526000fd5b87634e487b7160e01b60005260416004526000fd5b82634e487b7160e01b60005260416004526000fd5b88634e487b7160e01b60005260216004526000fd5b83634e487b7160e01b60005260006004526000fd5b83634e487b7160e01b60005260416004526000fd5b89634e487b7160e01b60005260416004526000fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a207370546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a206a70546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526034818a01527f637265617465506f6f6c203a20656e6454696d65206d7573742062652067726560448201527361746572207468616e20736574746c6554696d6560601b6064820152608490fd5b3461046d57602036600319011261046d57600435611dbc612d87565b611dc581612cf8565b5090611dd081612c7b565b509081549283421115611f47576008830190815460ff8160a01c16600581101561043157600103611ef257611ebd61073c6107e260039888611e80600596611e5689662386f26fc1000061075860019f60070196600160026301e13380611e49836107529460a01b039e8f8d54169d60018701546130ba565b0492015494548095613300565b93866305f5e100611e70611e6a8c5461309c565b88613300565b0492168760025460081c16613639565b919092808311600014611ee657916107cf611e9e611eaf94836130ba565b80938f8980915416915416906131a4565b6004870155888601546130ba565b910155805460ff60a01b191660a085901b179055600080516020613be7833981519152600080a4005b505060048701556107d9565b60405162461bcd60e51b815260206004820152602760248201527f6c69717569646174653a20706f6f6c207374617465206d75737420626520657860448201526632b1baba34b7b760c91b6064820152608490fd5b60405162461bcd60e51b815260206004820152602860248201527f6c69717569646174653a2074696d65206973206c657373207468616e20736574604482015267746c652074696d6560c01b6064820152608490fd5b3461046d57600036600319011261046d576003546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d57611fdf612ce2565b611fe7612d87565b6001600160a01b0390808216801561204a57600254928360081c167f4558149b3c5427365f76d4ff19bef30aba41f17e5e601d4661330d8d2b687627600080a3610100600160a81b031990911660089190911b610100600160a81b031617600255005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2073776170526f75746572206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b036120c0612ce2565b16600052600960205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b3461046d5760208060031936011261046d5760043561213d612fb3565b61214c60ff6002541615612ea5565b6121586101f782612c7b565b60ff600861216583612c7b565b50015460a01c16600581101561043157600114801561239d575b8015612377575b61218f90613158565b61219881612c7b565b50906121a381612cf8565b50903360005260098452604060002090600052835260406000208054908115612328576002019260ff845460081c166122e3576000906122066121fb6305f5e1006121f48754600686015490613300565b049461327b565b600583015490613313565b809361221c670de0b6b3a7640000928392613300565b600a8401546040516340c10f1960e01b81523360048201529290910460248301526001600160a01b03959194899186916044918391908a165af19081156116b6577f3ddafe3ebb4d0c818317027aabfa82dc9983942ceeb80523167e2de047b17fbd96600895612292936122c6575b5054613300565b04946122a58685600785015416336131a4565b805461ff001916610100179055015460405193845216923392a36001600055005b6122dc908b3d8d116116af576116a08183612d65565b508a61228b565b60405162461bcd60e51b815260048101869052601d60248201527f636c61696d426f72726f77203a20616c726561647920636c61696d65640000006044820152606490fd5b60405162461bcd60e51b815260048101869052602160248201527f636c61696d426f72726f77203a2063616e6e6f7420676574206a705f746f6b656044820152603760f91b6064820152608490fd5b5060ff600861238583612c7b565b50015460a01c16600581101561043157600314612186565b5060ff60086123ab83612c7b565b50015460a01c1660058110156104315760021461217f565b3461046d576123d136612ccc565b906123da612fb3565b6123e960ff6002541615612ea5565b60ff60086123f683612c7b565b50015460a01c1660058110156104315760021480156126a4575b6124199061337a565b61242c61242582612c7b565b5091612cf8565b5091801561265f576009820154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b039290919086908290604490829060009088165af180156116b657612642575b5061248c81546102db8561327b565b906008850160ff815460a01c16600581101561043157600214612589575b5460a01c60ff166005811015610431576003146124c9575b6001600055005b84544210612538576124ea6007926004670de0b6b3a7640000930154613300565b0493016124fb8483835416336131a4565b5416926040519283528201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a38080808080806124c2565b60405162461bcd60e51b8152600481018790526024808201527f77697468647261774c656e64203a206c657373207468616e20736574746c652060448201526374696d6560e01b6064820152608490fd5b600186015442106125fd5760ff90670de0b6b3a76400006125ae856002860154613300565b0485600789016125c28383835416336131a4565b541690604051908152878a8201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a390506124aa565b60405162461bcd60e51b815260048101889052601b60248201527f77697468647261774c656e64203a206e6f7420656e642074696d6500000000006044820152606490fd5b61265890863d88116116af576116a08183612d65565b508561247d565b60405162461bcd60e51b815260206004820152601f60248201527f77697468647261774c656e64203a207370416d6f756e74206973207a65726f006044820152606490fd5b5060ff60086126b283612c7b565b50015460a01c16600581101561043157600314612410565b3461046d576126d836612ccc565b6126e0612fb3565b6126ef60ff6002541615612ea5565b60ff60086126fc84612c7b565b50015460a01c1660058110156104315760021480156129da575b61271f9061337a565b61273261272b83612c7b565b5092612cf8565b5090801561298557600a830154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b0394929091908690829060449082906000908a165af180156116b657612968575b506127a76305f5e10061279d8454600685015490613300565b046102db8561327b565b6008820192835460ff8160a01c166005811015610431576002146128a9575b5083549260ff8460a01c166005811015610431576003146127e8576001600055005b5442106128565791670de0b6b3a764000061280c6128179360058997960154613300565b0495869116336131a4565b5416926040519283528201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a380808080808080806124c2565b60405162461bcd60e51b815260048101889052602560248201527f7769746864726177426f72726f77203a206c657373207468616e206d617463686044820152642074696d6560d81b6064820152608490fd5b60018401544210612917576128db8791670de0b6b3a76400006128d0866003870154613300565b0492839116336131a4565b868554169060405190815286898201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a3876127c6565b60405162461bcd60e51b815260048101899052602360248201527f7769746864726177426f72726f77203a206c657373207468616e20656e642074604482015262696d6560e81b6064820152608490fd5b61297e90863d88116116af576116a08183612d65565b5085612784565b60405162461bcd60e51b815260206004820152602760248201527f7769746864726177426f72726f773a20776974686472617720616d6f756e74206044820152666973207a65726f60c81b6064820152608490fd5b5060ff60086129e884612c7b565b50015460a01c16600581101561043157600314612716565b612a0936612ccc565b612a11612fb3565b612a2060ff6002541615612ea5565b612a2c610f6f83612c7b565b60ff6008612a3984612c7b565b50015460a01c16600581101561043157612a539015612f56565b612a5c82612c7b565b509133600052600960205260406000209060005260205260406000206008830160018060a01b0391612a918484845416612fd6565b948515612b295760028201805461ffff191690558254600592908516612b0957612abd815434906130ad565b905501612acb3482546130ad565b90555b54169160405191825260208201527f1d7b72e666a0b6217efe7cfa1b604ea5c7b39219563ce48b30c9da77045247a560403392a36001600055005b612b148682546130ad565b905501612b228482546130ad565b9055612ace565b60405162461bcd60e51b815260206004820152602560248201527f6465706f736974426f72726f773a206465706f73697420616d6f756e74206973604482015264207a65726f60d81b6064820152608490fd5b3461046d57602036600319011261046d576020612b9a600435612c7b565b5054421015604051908152f35b3461046d57602036600319011261046d5760043560075481101561046d57612bce90612c7b565b508054600182015460028301549260ff60038201546004830154600584015490600685015460018060a01b039283600788015416926008880154958560098a0154169b600b87600a8c0154169a01549a6040519c8d5260208d015260408c015260608b015260808a015260a089015260c088015260e0870152811661010086015260a01c16936005851015610431576101a094610120850152610140840152610160830152610180820152f35b600754811015612cb657600c906007600052027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b634e487b7160e01b600052603260045260246000fd5b604090600319011261046d576004359060243590565b600435906001600160a01b038216820361046d57565b600854811015612cb6576006906008600052027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b6060810190811067ffffffffffffffff821117612d4f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117612d4f57604052565b604051602090818101903360601b82523060601b603482015260288152612dad81612d33565b5190207f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb4754604051630f5d50b360e11b81526004810192909252600060248301528290829060449082906001600160a01b03165afa9081156116b657600091612e75575b5015612e1a5750565b6084906040519062461bcd60e51b82526004820152602e60248201527f6d756c74695369676e6174757265436c69656e74203a2054686973207478206960448201526d1cc81b9bdd08185c1c9c9bdd995960921b6064820152fd5b908282813d8311612e9e575b612e8b8183612d65565b81010312612e9b57505138612e11565b80fd5b503d612e81565b15612eac57565b60405162461bcd60e51b815260206004820152602560248201527f506c65646765506f6f6c203a205374616b6520686173206265656e2073757370604482015264195b99195960da1b6064820152608490fd5b15612f0657565b60405162461bcd60e51b815260206004820152602260248201527f506c65646765506f6f6c203a204c657373207468616e20736574746c652074696044820152616d6560f01b6064820152608490fd5b15612f5d57565b60405162461bcd60e51b815260206004820152602860248201527f73746174653a20506f6f6c20737461747573206973206e6f7420657175616c206044820152670e8de40dac2e8c6d60c31b6064820152608490fd5b600260005414612fc4576002600055565b604051633ee5aeb560e01b8152600490fd5b6001600160a01b031680612fea5750503490565b81612ff3575090565b6040516323b872dd60e01b60208201523360248201523060448201526064808201849052815260a081019167ffffffffffffffff831182841017612d4f5761303d92604052613040565b90565b906000602091828151910182855af1156116b6576000513d61309357506001600160a01b0381163b155b6130715750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b6001141561306a565b6305f5e10081019081106118945790565b9081019081106118945790565b9081039081116130c75790565b60405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606490fd5b1561311357565b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a20416674657220736574746c652074696d6500006044820152606490fd5b1561315f57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a206e6f74206d6174636820616e6420756e646f6e6500000000006044820152606490fd5b6001600160a01b039182169291908361320c578260008115613203575b6000808093819387871690f1156116b6577fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9916020915b6040519485521692a3565b506108fc6131c1565b60405163a9059cbb60e01b6020808301919091528383166001600160a01b03166024830152604480830186905282527fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9939092909161327690613270606482612d65565b87613040565b6131f8565b670de0b6b3a7640000908181029181159183041417156132985790565b60405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608490fd5b6305f5e100908181029181159183041417156132985790565b8181029181159183041417156132985790565b811561331d570490565b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206469766973696f6e206f766572666c6f7700000000006044820152606490fd5b9081602091031261046d5751801515810361046d5790565b1561338157565b60405162461bcd60e51b815260206004820152601960248201527f73746174653a2066696e697368206c69717569646174696f6e000000000000006044820152606490fd5b156133cd57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a207374617465206d75737420626520756e646f6e6500000000006044820152606490fd5b916305f5e10061342561303d9483613300565b04918280613435575b50506130ba565b60035461344b92906001600160a01b03166131a4565b388261342e565b805115612cb65760200190565b805160011015612cb65760400190565b8051821015612cb65760209160051b010190565b90602090818382031261046d57825167ffffffffffffffff9384821161046d570181601f8201121561046d578051938411612d4f578360051b90604051946134cd85840187612d65565b8552838086019282010192831161046d578301905b8282106134f0575050505090565b815181529083019083016134e2565b6040805167ffffffffffffffff9281830184811183821017612d4f5761352b9284918252369037612c7b565b509080519161353983612d33565b600283526020926008848201928436853760078101546001600160a01b039283929091831661356786613452565b520154166135748361345f565b52600454169083519283916304e59d2760e11b835260248301908760048501525180915260448301919060005b88828210613622575050505091818060009403915afa908115613617576000916135f6575b5081519384830190811185821017612d4f576135ee92526135e681613452565b51845261345f565b519082015290565b613611913d8091833e6136098183612d65565b810190613483565b386135c6565b82513d6000823e3d90fd5b8351855287955093840193909201916001016135a1565b9392909190600081156139115750600061368191613658848689613975565b9060405193849283926307c0329d60e21b84526004840152604060248401526044830190613919565b03816001600160a01b0389165afa80156116b6576136a7916000916138f8575b50613452565b51935b6001600160a01b03838116928315906136da9082156138e9575b8381169687159485156138da575b861695613975565b91600091156137e457505090601e4201918242116137b5576000916137249188604051809681958294637ff36ab560e01b8452886004850152608060248501526084840190613919565b90306044840152606483015203925af19081156116b6576000916137cb575b50915b61374f83613452565b5183516000199391908481019081116137b5577ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235916137906040928861346f565b5182519182526020820152a381519081019081116137b5576137b19161346f565b5190565b634e487b7160e01b600052601160045260246000fd5b6137de913d8091833e6136098183612d65565b38613743565b156138505750601e42018042116137b55761381d92876000809460405196879586948593632512eca560e11b8552309160048601613a93565b03925af19081156116b657600091613837575b5091613746565b61384a913d8091833e6136098183612d65565b38613830565b91601e4201918242116138c657918391888361388595604051968795869485936338ed173960e01b8552309160048601613a93565b03925af19182156138ba57809261389f575b505091613746565b6138b392503d8091833e6136098183612d65565b3880613897565b604051903d90823e3d90fd5b634e487b7160e01b84526011600452602484fd5b6138e48784613acd565b6136d2565b6138f38588613acd565b6136c4565b61390b913d8091833e6136098183612d65565b386136a1565b9050936136aa565b90815180825260208080930193019160005b828110613939575050505090565b83516001600160a01b03168552938101939281019260010161392b565b9081602091031261046d57516001600160a01b038116810361046d5790565b604080519294936001600160a01b0392831661399085612d33565b60028552602091833684880137859785811615600014613a8e575083516315ab88c960e31b81528381600481865afa908115613a8357600091613a66575b505b856139da88613452565b91169052808516613a58575090806004928451938480926315ab88c960e31b82525afa928315613a4e575090613a1b9291600092613a21575b50509261345f565b91169052565b613a409250803d10613a47575b613a388183612d65565b810190613956565b3880613a13565b503d613a2e565b513d6000823e3d90fd5b915050613a1b91509261345f565b613a7d9150843d8611613a4757613a388183612d65565b386139ce565b85513d6000823e3d90fd5b6139d0565b90608092613ab9919695949683526000602084015260a0604084015260a0830190613919565b6001600160a01b0390951660608201520152565b60405163095ea7b360e01b60208083019182526001600160a01b039094166024830152600019604480840191909152825267ffffffffffffffff92916080810184811182821017612d4f57604052600092839283809351925af1913d15613bdd573d908111613bc95760405190613b4d601f8201601f1916860183612d65565b81528091843d92013e5b81613b99575b5015613b665750565b6064906040519062461bcd60e51b82526004820152600c60248201526b2173616665417070726f766560a01b6044820152fd5b80518015925083908315613bb1575b50505038613b5d565b613bc19350820181019101613362565b388281613ba8565b634e487b7160e01b82526041600452602482fd5b50506060613b5756fe516112f3bf06e373fcea44db364769c04cc7ef4392e6de95d2b250720bcacefba26469706673582212205bc7ac1966f51929369415b8d7abd0aeed8de2823d02bbbd330b641d83c0931a64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80630d6abfc114612ba757806314c090cc14612b7c57806316f941b514612a005780631e107979146126ca57806338f2aa76146123c35780633ab4a445146121205780633c9fadc31461209f5780634127365714611fc65780634127535814611f9d578063415f124014611da0578063459b911c146119605780634aea0aec1461194257806352f7c988146118fc57806361a552dc146118d957806362faecf41461180e578063638c7e17146117c65780636abd7f29146117985780636c42fed2146115155780636de6ff3a146114f75780637dc0d1d0146114ce5780638705fcd41461140a578063897b0637146113755780638df828001461114f57806390590da014610f43578063981b48a614610ed95780639b2cb5d814610ebb5780639d71488e14610e80578063a62ff16414610c11578063b159751714610bd6578063bb176a6414610b51578063bf38b8f614610973578063c31c9c0714610946578063c9333756146108ff578063d353a1cb1461069c578063d431b1ac1461066b578063e271fa0c14610490578063e626648a146104725763eec8d506146101be57600080fd5b3461046d5760208060031936011261046d57600435906101dc612fb3565b6101eb60ff6002541615612ea5565b6102016101f783612c7b565b505442101561310c565b60ff600861020e84612c7b565b50015460a01c166005811015610431576001148015610447575b801561040b575b61023890613158565b61024182612c7b565b5061024b83612cf8565b509233600052600a8352604060002090600052825260406000209081549081156103c657600481015494549061028182876130ba565b1561038157600284019182549360ff851661033c57670de0b6b3a76400006102eb896102e66007956102e07fc3e20279d41b3ed21d277920877e5e5c6665bf6aca607046a3fe0fd2bd6bda7d9b9c9d6102db60019861327b565b613313565b926130ba565b613300565b04960191868355600160ff1980961617845501916001808060a01b03946103168887875416336131a4565b8254161790556103278154866130ad565b90555416926040519283523392a36001600055005b60405162461bcd60e51b815260048101889052601d60248201527f726566756e644c656e64203a20616c726561647920726566756e6465640000006044820152606490fd5b60405162461bcd60e51b815260048101869052601760248201527f726566756e644c656e64203a206e6f7420726566756e640000000000000000006044820152606490fd5b60405162461bcd60e51b815260048101859052601860248201527f726566756e644c656e64203a206e6f7420706c656467656400000000000000006044820152606490fd5b5060ff600861041984612c7b565b50015460a01c1660058110156104315760031461022f565b634e487b7160e01b600052602160045260246000fd5b5060ff600861045584612c7b565b50015460a01c16600581101561043157600214610228565b600080fd5b3461046d57600036600319011261046d576020600654604051908152f35b3461046d5760208060031936011261046d57600435906104ae612fb3565b6104bd60ff6002541615612ea5565b60ff60086104ca84612c7b565b50015460a01c1660058110156104315760046104e691146133c6565b6104ef82612c7b565b5091600583015415610613573360005260098252604060002090600052815260406000209182549081156105ce57600284019060ff8254166105895760080180547f5a06c7de92f1dc59e8cba872927d016c80ce5f0fb2295c898dfb7a2f08e43fb1936001600160a01b03939161056991908516336131a4565b600160ff1982541617905554169254916040519283523392a36001600055005b60405162461bcd60e51b815260048101859052601a60248201527f726566756e64426f72726f773a20616761696e20726566756e640000000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601960248201527f726566756e64426f72726f773a206e6f7420706c6564676564000000000000006044820152606490fd5b60405162461bcd60e51b815260048101839052602a60248201527f656d657267656e6379426f72726f775769746864726177616c203a206e6f74206044820152691dda5d1a191c985dd85b60b21b6064820152608490fd5b3461046d57600036600319011261046d57610684612d87565b60025460ff80821615169060ff191617600255600080f35b3461046d57602036600319011261046d576004356106b8612d87565b6106c181612c7b565b50906106cc81612cf8565b509060016106d982612c7b565b50015442106108ba576008830180549260ff8460a01c16600581101561043157600103610869576007850161078a60018060a01b039561075f8784541698662386f26fc1000061075860026301e1338061074161073c60018701548754906130ba565b6132e7565b049301549261075289548095613300565b90613300565b04906130ad565b97876305f5e10061077a61077460055461309c565b8c613300565b0492168860025460081c16613639565b919095878310610824576107e2600197846107f0948b60029c6003981160001461081957916107cf6107bf6107d494836130ba565b809388808c5416915416906131a4565b6130ba565b8a8701555b888601546130ba565b906006549086541690613412565b910155805460ff60a01b191660a184901b179055600080516020613be7833981519152600080a4005b50508a8701556107d9565b60405162461bcd60e51b815260206004820152601c60248201527f66696e6973683a20536c69707061676520697320746f6f2068696768000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526024808201527f66696e6973683a20706f6f6c207374617465206d7573742062652065786563756044820152633a34b7b760e11b6064820152608490fd5b60405162461bcd60e51b815260206004820152601a60248201527f66696e6973683a206c657373207468616e20656e642074696d650000000000006044820152606490fd5b3461046d5760208060031936011261046d5761091c6004356134ff565b604051916000835b6002821061093157604085f35b82806001928651815201940191019092610924565b3461046d57600036600319011261046d5760025460405160089190911c6001600160a01b03168152602090f35b3461046d5760208060031936011261046d5760043590610991612fb3565b6109a060ff6002541615612ea5565b60ff60086109ad84612c7b565b50015460a01c1660058110156104315760046109c991146133c6565b6109d282612c7b565b5091600483015415610af75733600052600a825260406000209060005281526040600020918254908115610aa457600284019060ff825416610a4c5760070180547f71d14c5f08cb34cbfb59c06ea5151aafbf742d0b6ed00fdb83addd9afb5c0fd0936001600160a01b03939161056991908516336131a4565b60405162461bcd60e51b815260048101859052602a60248201527f656d657267656e63794c656e645769746864726177616c203a20616c726561646044820152691e481c99599d5b99195960b21b6064820152608490fd5b60405162461bcd60e51b815260048101849052602560248201527f656d657267656e63794c656e645769746864726177616c203a206e6f7420706c604482015264195919d95960da1b6064820152608490fd5b60405162461bcd60e51b815260048101839052602c60248201527f656d657267656e63794c656e645769746864726177616c203a206c656e64537560448201526b70706c79206973207a65726f60a01b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b03610b72612ce2565b16600052600a60205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b0390f35b3461046d57602036600319011261046d5760ff6008610bf6600435612c7b565b50015460a01c16600581101561043157602090604051908152f35b3461046d5760208060031936011261046d57600435610c2e612fb3565b610c3d60ff6002541615612ea5565b610c496101f782612c7b565b60ff6008610c5683612c7b565b50015460a01c166005811015610431576001148015610e5a575b8015610e34575b610c8090613158565b610c8981612c7b565b5090610c9481612cf8565b5090336000526009845260406000209060005283526040600020906001600584015491015491610cc483836130ba565b15610def578054918215610daa57600282019384549360ff8516610d65579360019693670de0b6b3a7640000610d2a856102e68b966102e07f732816f48de550f238bd0d4f5b79819c7b24a49d6132928978e3cd36568dd5db9c996102db60089d61327b565b04970187905560ff19161790550180546001600160a01b039190610d529085908416336131a4565b5416926040519283523392a36001600055005b60405162461bcd60e51b815260048101899052601f60248201527f726566756e64426f72726f77203a20616c726561647920726566756e646564006044820152606490fd5b60405162461bcd60e51b815260048101879052601a60248201527f726566756e64426f72726f77203a206e6f7420706c65646765640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601960248201527f726566756e64426f72726f77203a206e6f7420726566756e64000000000000006044820152606490fd5b5060ff6008610e4283612c7b565b50015460a01c16600581101561043157600314610c77565b5060ff6008610e6883612c7b565b50015460a01c16600581101561043157600214610c70565b3461046d57600036600319011261046d5760206040517f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb478152f35b3461046d57600036600319011261046d576020600154604051908152f35b3461046d57602036600319011261046d5760043560085481101561046d57610f0260c091612cf8565b5080549060018101549060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b610f4c36612ccc565b610f54612fb3565b610f6360ff6002541615612ea5565b610f78610f6f83612c7b565b50544210612eff565b60ff6008610f8584612c7b565b50015460a01c16600581101561043157610f9f9015612f56565b610fa882612c7b565b509133600052600a602052604060002090600052602052604060002091600381015490610fdb60048201928354906130ba565b83116110ee5760070180546001600160a01b039290610ffd9085908516612fd6565b946001548611156110935760028101805461ffff191690558254841661107457611029815434906130ad565b90556110363482546130ad565b90555b54169160405191825260208201527f129e8c18c2f7baf99c7eb257934c21f038c72412803512dcf0a942a4562a82ea60403392a36001600055005b61107f8682546130ad565b905561108c8582546130ad565b9055611039565b60405162461bcd60e51b815260206004820152602d60248201527f6465706f7369744c656e643a20616d6f756e74206c657373207468616e206d6960448201526c1b9a5b5d5b4819195c1bdcda5d609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603360248201527f6465706f7369744c656e64203a207374616b65416d6f756e742069732067726560448201527261746572207468616e206d6178537570706c7960681b6064820152608490fd5b3461046d57602036600319011261046d5760043561116b612d87565b61117481612c7b565b509061117f81612cf8565b5061118982612c7b565b50544210611322576008830190815460ff8160a01c166005811015610431576112de576004850190815490811515806112d1575b1561129357505090600180958594936111d76000976134ff565b91602083016111f16111e9825161327b565b855190613313565b936112236006611218670de0b6b3a764000061121260058801998a54613300565b046132e7565b940193845490613313565b9354918483118b1461125f57505050508355549101555b805460ff60a01b191660a085901b179055600080516020613be78339815191528280a4005b61128b95506102db9394509061127b61128392848a55516132e7565b905190613313565b925490613300565b91015561123a565b60ff60a01b1916600160a21b179093555090815560059092015460019290920191909155600490600090600080516020613be78339815191528280a4005b50600587015415156111bd565b606460405162461bcd60e51b815260206004820152602060248201527f736574746c653a20706f6f6c207374617465206d757374206265204d415443486044820152fd5b60405162461bcd60e51b815260206004820152602560248201527f736574746c653a2074696d65206973206c657373207468616e20736574746c656044820152642074696d6560d81b6064820152608490fd5b3461046d57602036600319011261046d57600435611391612d87565b80156113c557806001547ffa6189b739625142c695478e9d0095a1cb9e6fad92ad8a727e0055a5cc85b06b600080a3600155005b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a206d696e416d6f756e74206973207a65726f00006044820152606490fd5b3461046d57602036600319011261046d57611423612ce2565b61142b612d87565b6001600160a01b0390811690811561147957816003549182167fd44190acf9d04bdb5d3a1aafff7e6dee8b40b93dfb8c5d3f0eea4b9f4539c3f7600080a36001600160a01b03191617600355005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2066656541646472657373206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57600036600319011261046d576004546040516001600160a01b039091168152602090f35b3461046d57600036600319011261046d576020600754604051908152f35b3461046d5760208060031936011261046d57600435611532612fb3565b61154160ff6002541615612ea5565b61154d6101f782612c7b565b60ff600861155a83612c7b565b50015460a01c166005811015610431576001148015611772575b801561174c575b61158490613158565b61158d81612c7b565b5061159782612cf8565b509133600052600a845260406000209060005283526040600020918254928315611707576002019260ff845460081c166116c257670de0b6b3a7640000916115ef6115e46115f69361327b565b600486015490613313565b9054613300565b60098301546040516340c10f1960e01b815233600482015292909104602483018190529391926001600160a01b03929186908590604490829060009088165af19182156116b6577f6f4dd2687b3c3bfa99d39742b01d6e0ad9604c48559791d5df4ff5df44b41dfd94600793611689575b50805461ff001916610100179055015460405193845216923392a36001600055005b6116a890883d8a116116af575b6116a08183612d65565b810190613362565b5087611667565b503d611696565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260048101869052601a60248201527f636c61696d4c656e64203a616c726561647920636c61696d65640000000000006044820152606490fd5b60405162461bcd60e51b815260048101869052601e60248201527f636c61696d4c656e64203a63616e6e6f74206765742073705f746f6b656e00006044820152606490fd5b5060ff600861175a83612c7b565b50015460a01c1660058110156104315760031461157b565b5060ff600861178083612c7b565b50015460a01c16600581101561043157600214611574565b3461046d57602036600319011261046d57602060016117b8600435612c7b565b500154421015604051908152f35b3461046d57600036600319011261046d577f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb47546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d5760043561182b81612c7b565b5090600b670de0b6b3a764000061186861185e61185161184a86612cf8565b50956134ff565b61127b602082015161327b565b6001850154613300565b0491549201546305f5e100908101928184106118945760209361188a91613300565b0411604051908152f35b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606490fd5b3461046d57600036600319011261046d57602060ff600254166040519015158152f35b3461046d5761190a36612ccc565b90611913612d87565b80600555816006557f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5600080a3005b3461046d57600036600319011261046d576020600554604051908152f35b3461046d576101408060031936011261046d5760249060043590823560a4356001600160a01b0381169081900361046d5760c4356001600160a01b0381169081900361046d5760e4356001600160a01b038116929083900361046d57610104356001600160a01b038116949085900361046d576119db612d87565b86811115611d3f578415611cee578315611c9d57604051966101a0880188811067ffffffffffffffff821117611c8857604052875260208701526044356040870152606435606087015260006080870152600060a087015260843560c087015260e086015261010085015260006101208501528284015261016083015261012435610180830152600754600160401b811015611c7357806001611a819201600755612c7b565b929092611c5e57805183556020810151600184015560408101516002840155606081015160038401556080810151600484015560a0810151600584015560c08101516006840155600783019060018060a01b0360e082015116916bffffffffffffffffffffffff60a01b9283825416179055600884019160018060a01b036101008301511693835493610120840151946005861015611c49576001600160a81b03191690951760a09490941b60ff60a01b16939093179093559081015160098401805484166001600160a01b03928316179055610160820151600a850180549094169116179091556101800151600b919091015560405160c0810167ffffffffffffffff811182821017611c34576040526000815260208101600081526040820160008152606083016000815260808401916000835260a085019360008552600854600160401b811015611c1f57806001611bdf9201600855612cf8565b969096611c0a5751865551600186015551600285015551600384015551600483015551600590910155005b87634e487b7160e01b60005260006004526000fd5b87634e487b7160e01b60005260416004526000fd5b82634e487b7160e01b60005260416004526000fd5b88634e487b7160e01b60005260216004526000fd5b83634e487b7160e01b60005260006004526000fd5b83634e487b7160e01b60005260416004526000fd5b89634e487b7160e01b60005260416004526000fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a207370546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201528089018990527f637265617465506f6f6c203a206a70546f6b656e206973207a65726f206164646044820152637265737360e01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526034818a01527f637265617465506f6f6c203a20656e6454696d65206d7573742062652067726560448201527361746572207468616e20736574746c6554696d6560601b6064820152608490fd5b3461046d57602036600319011261046d57600435611dbc612d87565b611dc581612cf8565b5090611dd081612c7b565b509081549283421115611f47576008830190815460ff8160a01c16600581101561043157600103611ef257611ebd61073c6107e260039888611e80600596611e5689662386f26fc1000061075860019f60070196600160026301e13380611e49836107529460a01b039e8f8d54169d60018701546130ba565b0492015494548095613300565b93866305f5e100611e70611e6a8c5461309c565b88613300565b0492168760025460081c16613639565b919092808311600014611ee657916107cf611e9e611eaf94836130ba565b80938f8980915416915416906131a4565b6004870155888601546130ba565b910155805460ff60a01b191660a085901b179055600080516020613be7833981519152600080a4005b505060048701556107d9565b60405162461bcd60e51b815260206004820152602760248201527f6c69717569646174653a20706f6f6c207374617465206d75737420626520657860448201526632b1baba34b7b760c91b6064820152608490fd5b60405162461bcd60e51b815260206004820152602860248201527f6c69717569646174653a2074696d65206973206c657373207468616e20736574604482015267746c652074696d6560c01b6064820152608490fd5b3461046d57600036600319011261046d576003546040516001600160a01b039091168152602090f35b3461046d57602036600319011261046d57611fdf612ce2565b611fe7612d87565b6001600160a01b0390808216801561204a57600254928360081c167f4558149b3c5427365f76d4ff19bef30aba41f17e5e601d4661330d8d2b687627600080a3610100600160a81b031990911660089190911b610100600160a81b031617600255005b60405162461bcd60e51b815260206004820152602760248201527f506c65646765506f6f6c203a2073776170526f75746572206973207a65726f206044820152666164647265737360c81b6064820152608490fd5b3461046d57604036600319011261046d576001600160a01b036120c0612ce2565b16600052600960205260406000206024356000526020526040600020805490610bd26002600183015492015460405193849360ff808460081c16931691859260609295949195608085019685526020850152151560408401521515910152565b3461046d5760208060031936011261046d5760043561213d612fb3565b61214c60ff6002541615612ea5565b6121586101f782612c7b565b60ff600861216583612c7b565b50015460a01c16600581101561043157600114801561239d575b8015612377575b61218f90613158565b61219881612c7b565b50906121a381612cf8565b50903360005260098452604060002090600052835260406000208054908115612328576002019260ff845460081c166122e3576000906122066121fb6305f5e1006121f48754600686015490613300565b049461327b565b600583015490613313565b809361221c670de0b6b3a7640000928392613300565b600a8401546040516340c10f1960e01b81523360048201529290910460248301526001600160a01b03959194899186916044918391908a165af19081156116b6577f3ddafe3ebb4d0c818317027aabfa82dc9983942ceeb80523167e2de047b17fbd96600895612292936122c6575b5054613300565b04946122a58685600785015416336131a4565b805461ff001916610100179055015460405193845216923392a36001600055005b6122dc908b3d8d116116af576116a08183612d65565b508a61228b565b60405162461bcd60e51b815260048101869052601d60248201527f636c61696d426f72726f77203a20616c726561647920636c61696d65640000006044820152606490fd5b60405162461bcd60e51b815260048101869052602160248201527f636c61696d426f72726f77203a2063616e6e6f7420676574206a705f746f6b656044820152603760f91b6064820152608490fd5b5060ff600861238583612c7b565b50015460a01c16600581101561043157600314612186565b5060ff60086123ab83612c7b565b50015460a01c1660058110156104315760021461217f565b3461046d576123d136612ccc565b906123da612fb3565b6123e960ff6002541615612ea5565b60ff60086123f683612c7b565b50015460a01c1660058110156104315760021480156126a4575b6124199061337a565b61242c61242582612c7b565b5091612cf8565b5091801561265f576009820154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b039290919086908290604490829060009088165af180156116b657612642575b5061248c81546102db8561327b565b906008850160ff815460a01c16600581101561043157600214612589575b5460a01c60ff166005811015610431576003146124c9575b6001600055005b84544210612538576124ea6007926004670de0b6b3a7640000930154613300565b0493016124fb8483835416336131a4565b5416926040519283528201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a38080808080806124c2565b60405162461bcd60e51b8152600481018790526024808201527f77697468647261774c656e64203a206c657373207468616e20736574746c652060448201526374696d6560e01b6064820152608490fd5b600186015442106125fd5760ff90670de0b6b3a76400006125ae856002860154613300565b0485600789016125c28383835416336131a4565b541690604051908152878a8201527f690f32ccf3e832d5ff975d781039bc2affebee9c973939c9b710091b87954c9d60403392a390506124aa565b60405162461bcd60e51b815260048101889052601b60248201527f77697468647261774c656e64203a206e6f7420656e642074696d6500000000006044820152606490fd5b61265890863d88116116af576116a08183612d65565b508561247d565b60405162461bcd60e51b815260206004820152601f60248201527f77697468647261774c656e64203a207370416d6f756e74206973207a65726f006044820152606490fd5b5060ff60086126b283612c7b565b50015460a01c16600581101561043157600314612410565b3461046d576126d836612ccc565b6126e0612fb3565b6126ef60ff6002541615612ea5565b60ff60086126fc84612c7b565b50015460a01c1660058110156104315760021480156129da575b61271f9061337a565b61273261272b83612c7b565b5092612cf8565b5090801561298557600a830154604051632770a7eb60e21b8152336004820152602481018390526020946001600160a01b0394929091908690829060449082906000908a165af180156116b657612968575b506127a76305f5e10061279d8454600685015490613300565b046102db8561327b565b6008820192835460ff8160a01c166005811015610431576002146128a9575b5083549260ff8460a01c166005811015610431576003146127e8576001600055005b5442106128565791670de0b6b3a764000061280c6128179360058997960154613300565b0495869116336131a4565b5416926040519283528201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a380808080808080806124c2565b60405162461bcd60e51b815260048101889052602560248201527f7769746864726177426f72726f77203a206c657373207468616e206d617463686044820152642074696d6560d81b6064820152608490fd5b60018401544210612917576128db8791670de0b6b3a76400006128d0866003870154613300565b0492839116336131a4565b868554169060405190815286898201527f0f5e74952c2f9259a748f3aa9a6c4534a6f46a5966e5baabdb6bd337f05234a860403392a3876127c6565b60405162461bcd60e51b815260048101899052602360248201527f7769746864726177426f72726f77203a206c657373207468616e20656e642074604482015262696d6560e81b6064820152608490fd5b61297e90863d88116116af576116a08183612d65565b5085612784565b60405162461bcd60e51b815260206004820152602760248201527f7769746864726177426f72726f773a20776974686472617720616d6f756e74206044820152666973207a65726f60c81b6064820152608490fd5b5060ff60086129e884612c7b565b50015460a01c16600581101561043157600314612716565b612a0936612ccc565b612a11612fb3565b612a2060ff6002541615612ea5565b612a2c610f6f83612c7b565b60ff6008612a3984612c7b565b50015460a01c16600581101561043157612a539015612f56565b612a5c82612c7b565b509133600052600960205260406000209060005260205260406000206008830160018060a01b0391612a918484845416612fd6565b948515612b295760028201805461ffff191690558254600592908516612b0957612abd815434906130ad565b905501612acb3482546130ad565b90555b54169160405191825260208201527f1d7b72e666a0b6217efe7cfa1b604ea5c7b39219563ce48b30c9da77045247a560403392a36001600055005b612b148682546130ad565b905501612b228482546130ad565b9055612ace565b60405162461bcd60e51b815260206004820152602560248201527f6465706f736974426f72726f773a206465706f73697420616d6f756e74206973604482015264207a65726f60d81b6064820152608490fd5b3461046d57602036600319011261046d576020612b9a600435612c7b565b5054421015604051908152f35b3461046d57602036600319011261046d5760043560075481101561046d57612bce90612c7b565b508054600182015460028301549260ff60038201546004830154600584015490600685015460018060a01b039283600788015416926008880154958560098a0154169b600b87600a8c0154169a01549a6040519c8d5260208d015260408c015260608b015260808a015260a089015260c088015260e0870152811661010086015260a01c16936005851015610431576101a094610120850152610140840152610160830152610180820152f35b600754811015612cb657600c906007600052027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b634e487b7160e01b600052603260045260246000fd5b604090600319011261046d576004359060243590565b600435906001600160a01b038216820361046d57565b600854811015612cb6576006906008600052027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b6060810190811067ffffffffffffffff821117612d4f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117612d4f57604052565b604051602090818101903360601b82523060601b603482015260288152612dad81612d33565b5190207f8dddb57468cf5338ee155397ad1400a7a564308824f517d20a8a7c516523bb4754604051630f5d50b360e11b81526004810192909252600060248301528290829060449082906001600160a01b03165afa9081156116b657600091612e75575b5015612e1a5750565b6084906040519062461bcd60e51b82526004820152602e60248201527f6d756c74695369676e6174757265436c69656e74203a2054686973207478206960448201526d1cc81b9bdd08185c1c9c9bdd995960921b6064820152fd5b908282813d8311612e9e575b612e8b8183612d65565b81010312612e9b57505138612e11565b80fd5b503d612e81565b15612eac57565b60405162461bcd60e51b815260206004820152602560248201527f506c65646765506f6f6c203a205374616b6520686173206265656e2073757370604482015264195b99195960da1b6064820152608490fd5b15612f0657565b60405162461bcd60e51b815260206004820152602260248201527f506c65646765506f6f6c203a204c657373207468616e20736574746c652074696044820152616d6560f01b6064820152608490fd5b15612f5d57565b60405162461bcd60e51b815260206004820152602860248201527f73746174653a20506f6f6c20737461747573206973206e6f7420657175616c206044820152670e8de40dac2e8c6d60c31b6064820152608490fd5b600260005414612fc4576002600055565b604051633ee5aeb560e01b8152600490fd5b6001600160a01b031680612fea5750503490565b81612ff3575090565b6040516323b872dd60e01b60208201523360248201523060448201526064808201849052815260a081019167ffffffffffffffff831182841017612d4f5761303d92604052613040565b90565b906000602091828151910182855af1156116b6576000513d61309357506001600160a01b0381163b155b6130715750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b6001141561306a565b6305f5e10081019081106118945790565b9081019081106118945790565b9081039081116130c75790565b60405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606490fd5b1561311357565b60405162461bcd60e51b815260206004820152601e60248201527f506c65646765506f6f6c203a20416674657220736574746c652074696d6500006044820152606490fd5b1561315f57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a206e6f74206d6174636820616e6420756e646f6e6500000000006044820152606490fd5b6001600160a01b039182169291908361320c578260008115613203575b6000808093819387871690f1156116b6577fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9916020915b6040519485521692a3565b506108fc6131c1565b60405163a9059cbb60e01b6020808301919091528383166001600160a01b03166024830152604480830186905282527fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9939092909161327690613270606482612d65565b87613040565b6131f8565b670de0b6b3a7640000908181029181159183041417156132985790565b60405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608490fd5b6305f5e100908181029181159183041417156132985790565b8181029181159183041417156132985790565b811561331d570490565b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206469766973696f6e206f766572666c6f7700000000006044820152606490fd5b9081602091031261046d5751801515810361046d5790565b1561338157565b60405162461bcd60e51b815260206004820152601960248201527f73746174653a2066696e697368206c69717569646174696f6e000000000000006044820152606490fd5b156133cd57565b60405162461bcd60e51b815260206004820152601b60248201527f73746174653a207374617465206d75737420626520756e646f6e6500000000006044820152606490fd5b916305f5e10061342561303d9483613300565b04918280613435575b50506130ba565b60035461344b92906001600160a01b03166131a4565b388261342e565b805115612cb65760200190565b805160011015612cb65760400190565b8051821015612cb65760209160051b010190565b90602090818382031261046d57825167ffffffffffffffff9384821161046d570181601f8201121561046d578051938411612d4f578360051b90604051946134cd85840187612d65565b8552838086019282010192831161046d578301905b8282106134f0575050505090565b815181529083019083016134e2565b6040805167ffffffffffffffff9281830184811183821017612d4f5761352b9284918252369037612c7b565b509080519161353983612d33565b600283526020926008848201928436853760078101546001600160a01b039283929091831661356786613452565b520154166135748361345f565b52600454169083519283916304e59d2760e11b835260248301908760048501525180915260448301919060005b88828210613622575050505091818060009403915afa908115613617576000916135f6575b5081519384830190811185821017612d4f576135ee92526135e681613452565b51845261345f565b519082015290565b613611913d8091833e6136098183612d65565b810190613483565b386135c6565b82513d6000823e3d90fd5b8351855287955093840193909201916001016135a1565b9392909190600081156139115750600061368191613658848689613975565b9060405193849283926307c0329d60e21b84526004840152604060248401526044830190613919565b03816001600160a01b0389165afa80156116b6576136a7916000916138f8575b50613452565b51935b6001600160a01b03838116928315906136da9082156138e9575b8381169687159485156138da575b861695613975565b91600091156137e457505090601e4201918242116137b5576000916137249188604051809681958294637ff36ab560e01b8452886004850152608060248501526084840190613919565b90306044840152606483015203925af19081156116b6576000916137cb575b50915b61374f83613452565b5183516000199391908481019081116137b5577ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235916137906040928861346f565b5182519182526020820152a381519081019081116137b5576137b19161346f565b5190565b634e487b7160e01b600052601160045260246000fd5b6137de913d8091833e6136098183612d65565b38613743565b156138505750601e42018042116137b55761381d92876000809460405196879586948593632512eca560e11b8552309160048601613a93565b03925af19081156116b657600091613837575b5091613746565b61384a913d8091833e6136098183612d65565b38613830565b91601e4201918242116138c657918391888361388595604051968795869485936338ed173960e01b8552309160048601613a93565b03925af19182156138ba57809261389f575b505091613746565b6138b392503d8091833e6136098183612d65565b3880613897565b604051903d90823e3d90fd5b634e487b7160e01b84526011600452602484fd5b6138e48784613acd565b6136d2565b6138f38588613acd565b6136c4565b61390b913d8091833e6136098183612d65565b386136a1565b9050936136aa565b90815180825260208080930193019160005b828110613939575050505090565b83516001600160a01b03168552938101939281019260010161392b565b9081602091031261046d57516001600160a01b038116810361046d5790565b604080519294936001600160a01b0392831661399085612d33565b60028552602091833684880137859785811615600014613a8e575083516315ab88c960e31b81528381600481865afa908115613a8357600091613a66575b505b856139da88613452565b91169052808516613a58575090806004928451938480926315ab88c960e31b82525afa928315613a4e575090613a1b9291600092613a21575b50509261345f565b91169052565b613a409250803d10613a47575b613a388183612d65565b810190613956565b3880613a13565b503d613a2e565b513d6000823e3d90fd5b915050613a1b91509261345f565b613a7d9150843d8611613a4757613a388183612d65565b386139ce565b85513d6000823e3d90fd5b6139d0565b90608092613ab9919695949683526000602084015260a0604084015260a0830190613919565b6001600160a01b0390951660608201520152565b60405163095ea7b360e01b60208083019182526001600160a01b039094166024830152600019604480840191909152825267ffffffffffffffff92916080810184811182821017612d4f57604052600092839283809351925af1913d15613bdd573d908111613bc95760405190613b4d601f8201601f1916860183612d65565b81528091843d92013e5b81613b99575b5015613b665750565b6064906040519062461bcd60e51b82526004820152600c60248201526b2173616665417070726f766560a01b6044820152fd5b80518015925083908315613bb1575b50505038613b5d565b613bc19350820181019101613362565b388281613ba8565b634e487b7160e01b82526041600452602482fd5b50506060613b5756fe516112f3bf06e373fcea44db364769c04cc7ef4392e6de95d2b250720bcacefba26469706673582212205bc7ac1966f51929369415b8d7abd0aeed8de2823d02bbbd330b641d83c0931a64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "checkoutLiquidation(uint256)": {
        "details": "检查清算条件,",
        "params": {
          "_pid": "是池子的索引"
        }
      },
      "claimBorrow(uint256)": {
        "details": "借款人接收 sp_token 和贷款资金",
        "params": {
          "_pid": "是池状态 | 函数           | 状态要求     | 时间要求 | 操作类型   | 代币处理 | 使用场景    | `claimBorrow` | EXECUTION/FINISH/LIQUIDATION | 结算后   | 领取贷款  | 铸造 JP 代币+转出借款| 获得借款资金  "
        }
      },
      "claimLend(uint256)": {
        "details": "存款人接收 sp_token,主要功能是让存款人领取 sp_token",
        "params": {
          "_pid": "是池索引  | 函数 | 角色 | 操作 | 目的 | | claimLend | 出借人 | 获得SP代币 | 获得资金凭证 |"
        }
      },
      "createPool(uint256,uint256,uint256,uint256,uint256,address,address,address,address,uint256)": {
        "details": "创建一个新的借贷池。函数接收一系列参数， 包括结算时间、结束时间、利率、最大供应量、抵押率、存入代币、借出代币、SP代币、JP代币和自动清算阈值。  Can only be called by the owner."
      },
      "depositBorrow(uint256,uint256)": {
        "details": "借款人质押操作",
        "params": {
          "_pid": "是池子索引",
          "_stakeAmount": "是用户质押的数量"
        }
      },
      "depositLend(uint256,uint256)": {
        "details": "出借人执行存款操作，将资金存入借贷池",
        "params": {
          "_pid": "是池索引 | 函数 | 状态要求 | 时间要求 | 操作类型 | 代币处理 | 使用场景 | | `depositLend` | MATCH | 结算前 | 存入资金 | 转入池中 | 提供借贷资金 |",
          "_stakeAmount": "是用户的质押金额"
        }
      },
      "emergencyBorrowWithdrawal(uint256)": {
        "details": "紧急借款提取",
        "params": {
          "_pid": "是池子的索引"
        }
      },
      "emergencyLendWithdrawal(uint256)": {
        "details": "出借人紧急提取存款，用于处理池异常情况",
        "params": {
          "_pid": "是池索引"
        }
      },
      "finish(uint256)": {
        "details": "完成一个借贷池的操作，包括计算利息、执行交换操作、赎回费用和更新池子状态等步骤。",
        "params": {
          "_pid": "是池子的索引"
        }
      },
      "liquidate(uint256)": {
        "details": "清算",
        "params": {
          "_pid": "是池子的索引"
        }
      },
      "refundBorrow(uint256)": {
        "details": "退还给借款人的超额抵押品",
        "params": {
          "_pid": "是池状态"
        }
      },
      "refundLend(uint256)": {
        "details": "退还过量存款给存款人",
        "params": {
          "_pid": "是池索引"
        }
      },
      "setFeeAddress(address)": {
        "details": "Set up the address to receive the handling fee"
      },
      "withdrawBorrow(uint256,uint256)": {
        "details": "借款人赎回质押",
        "params": {
          "_jpAmount": "是用户销毁JPtoken的数量",
          "_pid": "是池状态"
        }
      },
      "withdrawLend(uint256,uint256)": {
        "details": "存款人取回本金和利息",
        "params": {
          "_pid": "是池索引",
          "_spAmount": "是销毁的sp数量 | 函数 | 状态要求 | 提取金额 | 是否计算利息 | 使用场景 | | `withdrawLend` | FINISH/LIQUIDATION | 按SP代币比例 | ✅ 计算利息 | 正常到期提取或者清算提取 |"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimBorrow(uint256)": {
        "notice": "池状态不等于匹配和未完成"
      },
      "claimLend(uint256)": {
        "notice": "池状态不等于匹配和未完成"
      },
      "depositLend(uint256,uint256)": {
        "notice": "池状态必须为MATCH"
      },
      "emergencyBorrowWithdrawal(uint256)": {
        "notice": "在极端情况下，总存款为0，或者总保证金为0， 在某些极端情况下，如总存款为0或总保证金为0时，借款者可以进行紧急提取。 首先，代码会获取池子的基本信息和借款者的借款信息，然后检查借款供应和借款者的质押金额是否大于0， 以及借款者是否已经进行过退款。如果这些条件都满足， 那么就会执行赎回操作，并标记借款者已经退款。 最后，触发一个紧急借款提取的事件。"
      },
      "emergencyLendWithdrawal(uint256)": {
        "notice": "池状态必须是未完成  什么情况下会出现UNDONE？ 1. **只有存款没有借款**：出借人存入资金，但没有借款人质押抵押品 2. **只有借款没有存款**：借款人质押抵押品，但没有出借人提供资金 3. **池创建失败**：池的配置有问题，无法正常运作 | 函数 | 状态要求 | 时间要求 | 操作类型 | 代币处理 | 使用场景 | | `emergencyLendWithdrawal` | UNDONE | 无限制 | 紧急退出 | 转出全部存款 | 异常情况安全退出 |"
      },
      "refundBorrow(uint256)": {
        "notice": "池状态不等于匹配和未完成 | 函数           | 状态要求     | 时间要求 | 操作类型   | 代币处理 | 使用场景    | `refundBorrow` | EXECUTION/FINISH/LIQUIDATION | 结算后   | 退还超额  | 转出超额抵押品| 退还超额质押   "
      },
      "refundLend(uint256)": {
        "notice": "池状态不等于匹配和未完成 | 函数 | 状态要求 | 提取金额 | 是否计算利息 | 使用场景 | | `refundLend` | EXECUTION/FINISH/LIQUIDATION | 超额部分 | ❌ 不计算利息 | 退还超额存款 |"
      },
      "setFeeAddress(address)": {
        "notice": "Only allow administrators to operate"
      },
      "withdrawBorrow(uint256,uint256)": {
        "notice": " | 函数           | 状态要求     | 时间要求 | 操作类型   | 代币处理 | 使用场景    | `withdrawBorrow` | FINISH/LIQUIDATION | 到期后   | 赎回抵押品  | 销毁 JP 代币+转出抵押品| 取回质押的抵押品  "
      },
      "withdrawLend(uint256,uint256)": {
        "notice": "池的状态可能是完成或清算"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2740,
        "contract": "contracts/pledage/PledgePool.sol:PledgePool",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9987,
        "contract": "contracts/pledage/PledgePool.sol:PledgePool",
        "label": "minAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10004,
        "contract": "contracts/pledage/PledgePool.sol:PledgePool",
        "label": "globalPaused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 10006,
        "contract": "contracts/pledage/PledgePool.sol:PledgePool",
        "label": "swapRouter",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10008,
        "contract": "contracts/pledage/PledgePool.sol:PledgePool",
        "label": "feeAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10011,
        "contract": "contracts/pledage/PledgePool.sol:PledgePool",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBscPledgeOracle)8002"
      },
      {
        "astId": 10013,
        "contract": "contracts/pledage/PledgePool.sol:PledgePool",
        "label": "lendFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10015,
        "contract": "contracts/pledage/PledgePool.sol:PledgePool",
        "label": "borrowFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10049,
        "contract": "contracts/pledage/PledgePool.sol:PledgePool",
        "label": "poolBaseInfos",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(PoolBaseInfo)10045_storage)dyn_storage"
      },
      {
        "astId": 10066,
        "contract": "contracts/pledage/PledgePool.sol:PledgePool",
        "label": "poolDataInfos",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(PoolDataInfo)10062_storage)dyn_storage"
      },
      {
        "astId": 10082,
        "contract": "contracts/pledage/PledgePool.sol:PledgePool",
        "label": "userBorrowInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(BorrowInfo)10075_storage))"
      },
      {
        "astId": 10098,
        "contract": "contracts/pledage/PledgePool.sol:PledgePool",
        "label": "userLendInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(LendInfo)10091_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolBaseInfo)10045_storage)dyn_storage": {
        "base": "t_struct(PoolBaseInfo)10045_storage",
        "encoding": "dynamic_array",
        "label": "struct PledgePool.PoolBaseInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolDataInfo)10062_storage)dyn_storage": {
        "base": "t_struct(PoolDataInfo)10062_storage",
        "encoding": "dynamic_array",
        "label": "struct PledgePool.PoolDataInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBscPledgeOracle)8002": {
        "encoding": "inplace",
        "label": "contract IBscPledgeOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IDebtToken)8035": {
        "encoding": "inplace",
        "label": "contract IDebtToken",
        "numberOfBytes": "20"
      },
      "t_enum(PoolState)9996": {
        "encoding": "inplace",
        "label": "enum PledgePool.PoolState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(BorrowInfo)10075_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct PledgePool.BorrowInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(BorrowInfo)10075_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(LendInfo)10091_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct PledgePool.LendInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(LendInfo)10091_storage)"
      },
      "t_mapping(t_uint256,t_struct(BorrowInfo)10075_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PledgePool.BorrowInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowInfo)10075_storage"
      },
      "t_mapping(t_uint256,t_struct(LendInfo)10091_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PledgePool.LendInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LendInfo)10091_storage"
      },
      "t_struct(BorrowInfo)10075_storage": {
        "encoding": "inplace",
        "label": "struct PledgePool.BorrowInfo",
        "members": [
          {
            "astId": 10068,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "stakeAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10070,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "refundAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10072,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "hasNoRefund",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 10074,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "hasNoClaim",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LendInfo)10091_storage": {
        "encoding": "inplace",
        "label": "struct PledgePool.LendInfo",
        "members": [
          {
            "astId": 10084,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "stakeAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10086,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "refundAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10088,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "hasNoRefund",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 10090,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "hasNoClaim",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PoolBaseInfo)10045_storage": {
        "encoding": "inplace",
        "label": "struct PledgePool.PoolBaseInfo",
        "members": [
          {
            "astId": 10017,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "settleTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10019,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "endTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10021,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "interestRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10023,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "maxSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10025,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "lendSupply",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10027,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "borrowSupply",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10029,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "martgageRate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 10031,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "lendToken",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 10033,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "borrowToken",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 10036,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "state",
            "offset": 20,
            "slot": "8",
            "type": "t_enum(PoolState)9996"
          },
          {
            "astId": 10039,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "spCoin",
            "offset": 0,
            "slot": "9",
            "type": "t_contract(IDebtToken)8035"
          },
          {
            "astId": 10042,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "jpCoin",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IDebtToken)8035"
          },
          {
            "astId": 10044,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "autoLiquidateThreshold",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(PoolDataInfo)10062_storage": {
        "encoding": "inplace",
        "label": "struct PledgePool.PoolDataInfo",
        "members": [
          {
            "astId": 10051,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "settleAmountLend",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10053,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "settleAmountBorrow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10055,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "finishAmountLend",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10057,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "finishAmountBorrow",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10059,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "liquidationAmountLend",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10061,
            "contract": "contracts/pledage/PledgePool.sol:PledgePool",
            "label": "liquidationAmountBorrow",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}